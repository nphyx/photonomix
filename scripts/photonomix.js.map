{"version":3,"sources":["webpack:///webpack/bootstrap 493ee72028862a98dfa8","webpack:///./src/scripts/photonomix.constants.js","webpack:///./src/scripts/photonomix.util.js","webpack:///./src/scripts/game/photons.js","webpack:///./src/scripts/draw/sprites/util.js","webpack:///./src/scripts/draw/index.js","webpack:///./src/scripts/game/index.js","webpack:///../nphyx-pxene/src/pxene.assets.js","webpack:///../nphyx-vectrix/src/vectrix.vectors.js","webpack:///../nphyx-vectrix/src/vectrix.matrices.js","webpack:///./src/scripts/game/Void.js","webpack:///../nphyx-pxene/src/pxene.events.js","webpack:///../nphyx-pxene/src/pxene.constants.js","webpack:///./src/scripts/draw/sprites/index.js","webpack:///./src/scripts/photonomix.bufferPools.js","webpack:///./src/scripts/game/Mote.js","webpack:///./src/scripts/game/Ripple.js","webpack:///./src/scripts/photonomix.js","webpack:///../nphyx-pxene/src/controls/index.js","webpack:///../nphyx-pxene/src/controls/KeyState.js","webpack:///../nphyx-pxene/src/controls/KeyMap.js","webpack:///../nphyx-pxene/src/graphics/Sprite.js","webpack:///../nphyx-pxene/src/pxene.assets.mimeTypes.js","webpack:///../nphyx-pxene/src/graphics/CompositeSprite.js","webpack:///../nphyx-pxene/src/graphics/Atlas.js","webpack:///../nphyx-vectrix/src/vectrix.js","webpack:///../nphyx-vectrix/src/vectrix.quaternions.js","webpack:///../nphyx-pxene/src/graphics/BitmapFont.js","webpack:///../nphyx-pxene/src/pxene.display.js","webpack:///../nphyx-pxene/src/pxene.display.util.js","webpack:///../nphyx-pxene/src/pxene.display.buffers.js","webpack:///../nphyx-pxene/src/pxene.util.js","webpack:///../nphyx-pxene/src/pxene.BooleanArray.js","webpack:///../nphyx-pxene/src/pxene.CollisionMap.js","webpack:///./src/scripts/draw/bokeh.js","webpack:///./node_modules/stackblur-canvas/src/stackblur.js","webpack:///./src/scripts/draw/entities.js","webpack:///./src/scripts/draw/sprites/motes.js","webpack:///./src/scripts/draw/sprites/emitters.js","webpack:///./src/scripts/draw/sprites/photons.js","webpack:///./src/scripts/draw/sprites/voids.js","webpack:///./src/scripts/draw/sprites/markers.js","webpack:///./src/scripts/draw/sprites/ui.js","webpack:///./src/scripts/game/Emitter.js","webpack:///./src/scripts/game/Marker.js","webpack:///./src/scripts/game/AntiGravitonCluster.js","webpack:///./src/scripts/draw/ui.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","TARGET_FPS","MAX_MOTES","type","BUFFER_TYPE","SharedArrayBuffer","ArrayBuffer","twiddle","x","posneg","limit","v","min_v","max_v","Infinity","abs","random","ratio","a","b","x0","L","k","pow","E","scale","minv","maxv","max","min","X","Y","out","len","length","Float32Array","sum","reduce","vec2","magnitude","mut_normalize","distance","mut_times","mut_copy","mut_clamp","__WEBPACK_IMPORTED_MODULE_0__nphyx_vectrix__","minus","sqrt","cos","sin","PI","Math","twiddleVec","validate","isNaN","Error","dist","dist_diff","limitVecMut","gravitate","g_v","mag","y","p1","p2","strength","__WEBPACK_IMPORTED_MODULE_1__photonomix_constants__","e","console","log","fill","accelerate","drag","delta","dragStrength","dragSpeed","vel","avoid","aev","pos","opposite","maxDist","speed","absVec","outOfBounds","rotate","cosr","sinr","rdx","rdy","rvec","rdelta","r","shuffle","j","floor","create","ipos","ivel","color","ACTIVE_LIST","nextInactive","set","objectPool","init","destroy","intVals","clean","Photon","buffer","BUFFER_POOL","this","offset","allocate","O_POS","O_VEL","Uint8ClampedArray","FLOAT_LENGTH","U8_LENGTH","defineProperties","O_COLOR","lifetime","O_LIFE","mass","O_MASS","pulse","O_PULSE","surrounding","tick","cb","__WEBPACK_IMPORTED_MODULE_4__photonomix_constants__","times","mut_plus","F32","BUFFER_LENGTH","__WEBPACK_IMPORTED_MODULE_1__photonomix_bufferPools__","__WEBPACK_IMPORTED_MODULE_3__nphyx_pxene__","Array","STORED_PHOTONS","Uint32Array","size","tmpvec","__WEBPACK_IMPORTED_MODULE_2__photonomix_util__","spriteSize","g","ctx","op","globalCompositeOperation","props","minDimension","width","height","fillStyle","lineWidth","strokeStyle","beginPath","arc","stroke","closePath","animating","__WEBPACK_IMPORTED_MODULE_0__bokeh__","__WEBPACK_IMPORTED_MODULE_1__entities__","game","__WEBPACK_IMPORTED_MODULE_3__ui__","state","display","registerType","constructor","ENTITY_TYPES","Function","bind","apply","arguments","Game","photons","__WEBPACK_IMPORTED_MODULE_4__photons__","__WEBPACK_IMPORTED_MODULE_10__nphyx_pxene__","map","entities","stats","pop","born","died","target","actions","registerActions","started","clickCooldown","__WEBPACK_IMPORTED_MODULE_9__nphyx_vectrix__","marks","Uint16Array","__WEBPACK_IMPORTED_MODULE_11__photonomix_constants__","markpos","mark","__WEBPACK_IMPORTED_MODULE_0__Mote__","__WEBPACK_IMPORTED_MODULE_1__Void__","__WEBPACK_IMPORTED_MODULE_2__Emitter__","__WEBPACK_IMPORTED_MODULE_3__Marker__","__WEBPACK_IMPORTED_MODULE_5__Ripple__","__WEBPACK_IMPORTED_MODULE_7__AntiGravitonCluster__","randomMote","start","spawn","Date","now","entity","tick_delta","cursorPos","timing","lookupMap","isDown","__WEBPACK_IMPORTED_MODULE_6__draw__","getCursorPosition","interval","elapsed","frameCount","injured","bleed","dying","killMote","pregnant","push","split","__WEBPACK_IMPORTED_MODULE_8__photonomix_util__","undefined","pool","splice","emitPhoton","center","p_c","base_vel","count","slice","shift","mote","ratios","registerAction","callback","player","mouseUp","moveItem","item","oldList","newList","indexOf","fetchAsset","uri","fetchingURIs","completedURIs","fetching","enqueuedURIs","fetch","globalAssetPrefix","then","response","Promise","resolve","reject","ok","headers","__WEBPACK_IMPORTED_MODULE_0__pxene_assets_mimeTypes__","content","cache","storeAsset","makeProcessFetchResponse","setInterval","clearInterval","requestAsset","enqueueAsset","list","all","forEach","prefix","permutations","result","copy","head","rest","next","concat","getAlias","getAliasCombo","factory","combo","asMethod","method","vector","res","wrap","vec3","vec4","lerp_element","t","cubic_step","f0","f1","f2","f3","normalize","mut_lerp","lerp","mut_cubic","cubic","clamp","toString","strings","toArray","cur","toFixed","join","vec","params","flatten","__WEBPACK_IMPORTED_MODULE_0__vectrix_matrices__","homogenous","dot","angle","cross","combos","aliases2d","aliasCombos2d","aliases3d","aliasCombos3d","aliases4d","aliasCombos4d","names","defineAliases","plus","mut_minus","acos","alen","blen","scratch","inv","inv2","fs","anorm","bnorm","tmp","a0","a1","a2","b0","b1","b2","clamp_s","likeMatrices","rows","cols","mut_plus_scalar","plus_scalar","mut_minus_scalar","minus_scalar","values","matrix","vals","multiply_scalar","col","row","__WEBPACK_IMPORTED_MODULE_0__vectrix_vectors__","ar","ac","similar","brow","bcol","bcols","brows","bpos","acols","arows","arow","aroff","apos","opos","padLeft","repeat","colWidth","string","makeStrings","args","identity","translation","v2","from","v3","rotateX","rotateY","rotateZ","Void","birthMass","lastMeal","eatTime","ceil","POS_C","scratchVec1","a_dist","consume","__WEBPACK_IMPORTED_MODULE_1__photonomix_util__","__WEBPACK_IMPORTED_MODULE_3__photons__","photon","__WEBPACK_IMPORTED_MODULE_2____","Events","queue","on","event","fire","__WEBPACK_IMPORTED_MODULE_0__motes__","__WEBPACK_IMPORTED_MODULE_2__photons__","__WEBPACK_IMPORTED_MODULE_1__emitters__","__WEBPACK_IMPORTED_MODULE_3__voids__","__WEBPACK_IMPORTED_MODULE_5__ui__","__WEBPACK_IMPORTED_MODULE_4__markers__","BufferPool","itemLength","maxItems","MAX_POOL_SIZE","calculatePoolSize","freed","freedLength","Uint8Array","createFreedList","freedPos","popFree","free","Mote","_photons","bSpeed","__WEBPACK_IMPORTED_MODULE_0__photonomix_constants__","bSight","bAgro","bFear","U8_PHO","U8_COL","Int8Array","I8_BYTE_OFFSET","I8_VAL_LENGTH","floatVals","F32_BYTE_OFFSET","FLOAT_VAL_LENGTH","F32_POS","VEC_BYTE_OFFSET","F32_VEL","F32_RAT","prefs","F32_PREF","color_string","I8_DYING","action","I8_ACT","I8_PREG","I8_INJURED","lastInjury","I8_LAST_INJURY","needsUpdate","I8_UPD","I8_PULSE","I8_MEAL","F32_SIZE","sizeMin","F32_SIZE_MIN","sizeMax","F32_SIZE_MAX","F32_SPEED","sight","F32_SIGHT","agro","F32_AGRO","fear","F32_FEAR","potential","F32_POTENTIAL","resistance","F32_RESISTANCE","F32_MASS","base_speed","base_sight","base_agro","base_fear","updateProperties","__WEBPACK_IMPORTED_MODULE_1__nphyx_vectrix__","I8","U8_VAL_LENGTH","INT_VAL_LENGTH","scratch1","scratch2","__WEBPACK_IMPORTED_MODULE_3__photonomix_bufferPools__","runMaintenance","tmpPot","tmpRes","validateTarget","search","highest","deltar","deltag","deltab","mind","maxd","weight","__WEBPACK_IMPORTED_MODULE_5__Void__","discharge","eatPhoton","injure","by","choice","choiceVal","pvel","baby","rpos","rphotons","Ripple","storedMass","__WEBPACK_IMPORTED_MODULE_3__Void__","startGame","container","document","querySelector","displayConfig","photonomix","removeEventListener","classList","remove","bufferDescriptions","label","compositeMethod","scaleMethod","__WEBPACK_IMPORTED_MODULE_0__nphyx_pxene__","buffers","SCALE_KEEP_ASPECT","SCALE_NONE","pixelRatio","frameCallback","draw","util","__WEBPACK_IMPORTED_MODULE_4__photonomix_util__","constants","__WEBPACK_IMPORTED_MODULE_3__photonomix_constants__","controls","__WEBPACK_IMPORTED_MODULE_2__game__","__WEBPACK_IMPORTED_MODULE_1__draw__","window","addEventListener","keys","mapped","__WEBPACK_IMPORTED_MODULE_1__KeyMap__","keyMaps","getOrInitMap","key","ks","lookupKeyState","toLowerCase","__WEBPACK_IMPORTED_MODULE_0__KeyState__","getOrInitKeyState","filter","down","ev","time","MouseEvent","button","lastUp","lastDown","KeyboardEvent","up","blur","updateCursorState","cursor_pos","clientX","clientY","index","of","seal","KeyMap","checkedDown","checkedUp","onceDown","onceUp","Sprite","frameWidth","frameHeight","animations","context","flippedContext","ready","columns","image","flipped","canvas","createElement","getContext","drawImage","generateFlipped","sx","sy","dx","dy","w","h","setTransform","dest","frame","animation","default","frameNum","startFrame","sprite","getX","getY","fromAsepriteAtlas","__WEBPACK_IMPORTED_MODULE_0__pxene_assets__","asset","aspr","meta","frameTags","anim","to","frames","addHandler","mimeType","mimeHandlers","mimeTypeHandlerImages","blob","img","src","URL","createObjectURL","mimeTypeHandlerText","text","json","sprites","spriteCanvas","Atlas","layers","slices","source","layer","eachSlice","dims","animate","prebake","dataCallback","numLayers","numFrames","layerHeight","layerNames","trim","data","opacity","blendMode","freeze","bounds","f","atlas","vectors","matrices","__WEBPACK_IMPORTED_MODULE_1__vectrix_matrices__","vecNrm","q","z","aliasCombos","slerp","invert","ax","bx","ay","az","bz","aw","bw","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","norm","fromEulerAngles","yawh","pitchh","rollh","c1","s1","c2","s2","c3","s3","c1c2","s1s2","fromAxisAngle","angleh","axis","BitmapFont","write","lw","ls","evenNumber","toggleFullScreen","fullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","events","documentElement","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","fullscreenOff","preventDefault","webkitIsFullScreen","mozIsFullScreen","msIsFullScreen","compositeBuffer","clientWidth","clientHeight","orientation","maxDimension","bufferList","requestAnimationFrame","lastFrame","buffersByLabel","__WEBPACK_IMPORTED_MODULE_1__pxene_display_buffers__","error","config","add","bufData","id","initBuffers","AUTO_FULLSCREEN","startTime","__WEBPACK_IMPORTED_MODULE_4__pxene_constants__","aspect","__WEBPACK_IMPORTED_MODULE_2__pxene_events__","SCALE_STRETCH","offsetX","offsetY","appendChild","composite","sourceBuffer","targetContext","sw","sh","dw","dh","sourceBuffers","targetBuffer","displayProps","imageSmoothingEnabled","round","BooleanArray","internalArray","byteLength","Symbol","recycle","CollisionMap","cellWidth","cellHeight","MASK_16","MASK_X","MASK_Y","MASK_TOP","MASK_BOTTOM","MASK_RIGHT","MASK_LEFT","internal_array","CHANNEL_RED","CHANNEL_GREEN","CHANNEL_BLUE","CHANNEL_ALPHA","fromCanvasPixels","threshold","channel","timeEnd","pixels","once","getImageData","mx","my","cellBit","cellMask","mask","invertMask","cellIndex","newlen","getCell","checkRect","maskX","maskY","cellY","cellX","intersect","tx","ty","rand","hsla","generateBackground","bokehBuffer","bgCtx","fillRect","createLinearGradient","addColorStop","colors1","colors2","noisify","rad","createRadialGradient","__WEBPACK_IMPORTED_MODULE_1_stackblur_canvas__","tweak","__WEBPACK_IMPORTED_MODULE_0__photonomix_util_js__","putImageData","bgBuffer","bokehBack","bokehFront","bokehCtx","sizeBase","parts","radius","tau","clearRect","shadowBlur","shadowColor","part","getImageDataFromCanvas","top_x","top_y","getElementById","HTMLCanvasElement","imageData","processCanvasRGBA","processImageDataRGBA","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pr","pg","pb","pa","rbs","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","BlurStack","stack","stackEnd","stackIn","stackOut","mul_sum","mul_table","shg_sum","shg_table","processCanvasRGB","processImageDataRGB","blurAlphaChannel","HTMLImageElement","naturalWidth","naturalHeight","style","canvasRGBA","canvasRGB","imageDataRGBA","imageDataRGB","updateProps","ox","oy","lightBuffer","darkBuffer","tan","tf","__WEBPACK_IMPORTED_MODULE_2__photonomix_constants__","lightCtx","darkCtx","drawPlasmaLine","ra","rb","rax","ray","speeda","ta","tc","rbx","rby","speedb","tb","td","outerColor","innerColor","lineSize","frameOffset","moveTo","bezierCurveTo","lineCap","drawMote","plasmaSource","plasmaTarget","sc","sch","swh","colorIndex","px","py","__WEBPACK_IMPORTED_MODULE_5____","__WEBPACK_IMPORTED_MODULE_1__sprites__","__WEBPACK_IMPORTED_MODULE_3__game_photons__","getCenter","__WEBPACK_IMPORTED_MODULE_7__game_Mote__","getColorString","drawPhoton","ps","pixelSize","drawMarker","drawVoid","drawEmitter","message","drawAntiGravitonCluster","drawAntiPlasma","pi3rd","entitiesLight","entitiesDark","__WEBPACK_IMPORTED_MODULE_6__game__","spriteScale","moteSpriteSize","__WEBPACK_IMPORTED_MODULE_0__photonomix_constants_js__","motePixelSize","__WEBPACK_IMPORTED_MODULE_1__util__","moteMaskCanvas","moteMaskContext","initMask","moteCenter","initCenterSprite","moteTmpCanvas","moteTmpContext","moteSpriteSheetCanvas","moteSpriteSheetContext","moteSprites","colorStrings","MASK_R","MASK_G","MASK_B","createMoteSprite","initSpriteSheet","__WEBPACK_IMPORTED_MODULE_0__util__","createPhotonSprite","quadraticCurveTo","lineTo","__WEBPACK_IMPORTED_MODULE_1__game_photons__","hps","which","Emitter","arms","initialMass","emissionsPerSecond","emissionsPerFrame","targetFrame","__WEBPACK_IMPORTED_MODULE_4__Ripple__","radians","mim","getColor","Marker","AntiGravitonCluster","instability","rot","drawUIText","alpha","err","curTime","font","writeCentered","drawDebugMarkers","move","__WEBPACK_IMPORTED_MODULE_2__nphyx_pxene__","__WEBPACK_IMPORTED_MODULE_0____","drawPointer","metrics","measureText","fillText","uiBuffer","ui","wh","hh"],"mappings":"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","file":"scripts/photonomix.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 493ee72028862a98dfa8","export const TARGET_FPS = 30;\nexport const WEIGHT_PRED_R = 1.3;\nexport const WEIGHT_PRED_G = 0.7;\nexport const WEIGHT_PRED_B = 1;\nexport const START_POP = 50;\nexport const MOTE_BASE_SIZE = 0.015;\nexport const MOTE_BASE_ALPHA = 1;\nexport const MOTE_BASE_SPEED = 0.0005;\nexport const MOTE_BASE_SIGHT = 0.15;\nexport const PREGNANT_THRESHOLD = 172;\nexport const PREGNANT_TIME = 30;\nexport const DEATH_THRESHOLD = 18;\nexport const GRAVITY = 6.67408e-8;\nexport const GLOBAL_DRAG = 0.1;\nexport const PHOTON_BASE_SIZE = 0.015;\nexport const PHOTON_LIFETIME = TARGET_FPS*10;\nexport const MARKER_HIT_LIFETIME = ~~(TARGET_FPS);\nexport const MARKER_HIT_SIZE = 0.1;\nexport const VOID_SIZE = 0.01;\nexport const EMITTER_SIZE = 0.01;\nexport const MAX_MOTES = 300;\nexport const MAX_PHOTONS = ~~((MAX_MOTES * PREGNANT_THRESHOLD)/2);\nexport const MAX_VOIDS = 5;\nexport const MAX_EMITTERS = 5;\nexport const MAX_ENTITIES = MAX_MOTES + MAX_PHOTONS + MAX_VOIDS + MAX_EMITTERS;\nexport const POSITIVE_ENERGY = 0.01; // chance a dead mote will produce an emitter\nexport const NEGATIVE_ENERGY = 0.01; // chance a dead mote will produce a void\n\n// general debug switch\nexport const DEBUG = false;\n// toggles vector validation in various functions that tend to produce\n// infinite or NaN results; when enabled, vectors are checked and if invalid\n// the function is rerun step by step and logged to identify trouble spots\nexport const VALIDATE_VECTORS = DEBUG || true;\n\nlet type;\nif(typeof(SharedArrayBuffer) !== \"undefined\") {\n\t/* global SharedArrayBuffer */\n\ttype = SharedArrayBuffer;\n}\nelse {\n\ttype = ArrayBuffer;\n}\n\nexport const BUFFER_TYPE = type;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.constants.js\n// module id = 0\n// module chunks = 0","\"use strict\";\nimport * as vectrix from \"@nphyx/vectrix\";\nimport {VALIDATE_VECTORS, GRAVITY} from \"./photonomix.constants\";\nconst {vec2, magnitude, mut_normalize, distance, mut_times, mut_copy, mut_clamp} = vectrix.vectors;\nconst {minus} = vectrix.matrices;\nconst {sqrt, abs, E, pow, cos, sin, random, PI, max, min} = Math;\nconst X = 0, Y = 1;\nconst MIN_F = 1e-11;\nconst MAX_F = 1e+11;\n\n/**\n * Twiddles a value by a small amount to avoid zeroes\n */\nexport function twiddle(x) {\n\treturn x + (1e-11*posneg());\n}\n\nexport const twiddleVec = (function() {\n\tlet i = 0|0, l = 0|0;\n\treturn function twiddleVec(v) {\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = twiddle(v[i]);\n\t\t}\n\t\treturn v;\n\t}\n})();\n\n\nexport const validate = (function() {\n\tlet i, l;\n\treturn function validate(v) {\n\t\tfor(i = 0, l = v.length; i < l; i++) {\n\t\t\tif(isNaN(v[i])) throw new Error(\"NaN vector\");\n\t\t\tif(v[i] === Infinity) throw new Error(\"Infinite vector\");\n\t\t\tif(v[i] === -Infinity) throw new Error(\"-Infinite vector\");\n\t\t}\n\t}\n})();\n\nexport const dist = (function () {\n\tlet dist_diff = vec2();\n\treturn function dist(a, b) {\n\t\treturn magnitude(minus(a, b, dist_diff));\n\t}\n})();\n\nfunction limit(v, min_v = 0, max_v = Infinity) {\n\tif(abs(v) < abs(min_v)) {\n\t\tif(v < 0) v = -min_v;\n\t\telse v = min_v;\n\t}\n\telse if(abs(v) > abs(max_v)) {\n\t\tif(v < 0) v = -max_v;\n\t\telse v = max_v;\n\t}\n\treturn v;\n}\n\nexport const limitVecMut = (function() {\n\tlet i = 0|0, l = 0|0;\n\t/**\n\t * Limits absolute values of vectors within a range.\n\t */\n\treturn function limitVecMut(v, min_v = 0, max_v = Infinity) {\t\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = limit(v[i], min_v, max_v);\n\t\t}\n\t}\n})();\n\n/**\n * Gravitate toward target.\n */\nexport const gravitate = (function() {\n\tlet g_v = vec2();\n\tlet mag = 0.0, x = 0.0, y = 0.0, scale = 0.0;\n\treturn function gravitate(p1, p2, strength, out) {\n\t\tout = out||g_v;\n\t\tminus(p1, p2, out);\n\t\tmag = magnitude(out);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || mag === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength*GRAVITY/(mag*mag));\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"gravitation error\", e);\n\t\t\t\tconsole.log(strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tlimitVecMut(out, 0.00001, 10); // put a cap on it to avoid infinite acceleration\n\t\t\t\tconsole.log(\"limit\", out);\n\t\t\t\tmag = magnitude(out);\n\t\t\t\tconsole.log(\"magnitude\", mag);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength/(mag*mag));\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Accelerate toward a target.\n */\nexport const accelerate = (function() {\n\tlet v = vec2();\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\treturn function accelerate(p1, p2, strength, out) {\n\t\tout = out||v;\t\n\t\tminus(p1, p2, out);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif(x === 0 && y === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"acceleration error\", e);\n\t\t\t\tconsole.log(\"strength\", strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength);\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n\nexport const drag = (function() {\n\tlet delta = vec2(), dragStrength = 0.0, dragSpeed = 0.0;\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\t/**\n\t * Apply drag.\n\t */\n\treturn function drag(vel, c, out) {\n\t\tout = out||delta;\n\t\tdragSpeed = magnitude(vel);\n\t\t// null small values\n\t\tdragSpeed = limit(dragSpeed, 0, 1e+11); // avoid infinite dragSpeeds\n\t\tdragStrength = mut_clamp(c * dragSpeed * dragSpeed, 1e-11, 1e+11);\n\t\tmut_copy(out, vel);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || dragStrength === 0) return out;\n\t\t// inline normalize for speed, since this happens a lot\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tdragStrength = mut_clamp(dragStrength, MIN_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t// mut_normalize(out)\n\t\tmut_times(out, -1);\n\t\tmut_times(out, dragStrength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"drag error\", e);\n\t\t\t\tconsole.log(c, dragSpeed, dragStrength);\n\t\t\t\tconsole.log(\"magnitude\", magnitude(vel));\n\t\t\t\tmut_copy(out, vel);\n\t\t\t\tconsole.log(\"copied\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalized\", out);\n\t\t\t\tmut_times(out, -1);\n\t\t\t\tconsole.log(\"inverted\", out);\n\t\t\t\tmut_times(out, dragStrength);\n\t\t\t\tconsole.log(\"scaled\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport const avoid = (function() {\n\tlet aev = vec2(), dist = 0.0;\n\treturn function avoid(vel, pos, opposite, maxDist, speed, out) {\n\t\tdist = distance(pos, opposite)*maxDist;\n\t\tout = out||aev;\n\t\tout[0] = 0.0;\n\t\tout[1] = 0.0;\n\t\tif(dist > 1) {\n\t\t\taccelerate(pos, opposite, speed*dist*dist, out);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * absolute value of vector\n */\nexport const absVec = (function() {\n\tlet i = 0|0, l = 0|0;\n\treturn function absVec(v) {\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = abs(v[i]);\n\t\t}\n\t\treturn v;\n\t}\n})();\n\nexport const outOfBounds = (function() {\n\treturn function outOfBounds(v, n) {\n\t\tlet x = v[0];\t\n\t\tlet y = v[1];\t\n\t\tif(x > n || x < -n) return true; \n\t\telse if(y > n || y < -n) return true;\n\t\telse return false;\n\t}\n})();\n\n/**\n * Smoothing using a sigmoid (logistic function) curve.\n * @param {float} x input value\n * @param {float} x0 midpoint of curve\n * @param {float} L limit of curve\n * @param {float} k slope of curve\n */\nexport function logisticSmooth(x, x0, L = x * 2, k = 1) {\n\treturn L / (1 + pow(E, k * x-x0))\n}\n\n/**\n * A random function adjusted to a range of -1 to 1 and multiplied by a\n * scaling value\n */\nexport function adjRand(scale = 1) {\n\treturn ((random()*2)-1)*scale\n}\n\n/**\n * Returns a delta velocity vector of the vector p rotated around center point c by\n * r radians.\n */\nexport const rotate = (function() {\n\tlet cosr = 0.0, sinr = 0.0, rdx = 0.0, rdy = 0.0, rvec = vec2(), rdelta = vec2();\n\treturn function rotate(p, c, r, out) {\n\t\tout = out||rvec;\n\t\tcosr = cos(r*PI);\n\t\tsinr = sin(r*PI);\n\t\tminus(p, c, rdelta);\n\t\trdx = rdelta[X]; \n\t\trdy = rdelta[Y];\n\t\tout[X] = (rdx * cosr - rdy * sinr);\n\t\tout[Y] = (rdx * sinr + rdy * cosr);\n\t\treturn out;\n\t}\n})();\n\nexport function posneg() {\n\treturn random() > 0.5?1:-1;\n}\n\nexport function clamp(v, minv, maxv) {\n\treturn max(min(v, maxv), minv);\n}\n\nexport function ratio(a, b) { return a/(abs(a)+abs(b)) }\nexport function rat_vec2(v) { return ratio(v[X], v[Y]) }\n\nexport function norm_ratio(v, out) { \n\tlet i = 0, len = v.length;\n\tout = out || new Float32Array(len);\n\tlet sum = v.reduce((p, c) => p + c, 0);\t\n\tfor(; i < len; ++i) out[i] = (v[i] !== 0?v[i]/sum:0);\n\treturn out;\n}\n\n/**\n* Shuffles array in place. ES6 version\n* @param {Array} a items The array containing the items.\n*/\nexport const shuffle = (function() {\n\tlet i = 0|0, j = 0|0;\n\treturn function shuffle(a) {\n\t\tfor (i = a.length; i; i--) {\n\t\t\tj = Math.floor(Math.random() * i);\n\t\t\t[a[i - 1], a[j]] = [a[j], a[i - 1]];\n\t\t}\n\t}\n})();\n\n/**\n * Round to nearest even number.\n */\nexport function evenNumber(n) {\nreturn n >> 1 << 1;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.util.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nimport * as vectrix from \"@nphyx/vectrix\";\nimport {BufferPool} from \"../photonomix.bufferPools\";\nimport {drag} from \"../photonomix.util\";\nimport {BooleanArray} from \"@nphyx/pxene\";\nimport {TARGET_FPS, GLOBAL_DRAG, PHOTON_LIFETIME, PHOTON_BASE_SIZE, MAX_PHOTONS} from \"../photonomix.constants\";\nlet {vec2, times, mut_copy} = vectrix.vectors;\nlet {mut_plus} = vectrix.matrices;\nconst {random} = Math;\n\nconst I8 = 1;\nconst F32 = 4;\nconst O_POS = 0;\nconst O_VEL = F32*2;\nconst FLOAT_LENGTH = O_VEL + F32*2;\nconst O_COLOR = 0;\nconst O_LIFE = O_COLOR + I8;\nconst O_MASS = O_LIFE + I8;\nconst O_PULSE = O_MASS + I8;\nconst U8_LENGTH = O_PULSE + I8;\nexport const BUFFER_LENGTH = (FLOAT_LENGTH + U8_LENGTH) + (F32 - (FLOAT_LENGTH + U8_LENGTH)%F32);\nexport const COLOR_R = 0, COLOR_G = 1, COLOR_B = 2;\n\nconst BUFFER_POOL = new BufferPool(BUFFER_LENGTH, MAX_PHOTONS);\nconst ACTIVE_LIST = new BooleanArray(MAX_PHOTONS);\nconst objectPool = Array(MAX_PHOTONS);\n\nexport const STORED_PHOTONS = new Uint32Array(3);\n\nfunction nextInactive() {\n\tlet i = 0, len = ACTIVE_LIST.length;\n\tfor(; i < len; ++i) if(!ACTIVE_LIST.get(i)) return i;\n\tthrow new Error(\"out of photons\");\n}\n\nexport function create(ipos, ivel, color) {\n\tlet o = nextInactive();\n\tACTIVE_LIST.set(o, true);\n\tobjectPool[o].init(ipos, ivel, color);\n\treturn objectPool[o];\n}\n\nexport function destroy(o) {\n\tACTIVE_LIST.set(o, false);\n\tclean(o);\n}\n\nexport function tick(surrounding, delta) {\n\tlet i = 0, len = ACTIVE_LIST.length;\n\tfor(; i < len; ++i) if(ACTIVE_LIST.get(i)) {\n\t\tobjectPool[i].tick(surrounding, delta);\n\t\tif(objectPool[i].lifetime <= 0) destroy(i);\n\t}\n}\n\nexport function forEach(cb) {\n\tlet i = 0, len = ACTIVE_LIST.length;\n\tfor(; i < len; ++i) if(ACTIVE_LIST.get(i)) {\n\t\tcb(objectPool[i]);\n\t}\n}\n\nexport function init() {\n\tfor(let i = 0; i < MAX_PHOTONS; ++i) {\n\t\tobjectPool[i] = new Photon();\n\t}\n}\n\n/**\n * This cannot be called externally without throwing an error. It's here for instanceof testing until\n * migration is finished.\n */\nexport function Photon() {\n\tlet buffer = BUFFER_POOL.buffer;\n\tthis.offset = BUFFER_POOL.allocate();\n\tthis.pos = vec2(0.0, 0.0, buffer, O_POS+this.offset);\n\tthis.vel = vec2(0.0, 0.0, buffer, O_VEL+this.offset);\n\tthis.intVals = new Uint8ClampedArray(buffer, FLOAT_LENGTH+this.offset, U8_LENGTH);\n\n\tObject.defineProperties(this, {\n\t\t\"color\": {get:() => this.intVals[O_COLOR], set:(x) => this.intVals[O_COLOR] = x},\n\t\t\"lifetime\": {get:() => this.intVals[O_LIFE], set:(x) => this.intVals[O_LIFE] = x},\n\t\t\"mass\": {get:() => this.intVals[O_MASS], set:(x) => this.intVals[O_MASS] = x},\n\t\t\"pulse\": {get:() => this.intVals[O_PULSE], set:(x) => this.intVals[O_PULSE] = x}\n\t});\n}\n\nPhoton.prototype.init = function(ipos, ivel, color) {\n\tmut_copy(this.pos, ipos);\n\tmut_copy(this.vel, ivel);\n\tthis.lifetime = PHOTON_LIFETIME;\n\tthis.size = PHOTON_BASE_SIZE;\n\tthis.color = color;\n\tthis.mass = 1;\n\tthis.pulse = ~~(TARGET_FPS*random());\n}\n\nPhoton.prototype.tick = (() => {\n\tlet tmpvec = vec2(), pos, vel;\n\treturn function(surrounding, delta) {\n\t\tif(this.lifetime > 0) this.lifetime--;\n\t\tpos = this.pos; vel = this.vel;\t\n\t\tmut_plus(pos, times(vel, delta, tmpvec));\n\t\tmut_plus(vel, drag(vel, GLOBAL_DRAG));\n\t}\n})();\n\nfunction clean(o) {\n\tobjectPool[o].pos.fill(0.0);\n\tobjectPool[o].vel.fill(0.0);\n\tobjectPool[o].intVals.fill(0);\n}\n\nPhoton.prototype.destroy = function() {\n\tdestroy(this.offset);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/photons.js\n// module id = 3\n// module chunks = 0","\"use strict\";\n\nexport function scaleSprite(scale, spriteSize) {\n\treturn ~~(scale*spriteSize);\n}\n\nexport function colorIndex(r, g, b) {\n\treturn (r >> 4 << 8) + (g >> 4 << 4) + (b >> 4);\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/util.js\n// module id = 4\n// module chunks = 0","\"use strict\";\nimport * as bokeh from \"./bokeh\";\nimport * as entities from \"./entities\";\nimport * as sprites from \"./sprites\";\nimport * as ui from \"./ui\";\nexport {bokeh, entities, sprites, ui};\n\nlet animating = false; // whether the game is currently running animation loop\nlet game; // game environment object\nlet props; // display properties\n\n/**\n * Using this checks and avoids altering the canvas context state machine if unnecessary,\n * which theoretically saves a little time.\n */\nexport function updateCompositeOperation(ctx, op) {\n\tif(ctx.globalCompositeOperation !== op) ctx.globalCompositeOperation = op;\n}\n\n/**\n * Calculates the screenspace pixel offset of a coordinate from the [-1,1] coordinate\n * range used in game position vectors.\n */\nexport function screenSpace(x) {\n\treturn ((x+1)/2) * props.minDimension;\n}\n\n/**\n * Finds the screen space equivalent of the game space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\n\nexport function screenSpaceVec(v, out) {\n\tout[0] = (((v[0]+1)/2)*props.minDimension);\n\tout[1] = (((v[1]+1)/2)*props.minDimension);\n\treturn out;\n}\n\n/**\n * Finds the game space equivalent of the sceen space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\nexport function gameSpaceVec(v, out) {\n\tout[0] = 2*((v[0])/props.minDimension)-1;\n\tout[1] = 2*((v[1])/props.minDimension)-1;\n}\n\n/**\n * Checks if entity is out of screen space by more than 50%.\n */\nexport function offscreen(x, y) {\n\treturn (\n\t\tx < (props.width  * -0.5) || x >props.width   * 1.5 ||\n\t\ty < (props.height * -0.5) || y > props.height * 1.5\n\t)\n}\n\n/**\n * Draws a colored circle.\n */\nexport function drawCircle(ctx, x, y, size, fillStyle, lineWidth = 0, strokeStyle = undefined) {\n\tctx.globalCompositeOperation = \"source-over\";\n\tctx.beginPath();\n\tctx.arc(x, y, size, 2 * Math.PI, false);\n\tctx.fillStyle = fillStyle;\n\tctx.fill();\n\tif(strokeStyle) {\n\t\tctx.strokeStyle = strokeStyle;\n\t\tctx.lineWidth = lineWidth;\n\t\tctx.stroke();\n\t}\n\tctx.closePath();\n}\n\n\n/**\n * Main animation loop.\n */\nexport function tick() {\n\tif(!animating) animating = true;\n\tbokeh.draw();\n\tentities.draw(game);\n\tui.draw(game);\n}\n\n/**\n * Initializes game environment.\n */\nexport function init(state, display) {\n\tgame = state.game;\n\tprops = display.props;\n\tbokeh.init(display);\n\tentities.init(display);\n\tui.init(display);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/index.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nimport Mote from \"./Mote\";\nimport Void from \"./Void\";\nimport Emitter from \"./Emitter\";\nimport Marker from \"./Marker\";\nimport * as Photons from \"./photons\";\nimport Ripple from \"./Ripple\";\nimport {gameSpaceVec} from \"../draw\";\nimport AntiGravitonCluster from \"./AntiGravitonCluster\";\nconst Photon = Photons.Photon;\n\nimport {rotate, outOfBounds} from \"../photonomix.util\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {controls} from \"@nphyx/pxene\";\nimport {TARGET_FPS, START_POP, MAX_MOTES, MAX_PHOTONS, PREGNANT_TIME, DEATH_THRESHOLD,\n\tPOSITIVE_ENERGY, NEGATIVE_ENERGY} from \"../photonomix.constants\";\nconst {minus} = vectrix.matrices;\nconst {vec2, mut_copy} = vectrix.vectors;\nconst marks = new Uint16Array(MAX_MOTES+MAX_PHOTONS+100);\nlet {random} = Math;\nlet markpos = 0;\nlet mark = 0;\n\nconst ENTITY_TYPES = {};\n\nexport {Mote, Void, Emitter, Marker, Photon, AntiGravitonCluster, Ripple};\n\n/**\n * TODO: change these functions out with proper factories.\n */\nexport function registerType(name, constructor) {\n\tENTITY_TYPES[name] = function() {\n\t\treturn new (Function.prototype.bind.apply(constructor, arguments))();\n\t}\n}\n\nregisterType(\"mote\", Mote);\nregisterType(\"void\", Void);\nregisterType(\"emitter\", Emitter);\nregisterType(\"marker\", Marker);\nregisterType(\"ripple\", Ripple);\nregisterType(\"antiGravitonCluster\", AntiGravitonCluster);\nENTITY_TYPES.randomMote = Mote.random;\n\nexport function Game() {\n\tthis.photons = Photons;\n\tthis.photons.init();\n\tcontrols.map(\"ripple\", \"mouse0\");\n\tthis.entities = [];\n\tthis.stats = {\n\t\tpop:0,\n\t\tborn:0,\n\t\tdied:0,\n\t\ttarget:0\n\t}\n\tthis.actions = {};\n\tthis.registerActions();\n\tthis.started = -1;\n\tthis.clickCooldown = 0;\n\treturn this;\n}\n\nGame.prototype.start = function() {\n\tfor(let i = 0; i < START_POP; ++i) {\n\t\tthis.spawn(\"randomMote\");\n\t}\n\tthis.started = Date.now();\n}\n\nGame.prototype.tick = (function() {\n\tlet entities, entity, i = 0|0, len = 0|0, tick_delta = 0.0, cursorPos = vec2();\n\treturn function tick(timing) {\n\t\tif(this.clickCooldown === 0) {\n\t\t \tif(controls.lookupMap(\"ripple\").isDown()) {\n\t\t\t\tgameSpaceVec(controls.getCursorPosition(), cursorPos);\n\t\t\t\tthis.spawn(\"ripple\", cursorPos);\n\t\t\t\tthis.clickCooldown = 3;\n\t\t\t}\n\t\t}\n\t\telse this.clickCooldown--;\n\t\tlet delta = timing.interval/timing.elapsed;\n\t\tlet frameCount = timing.frameCount;\n\t\tentities = this.entities;\n\t\tthis.stats.target = 0;\n\t\tthis.stats.pop = 0;\n\t\ttick_delta = delta/TARGET_FPS;\n\t\tthis.photons.tick(this.entities, tick_delta, frameCount);\n\t\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\t\tentity = entities[i];\n\t\t\tentity.tick(this.entities, tick_delta, frameCount);\n\t\t\t// do mote-specific stuff\n\t\t\tif(entity instanceof Mote) {\n\t\t\t\tthis.stats.pop++;\n\t\t\t\tif(entity.target) this.stats.target++;\n\t\t\t\tif(entity.injured) {\n\t\t\t\t\tif(frameCount % ~~(TARGET_FPS*0.1) === 0) {\n\t\t\t\t\t\t//this.entities.push(entity.bleed());\n\t\t\t\t\t\tentity.bleed();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// mark dead for removal\n\t\t\t\tif(entity.dying === DEATH_THRESHOLD) {\n\t\t\t\t\tthis.killMote(entity);\n\t\t\t\t\tmarks[markpos] = i;\n\t\t\t\t\tthis.stats.died++;\n\t\t\t\t\tmarkpos++;\n\t\t\t\t}\n\t\t\t\telse if(entity.pregnant === PREGNANT_TIME) {\n\t\t\t\t\tthis.entities.push(entity.split());\n\t\t\t\t\tthis.stats.born++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\telse if(entity instanceof Photons.Photon) {\n\t\t\t\tif(entity.lifetime <= 0) {\n\t\t\t\t\tmarks[markpos] = i;\n\t\t\t\t\tSTORED_PHOTONS[entity.color]++;\n\t\t\t\t\tmarkpos++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\telse if(entity instanceof Ripple) {\n\t\t\t\tif(entity.mass > 250) {\n\t\t\t\t\tthis.spawn(\"void\", entity.pos, [0,0], 100);\n\t\t\t\t\tentity.mass = 0;\n\t\t\t\t}\n\t\t\t\tif(entity.mass <= 0) {\n\t\t\t\t\tmarks[markpos] = i;\n\t\t\t\t\tmarkpos++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(entity.mass <= 0) {\n\t\t\t\tmarks[markpos] = i;\n\t\t\t\tmarkpos++;\n\t\t\t}\n\t\t\t// physics effects sometimes chuck things way out of bounds\n\t\t\t// just delete them, they ain't comin' back\n\t\t\tif(outOfBounds(entity.pos, 20)) {\n\t\t\t\tmarks[markpos] = i;\n\t\t\t\tmarkpos++;\n\t\t\t}\n\t\t}\n\n\t\t// sweep dead\n\t\twhile(markpos > 0) {\n\t\t\tmarkpos--;\n\t\t\tmark = marks[markpos];\n\t\t\tentity = entities[mark];\n\t\t\tif(entity && (entity.pool !== undefined)) {\n\t\t\t\tentity.destroy();\n\t\t\t}\n\t\t\tentities.splice(mark, 1);\n\t\t\tmarks[markpos] = 0;\n\t\t}\n\n\t\t// shuffling helps action lock issues and reduces first in list advantage\n\t\t//shuffle(entities);\n\t}\n})();\n\nGame.prototype.emitPhoton = (function() {\n\tlet pos = vec2(), vel = vec2(), center = vec2(), p_c = 0, \n\t\tbase_vel = vec2(0.05, 0.05);\n\treturn function emitPhoton(ipos, ivel, color, count = p_c, max = 12) {\n\t\tipos = ipos||[random()*1.8-0.9, random()*1.8-0.9];\n\t\tif(ivel) {\n\t\t\tmut_copy(vel, ivel);\n\t\t}\n\t\telse {\n\t\t\tmut_copy(vel, base_vel);\n\t\t\trotate(vel, center, ((p_c%max)/(max/2)), vel);\n\t\t}\n\t\tcolor = color||~~(random()*3);\n\t\tmut_copy(pos, ipos);\n\t\tthis.photons.create(pos, vel, color);\n\t\tp_c++;\n\t\treturn color;\n\t}\n})();\n\nGame.prototype.spawn = function() {\n\tlet args = Array.prototype.slice.apply(arguments);\n\tlet type = args.shift();\n\tif(ENTITY_TYPES[type]) {\n\t\tthis.entities.push(ENTITY_TYPES[type].apply(null, arguments));\n\t}\n}\n\nGame.prototype.killMote = (function() {\n\tlet sum = 0|0, c = 0|0, i = 0|0, pos = vec2(), r = 0|0, g = 0|0, b = 0|0;\n\treturn function killMote(mote) {\n\t\tif(random() < POSITIVE_ENERGY) {\n\t\t\tthis.entities.push(new Emitter(mote.pos, mote.vel, ~~(DEATH_THRESHOLD*10*random()), undefined, mote.ratios));\n\t\t}\n\t\telse if(random() < NEGATIVE_ENERGY) {\n\t\t\tthis.entities.push(new Void(mote.pos, mote.vel, ~~(DEATH_THRESHOLD*10*random()))); \n\t\t}\n\t\telse {\n\t\t\tmut_copy(pos, mote.pos);\n\t\t\tr = mote.photons[0];\n\t\t\tg = mote.photons[1];\n\t\t\tb = mote.photons[2];\n\t\t\tsum = r+b+g;\n\t\t\tc = 0;\n\t\t\tfor(i = 0; i < sum; ++i) {\n\t\t\t\tif(r === i) c = 1;\n\t\t\t\tif(r+g === i) c = 2;\n\t\t\t\tthis.emitPhoton(pos, undefined, c, i, sum);\n\t\t\t}\n\t\t}\n\t}\n})();\n\n/**\n * Actions are callbacks accepting the following parameters:\n * @param {vec2} center center of the click region for the action (i.e. the UI element)\n * @param {float} dist the distance from region center to mouseUp position\n */\nGame.prototype.registerAction = function(name, callback) {\n\tthis.actions[name] = callback.bind(this);\n}\n\nlet delta = vec2();\nGame.prototype.registerActions = function() {\n\tthis.registerAction(\"launchAntiGravitonCluster\", function(center) {\n\t\tminus(this.player.mouseUp, center, delta);\n\t\tthis.entities.push(new AntiGravitonCluster(center, delta, 148));\n\t});\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/index.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nimport * as mimeTypes from \"./pxene.assets.mimeTypes\";\n\n/**\n * @Module pxene.assets\n * Handles loading, pre-processing, and caching of remote assets.\n */\n/** @const {Array} list of deferred asset URIs **/\nconst enqueuedURIs = [];\n/** @const {Array} list of currently fetching URIs **/\nconst fetchingURIs = [];\n/** @const {Array} list of completed URIs which should be in the cache **/\nconst completedURIs = [];\n/** @const {Object} a hash of uri->{@link Asset} **/\nconst cache = {};\n/** @const {Object} a hash of handlers by mime type **/\n\nlet globalAssetPrefix = \"\";\nlet fetching = 0;\n\n/**\n * Safely attempt to move an item from one array to another.\n * @return {bool} true if an item was found or moved, otherwise false\n */\nfunction moveItem(item, oldList, newList) {\n\tlet i = oldList.indexOf(item);\n\tif(i !== -1) {\n\t\tnewList.push(oldList.splice(i, 1));\n\t\treturn true;\n\t}\n\telse return false;\n}\n\n/**\n * An object representing a loaded asset.\n * @property uri the uri originally requested for the object (not including global prefixes, domain names, etc)\n * @property {Object} content the processed response, which may be an Image, a string, an SVG, a decoded JSON object, or any other supported value type\n * @property {String} type\n */\nfunction Asset(uri, content, type) {\n\tthis.uri = uri;\n\tthis.content = content;\n\tthis.type = type;\n\treturn this;\n}\n\n/**\n * Fetches an asset from a remote source.\n * @param {String} uri\n */\nfunction fetchAsset(uri) {\n\tif(fetchingURIs.indexOf(uri) === -1 && completedURIs.indexOf(uri) === -1) {\n\t\tfetching++;\n\t\t// add to the fetching list, moving it from enqueuedURIs if needed\n\t\tif(!moveItem(uri, enqueuedURIs, fetchingURIs)) fetchingURIs.push(uri);\n\t\treturn fetch(globalAssetPrefix+uri).then(makeProcessFetchResponse(uri))\t\n\t}\n\telse if(fetchingURIs.indexOf(uri) >= 0) {\n\t\treturn new Promise((resolve) => {\n\t\t\t// @todo event based implementation of this ridiculous shit right here\n\t\t\tlet count = 0;\n\t\t\tlet interval = setInterval(() => {\n\t\t\t\tif(cache[uri] !== undefined) {\n\t\t\t\t\tresolve(cache[uri]);\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t\t\telse count++;\n\t\t\t\tif(count > 100) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tthrow Error(\"stuck in fetching status way too long\");\n\t\t\t\t}\n\t\t\t}, 250);\n\t\t});\n\t}\n\telse if(completedURIs.indexOf(uri) >= 0) {\n\t\treturn Promise.resolve(cache[uri]);\n\t}\n}\n\n\n/**\n * Makes a processFetchResponse binding to ensure the original uri stays in scope.\n */\nfunction makeProcessFetchResponse(uri) {\n\treturn processFetchResponse.bind(null, uri);\n}\n\n/**\n * Processes a response from a fetch request.\n */\nfunction processFetchResponse(uri, response) {\n\treturn new Promise((resolve, reject) => {\n\t\tif(response.ok) {\n\t\t\tlet type = response.headers.get(\"Content-type\");\n\t\t\treturn mimeTypes.getHandler(type)(response)\n\t\t\t\t.then((content) => storeAsset(uri, content, type, resolve));\n\t\t}\n\t\telse reject(\"failed to fetch asset \"+uri);\n\t});\n}\n\n/**\n * Stores an asset in the cache.\n * @param {String} uri the originally requested URI\n * @param {mixed} content the processed response content\n * @param {String} type the mime type of the response\n * @param {function} resolve promise callback for the original fetch request\n */\nfunction storeAsset(uri, content, type, resolve) {\n\tlet item = new Asset(uri, content, type); \n\tcache[uri] = item;\n\tfetching--;\n\tmoveItem(uri, fetchingURIs, completedURIs);\n\tresolve(item);\n}\n\n/**\n * Gets an asset from the cache if available, or else fetches it from a remote source.\n * Returns a promise which resolves with the {@link Asset} requested.\n * @param {String} uri \n * @return Promise\n */\nexport function requestAsset(uri) {\n\tlet item = cache[uri];\n\tif(item === undefined) return fetchAsset(uri);\n\telse return Promise.resolve(item);\n}\n\nexport function requestAssetList(list) {\n\treturn Promise.all(list.map((item) => requestAsset(item)));\n}\n\n/**\n * Enqueues an asset to be fetched. Enqueued assets are fetched later when processQueue is called.\n */\nexport function enqueueAsset(uri) {\n\tif(enqueuedURIs.indexOf(uri) === -1 && fetchingURIs.indexOf(uri) === -1 && cache[uri] === undefined) enqueuedURIs.push(uri);\n}\n\n/**\n * Enqueues a list of assets to be fetched layer during a processQueue() call.\n * @param {Array} list array of URIs to load\n * @returns {Promise|undefined}\n */\nexport function enqueueAssetList(list) {\n\tlist.forEach(item => enqueueAsset(item)); \n}\n\n/**\n * Process any deferred items in the queue.\n * @return {Promise} a promise that resolves when all the items are fetched with an array of all the fetched items\n */\nexport function processQueue() {\n\treturn Promise.all(enqueuedURIs.map((uri) => fetchAsset(uri)));\n}\n\n/**\n * Sets the globalAssetPrefix, which is prepended to all fetch URIs.\n * @param {string} prefix a string representing a path or filename prefix\n */\nexport function setGlobalAssetPrefix(prefix) {\n\tglobalAssetPrefix = prefix;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.assets.js\n// module id = 8\n// module chunks = 0","/**\nThe vectors module contains functions and objects related to 2d, 3d, and 4d vectors.\n\nVectors are composed from columnar matrices, so they support all the methods that\n[[vectrix.matrices|matrices]] do.\n\nRequire the vector module:\n```javascript\nconst vectors = require(\"vectrix.vectors.js\");\nconst vec2 = vectors.create.vec2;\nconst vec3 = vectors.create.vec3;\nconst vec4 = vectors.create.vec4;\n```\n\n\nYou can construct them with vec2, vec3, and vec4, passing zero, one or N arguments\nwhere N is the vector size. Do whatever is convenient.\n```javascript\nlet first = vec2(); // passing no arguments will give you a vector filled with zeroes\nfirst.toArray(); // [0,0]\nlet second = vec2([3,7]); // you can pass an array-like object\nsecond.toArray(); // [3,7] \nlet third = vec2(17,4); // or just pass the components as arguments\nthird.toArray(); // [14,4] \nlet fourth = vec3(1,2,3); // and so on with 3d and 4d vectors\nfourth.toArray(); // [1,2,3]\n```\n\nVector functions will operate on any array-like object, returning a plain Float32Array when the result is another vector. Creating vector objects is somewhat expensive, so when you're doing a lot of operations and performance really counts, use the functions for calculations and then use the vector factories on your final result.\n```javascript\nconst lerp = vectors.lerp;\nlet res = lerp([0.1, 0.3], [0.3, 0.7], .5); // Float32Array(0.2, 0.5)\ncreate.vec2(res); // vec2(0.2,0.5);\n```\n\nVectors are composed from columnar matrices, so they can do the things that matrices\ndo. \n```javascript\nsecond.add(second).toArray(); // [6,14]\nthird.sub(second).toArray(); // [11,-3]\n\nconst matrices = require(\"vectrix.matrices.js\");\nlet identity = matrices.create(2,2,[1,0, 0,1]);\nidentity.dot(second).toArray(); // [3,7]\nlet scale2x = matrixes.create(2,2,[2,0, 0,2]);\nscale2x.dot(third).toArray(); // [34,8]\n```\n\nVector dot products are a special case. As in vector math, multplying two vectors\nproduces a scalar:\n```javascript\nlet first = vec2(2,2);\nlet second = vec2([2,2]);\nfirst.dot(second); // 8\nlet third = vec2(1,0);\nlet fourth = vec2(0,1);\nthird.dot(fourth); // 0\n```\n\nThey also have some of their own useful properties.\n\nYou can find the cross product of two 3d vectors using `vec.cross()`:\n```javascript\nlet first = vec3(1,2,1);\nlet second = vec3(2,-2,2);\nfirst.cross(second).toArray(); // [6,0,-6]\n```\nCross can be called on 2d vectors, with z implicitly being zero:\n```javascript\nlet first = vec2(2,4);\nlet second = vec2(1,3);\nfirst.cross(second).toArray(); // [0,0,2]\n```\n\nIf you cross a vec2 with a vec3 for whatever reason, vec2.z is implicitly zero:\n```javascript\nlet first = vec3(1,2,1);\nlet second = vec2(1,3);\nfirst.cross(second).toArray(); // [-3,1,1]\n```\n\nMost vector operations are duck typed and make few assumptions internally, so you \ncan just pass in anything array-like of the correct length if you want:\n```javascript\nlet first = vec3(1,2,1);\nfirst.cross([2,-2,2]).toArray(); // [6,0,-6]\n```\nJust beware weird behavior might result if it looks like a duck and quacks like a duck\nbut it's actually a trick-or-treating platypus.\n\nYou can produce a homogenous coordinate for matrix multiplication using `vec.homogenous()`:\n```javascript\nfirst.homogenous().toArray(); // [0,0,1]\n```\n\nWhich lets you do a few useful matrix-vector ops more easily:\n```javascript\nconst matrices = require(\"vectrix.matrices.js\");\nconst vectors = require(\"vectrix.vectors.js\");\nlet myVec = vectors.vec2([22,9]); \nlet translate = matrices.create(3,3,[1,0,5, 0,1,6, 0,0,1]);\ntranslate.dot(myVec.homogenous()).toArray(); // [27,15,1]\n```\nMaking this more intuitive is on the roadmap.\n\nLast but not least, they have a whole bunch of virtual properties that you might\nbe used to in GLSL. Once I used them I couldn't live without.\n```javascript\nlet position = vectors.vec3([0,-0.5,0.5]);\nposition.x; // 0\nposition.y; // -0.5\nposition.z; // 0.5\nposition.xy; // vec2(0,-0.5)\nposition.zx; // vec2(0.5,0)\nposition.yzx; // vec3(-0.5,0.5,0)\nlet color = vectors.vec4(255,128,64,0.1)\ncolor.rgb; // vec3(255,128,64)\ncolor.bgr; // vec3(64,128,255)\n```\n...and so on - all aliases and combinations thereof for the xyzw and rgba sets\nare available. vec2s only support x/y because r/g is not useful.\n@module vectrix/vectors\n*/\n\"use strict\";\nimport * as matrices from \"./vectrix.matrices\";\nexport const {plus, minus, mut_plus, mut_minus} = matrices;\nlet flatten = matrices.flatten;\nlet {sqrt, min, max, acos} = Math;\n\n/*\n * All of the below is a dumb, slow workaround for the fact\n * that TypedArrays can't be used as prototypes. What we're \n * doing here is creating property aliases so that we can use \n * vectors somewhat like GLSL, for example: \n *\n * vec3([0,3,4]).zyx == vec3([4,3,0]); \n * \n * We do this programmatically because doing it be hand would \n * be even more tedious than this was. \n * \n * We precompute all the permutations of all the aliases and\n * their definitions, then throw them in the aliasesXd objects.\n * The individual vector factories then apply them during creation.\n * \n * Hopefully this isn't too slow because I spend a heck of a lot\n * of time making this happen.\n */\n\nexport const aliasCombos2d = [];\nexport const aliasCombos3d = [];\nexport const aliasCombos4d = [];\n\nexport const aliases2d = [\n\t{names:[\"x\"], i:0},\n\t{names:[\"y\"],i:1}\n];\n\nexport const aliases3d = [\n\t{names:[\"x\",\"r\"],i:0},\n\t{names:[\"y\",\"g\"],i:1},\n\t{names:[\"z\",\"b\"],i:2}\n];\n\nexport const aliases4d = [\n\t{names:[\"w\", \"a\"],i:3}\n].concat(aliases3d);\n\npermutations(\"xy\".split(\"\")).forEach((combo) => {\n\taliasCombos2d.push(combo);\n});\n\n[\"xz\",\"yz\",\"xyz\",\"rgb\"].forEach((props) => {\n\tpermutations(props.split(\"\")).forEach((combo) => {\n\t\taliasCombos3d.push(combo);\n\t});\n});\n\n[\"yxw\",\"zxw\",\"yzw\",\"xyzw\",\"rga\",\"rba\",\"gba\",\"rgba\"].forEach((props) => {\n\tpermutations(props.split(\"\")).forEach((combo) => {\n\t\taliasCombos4d.push(combo);\n\t});\n});\n\n/**\n * Util function to help generate permutations of property alias\n * sets\n * @private\n */\nfunction permutations(list) {\n\t// Empty list has one permutation\n\tif (list.length === 0) return [[]];\n\tvar result = [];\n\n\tfor (var i=0; i<list.length; i++) {\n\t\tvar copy = list.slice();\n\t\tvar head = copy.splice(i, 1);\n\t\tvar rest = permutations(copy);\n\t\tfor (var j=0; j<rest.length; j++) {\n\t\t\tvar next = head.concat(rest[j]);\n\t\t\tresult.push(next);\n\t\t}\n\t}\n\treturn result;\n}\t\n\n/**\n * @private\n */\nfunction getAlias(i) {\n\t/* jshint validthis:true */\n\treturn this[i];\n}\n\n/**\n * Generic function wrapper for vector combo aliases (e.g. vector.xy)\n * @private\n */\nfunction getAliasCombo(factory, combo) {\n\tlet vals = combo.map((p) => this[p]);\n\treturn factory(vals);\n}\n\n/**\n * Defines vector aliases for a vector based on its length.\n * @private\n */\nfunction defineAliases(vec) {\n\tlet factory;\n\tlet map;\n\tlet combos;\n\tif(vec.length === 2) {\n\t\tmap = aliases2d;\n\t\tcombos = aliasCombos2d;\n\t}\n\telse if(vec.length === 3) {\n\t\tmap = aliases3d;\n\t\tcombos = aliasCombos2d.concat(aliasCombos3d);\n\t}\n\telse { // it's 4 because nothing else is supported or requested\n\t\tmap = aliases4d;\n\t\tcombos = aliasCombos2d.concat(aliasCombos3d, aliasCombos4d);\n\t}\n\tfor(let i = 0, len = map.length; i < len; ++i) {\n\t\tlet get = getAlias.bind(vec, map[i].i);\n\t\tfor(let n = 0, len = map[i].names.length; n < len; ++n) {\n\t\t\tObject.defineProperty(vec, map[i].names[n], {\n\t\t\t\tget:get\n\t\t\t});\n\t\t}\n\t}\n\tfor(let i = 0, len = combos.length; i < len; ++i) {\n\t\tswitch(combos[i].length) {\n\t\t\tcase 2:factory = create.vec2; break;\n\t\t\tcase 3:factory = create.vec3; break;\n\t\t\tcase 4:factory = create.vec4; break;\n\t\t}\n\t\tObject.defineProperty(vec, combos[i].join(\"\"), {\n\t\t\tget:getAliasCombo.bind(vec, factory, combos[i])\n\t\t});\n\t}\n}\n\n/**\n * Turns a vector function into a method by wrapping its result in a create()\n * statement.\n * @param {function} method\n * @param {vector} vector\n * @private\n */\nfunction asMethod(method, vector) {\n\treturn function() {\n\t\tlet res = method.apply(null, [vector].concat(Array.prototype.slice.apply(arguments)));\n\t\tif(!(res instanceof Float32Array)) return res;\n\t\tswitch(res.length) {\n\t\t\tcase 2: return wrap(create.vec2(res));\n\t\t\tcase 3: return wrap(create.vec3(res));\n\t\t\tcase 4: return wrap(create.vec4(res));\n\t\t\tdefault: return wrap(create(res.length, res));\n\t\t}\n\t}\n}\n\n/*\n * End ugly code for generating aliases.\n */\n\n\n/**\n * @private\n * used in [lerp](#lerp)\n */\nfunction lerp_element(a, b, t) {\n\treturn a+t*(b-a);\n}\n\n/**\n * @private\n * used in [cubic](#cubic)\n */\nfunction cubic_step(a, b, c, d, f0, f1, f2, f3) {\n\treturn a*f0 + b*f1 + c*f2 + d*f3;\n}\n\n/**\n * Copies values from second operand into first.\n * @example\n * let v = vec3(1,2,3);\n * let v2 = vec2(31,6);\n * copy(v, v2); // vec3(31,6,3);\n *\n * @mutates\n * @function mut_copy\n * @param {vector} a vector to copy into\n * @param {vector} b vector to copy from\n * @return {vector} a, with copied values\n */\nexport const mut_copy = (() => {\n\tlet i = 0|0, alen = 0|0, blen = 0|0;\n\treturn function mut_copy(a, b) {\n\t\tfor(i = 0, alen = a.length, blen = b.length;\n\t\t\ti < alen && i < blen; ++i) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t\treturn a;\n\t}\n})();\n\n\n/**\n * Homogenous coordinates for a vector. \n *\n * @function homogenous\n * @param {vector} a input vector\n * @param {vector} out (optional) out parameter of one higher dimension than a\n * @return {matrix}\n */\nexport const homogenous = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function homogenous(a, out = undefined) {\n\t\tlen = a.length;\n\t\tout = out||create(a.length+1);\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tout[i] = a[i];\n\t\t}\n\t\tout[i] = 1.0;\n\t\treturn out;\n\t}\n})();\n\n/**\n * Calculate the magnitude of a vector.\n * @example\n * magnitude(vec3(2,3,6)); // ~6.16\n *\n * @function magnitude\n * @param {vector} a operand\n * @return {float} magnitude of a\n */\nexport const magnitude = (function() {\n\tlet scratch = 0.0, cur = 0.0, i = 0|0, len = 0|0;\n\treturn function magnitude(a) {\n\t\tscratch = 0.0;\n\t\tfor(i = 0, len = a.length; i < len; ++i) {\n\t\t\tcur = a[i];\n\t\t\tscratch = scratch + cur * cur;\t\n\t\t}\n\t\treturn sqrt(scratch);\n\t}\n})();\n\n/**\n * Normalize a vector.\n *\n * @example\n * normalize(vector); // function style\n * vector.normalize(); // method style\n *\n * @function normalize\n * @param {vector} a vector to normalize\n * @param {vector} out (optional) a vector of the same dimensions as a\n * @return {vector}\n */\nexport const normalize = (function() {\n\tlet scale = 0.0, i = 0|0, len = 0|0;\n\treturn function normalize(a, out = undefined) {\n\t\tlen = a.length;\n\t\tout = out||create(len);\n\t\tscale = 1/magnitude(a);\n\t\t/*\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tcur = a[i]; // cut out one reference\n\t\t\tsum = sum+cur*cur;\n\t\t}\n\t\t*/\n\t\tfor(i = 0; i < len; ++i) {\n\t\t\tout[i] = a[i]*scale;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [normalize](#normalize).\n * @function mut_normalize\n * @param {vector} a input vector\n * @return {matrix}\n */\nexport function mut_normalize(a) {\n\treturn normalize(a, a);\n}\n\n/**\n * Perform a linear interpolation between two vectors.\n * @function lerp\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @param {float} t interval\n * @param {vector} out (optional) vector of same dimensions as a & b\n * @return {vector}\n */\nexport const lerp = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function lerp(a, b, t, out) {\n\t\tlen = a.length;\n\t\tout = out||create(len);\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tout[i] = lerp_element(a[i], b[i], t);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [lerp](#lerp).\n * @function lerp\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @param {float} t interval\n * @param {vector} out (optional) vector of same dimensions as a & b\n * @return {vector}\n */\nexport function mut_lerp(a, b, t) {\n\treturn lerp(a, b, t, a);\n}\n\n/**\n * Perform a cubic bezier interpolation.\n * @function cubic\n * @param {vector} a start point\n * @param {vector} b first control point\n * @param {vector} c second control point\n * @param {vector} d end point\n * @param {float} t interval\n * @param {vector} out (optional) vector of same dimensions as start point \n * @return {vector}\n */\nexport const cubic = (function() {\n\tlet i = 0|0, len = 0|0, inv = 0.0, inv2 = 0.0, \n\t\t\tfs = 0.0, f0 = 0.0, f1 = 0.0, f2 = 0.0, f3 = 0.0;\n\treturn function cubic(a, b, c, d, t, out = undefined) {\n\t\tlen = a.length;\n\t\tout = out||create(len);\n\t\t/* parametric cubic bezier, faster than dec */\n\t\tinv = 1-t;\n\t\tinv2 = inv*inv;\n\t\tfs = t*t;\n\t\tf0 = inv2 * inv;\n\t\tf1 = 3 * t * inv2;\n\t\tf2 = 3 * fs * inv;\n\t\tf3 = fs * t;\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tout[i] = cubic_step(a[i], b[i], c[i], d[i], f0, f1, f2, f3);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [cubic](#cubic).\n * @function mut_cubic\n * @param {vector} a start point\n * @param {vector} b first control point\n * @param {vector} c second control point\n * @param {vector} d end point\n * @param {float} t interval\n * @return {vector} interpolated a\n */\nexport function mut_cubic(a, b, c, d, t) {\n\treturn cubic(a, b, c, d, t, a);\n}\n\n\nexport const dot = (function() {\n\tlet i = 0|0, sum = 0.0;\n\treturn function dot(a, b) {\n\t\tsum = 0.0;\n\t\ti = a.length;\n\t\twhile(i--) {\n\t\t\tsum = sum + a[i] * b[i];\n\t\t}\n\t\treturn sum;\n\t}\n})();\n\n/**\n * Vector product for matching vector types. Accepts vectors or generic arrays, \n * or defaults up to the matrix product if the vectors don't match (which supports\n * vector*matrix and scalar products).\n * @function times\n * @param {vector} a first operand\n * @param {vector|float} b second operand\n * @param {vector} out out vector \n * @return {matrix|float} product of a and b \n */\nexport var times = (function() {\n\tlet i = 0|0;//, len = 0|0;\n\treturn function(a, b, out) {\n\t\ti = a.length-1;\n\t\tif(typeof b === \"number\") {\n\t\t\tout = out||new Float32Array(i+1);\n\t\t\tfor(;i >= 0; --i) {\n\t\t\t\tout[i] = a[i] * b;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\telse return dot(a, b);\n\t}\n})();\n\n/**\n * Mutating version of [times](#times). Note that a is mutated only when a is a vector\n * and b is a scalar.\n *\n * @function times\n * @param {vector} a first operand\n * @param {vector|float} b second operand\n * @return {matrix|float} mutated a, product of a and b \n */\nexport function mut_times(a, b) {\n\treturn times(a, b, a);\n}\n\n\n/**\n * Find the angle between two vectors in radians.\n * @function angle\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @return {vector}\n */\nexport const angle = (function() {\n\tlet anorm, bnorm;\n\treturn function angle(a, b) {\n\t\tanorm = normalize(a);\n\t\tbnorm = normalize(b);\n\t\treturn acos(times(anorm, bnorm));\n\t}\n})();\n\n\n/**\n * Find the distance between two vectors.\n * @function distance\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @return {float} distance\n */\nexport const distance = (function() {\n\tlet i = 0|0, len = 0|0, sum = 0.0, tmp = 0.0;\n\treturn function distance(a, b) {\n\t\tsum = 0.0;\n\t\tlen = a.length;\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\ttmp = b[i] - a[i];\n\t\t\tsum = sum + tmp*tmp;\n\t\t}\n\t\treturn sqrt(sum);\n\t}\n})();\n\n\n/**\n * Vector cross products are technically only defined for 3D, but 2D can be\n * crossed with implicit z=0\n * @function cross\n * @param {vector} a first operand\n * @param {vector|float} b second operand\n * @param {vec3} out parameter\n * @return {Float32Array(3)} cross product\n */\nexport const cross = (function() {\n\tlet a0 = 0.0; let a1 = 0.0; let a2 = 0.0;\n\tlet b0 = 0.0; let b1 = 0.0; let b2 = 0.0;\n\treturn function cross(a, b, out) {\n\t\tif(a.length > 3 || b.length > 3 || a.length < 2 || b.length < 2) return undefined;\n\t\tout = out||create(3);\n\t\ta0 = a[0]; a1 = a[1]; a2 = a[2]||0.0;\n\t\tb0 = b[0]; b1 = b[1]; b2 = b[2]||0.0;\n\t\tout[0] = a1*b2 - a2*b1;\n\t\tout[1] = a2*b0 - a0*b2;\n\t\tout[2] = a0*b1 - a1*b0;\n\t\t/*\n\t\tmut_copy(scratcha, a);\n\t\tmut_copy(scratchb, b);\n\t\tif(a.length === 2) scratcha[2] = 0;\n\t\tif(b.length === 2) scratchb[2] = 0;\n\t\tout[0] = scratcha[1]*scratchb[2] - scratcha[2]*scratchb[1];\n\t\tout[1] = scratcha[2]*scratchb[0] - scratcha[0]*scratchb[2];\n\t\tout[2] = scratcha[0]*scratchb[1] - scratcha[1]*scratchb[0];\n\t\t*/\n\t\treturn out;\n\t}\n})();\n\n/**\n * Restricts scalar or vector values to a range.\n * @example\n * let v = vectors.create.vec3([-5,100, -22]); // vec3(-5,100, -22)\n * clamp(v, -10, 10); // vec3(-5, 10, -10);\n * let s = 23.0;\n * clamp(s, 0, 5); // 5\n *\n * @function clamp\n * @param {vector} a vector or scalar to clamp\n * @param {float} minv minimum value\n * @param {float} maxv maximum value\n * @param {vector} out output vector\n * @return {vector} clamped vector\n */\nexport var clamp = (() => {\n\tlet i = 0|0, len = 0|0;\n\tfunction clamp_s(a, minv, maxv) {\n\t\treturn max(min(a, maxv), minv)\n\t}\n\treturn function(a, minv, maxv, out) {\n\t\tif(typeof(a) === \"number\") return clamp_s(a, minv, maxv);\n\t\tout = out||new Float32Array(a.length);\n\t\tfor(i = 0, len = a.length; i < len; ++i) {\n\t\t\tout[i] = clamp(a[i], minv, maxv);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [clamp](#clamp).\n * @return {vector} the mutated vector\n */\nexport function mut_clamp(a, min, max) {\n\treturn clamp(a, min, max, a);\n}\n\n/**\n * Get a string representation of a vector.\n * @example\n * vectors.create.vec2([23,1]).toString(); // vec2(23.00, 1.00)\n * vectors.toString(vectors.create.vec2([23,1])); // vec2(23.00, 1.00)\n * @param {vector} a input vector\n * @return {string}\n */\nexport function toString(a) {\n\tlet strings = a.toArray().map((cur) => cur.toFixed(2));\n\treturn \"vec\"+a.length+\"(\"+strings.join(\", \")+\")\";\n}\n\n/**  \n * Creates a new vector. Note that vectors created directly with this function\n * will not have convenience aliases, meaning they're initialized faster but...\n * ah, less convenient. Can be supplied with an optional arraybuffer view and optional\n * offset to that view as the last or last two parameters.\n * @example\n * create(2); // vector[0,0]\n * create(2, 3.3, 3.2); // vector[3.3,3.2]\n * create(2, [3.3, 3.2]); // vector[3.3,3.2] from an array\n * create(2, 3.3, 3.2, new ArrayBuffer(2*4)); // vector[3.3,3.2] as view of ArrayBuffer\n * create(2, 3.3, 3.2, new ArrayBuffer(3*4), 4); // vector[3.3,3.2] as view of ArrayBuffer, offset by 4 bytes\n * create(2, [3.3, 3.2], new ArrayBuffer(3*4), 4); // vector[3.3,3.2] as view of ArrayBuffer, offset by 4 bytes, from an array\n *\n * @function create\n * @param {int} len [2...4] vector length\n * @param {mixed} args values in any combination of array-like and scalar values\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {vector}\n */\nexport function create() {\n\tvar len = arguments.length, vec;\n\tif(len === 0) throw new Error(\"vectors.create requires at least one argument\");\n\telse if(len === 1) {\n\t\tvec = new Float32Array(arguments[0]);\n\t}\n\telse {\n\t\tlet params = Array.prototype.slice.apply(arguments), buffer, offset = 0, size = params.shift(), len = params.length;\n\t\tif((len > 0) && params[len-1] instanceof ArrayBuffer) { // supplied buffer, no offset\n\t\t\toffset = 0;\n\t\t\tbuffer = params.pop();\n\t\t}\n\t\telse if((len > 1) && params[len-2] instanceof ArrayBuffer) { // supplied buffer + offset\n\t\t\toffset = params.pop();\n\t\t\tbuffer = params.pop();\n\t\t}\n\t\tif(buffer !== undefined) {\n\t\t\tvec = new Float32Array(buffer, offset, size);\n\t\t}\n\t\telse vec = new Float32Array(size);\n\t\tif(params.length > 0) vec.set(flatten(params));\n\t}\n\treturn vec;\n}\n\n/**\n * Wraps a vector or array-like object with vector functions as methods.\n * @param {array-like} vec the vector to wrap\n * @return {vector} the wrapped vector\n */\nexport function wrap(vec) {\n\t// define vector-specific methods\n\tmatrices.wrap(vec, vec.length, 1);\n\tvec.toString = asMethod(toString, vec);\n\tvec.homogenous = asMethod(homogenous, vec);\n\tvec.times = asMethod(times, vec);\n\tvec.lerp = asMethod(lerp, vec);\n\tvec.cubic = asMethod(cubic, vec);\n\tvec.dot = asMethod(dot, vec);\n\tvec.clamp = asMethod(clamp, vec);\n\tvec.angle = angle.bind(null, vec);\n\tvec.magnitude = magnitude.bind(null, vec);\n\tvec.distance = distance.bind(null, vec);\n\tvec.normalize = asMethod(normalize, vec);\n\tvec.mut_normalize = asMethod(mut_normalize, vec);\n\tvec.mut_times = asMethod(mut_times, vec);\n\tvec.mut_lerp = asMethod(mut_lerp, vec);\n\tvec.mut_cubic = asMethod(mut_cubic, vec);\n\tvec.mut_clamp = asMethod(mut_clamp, vec);\n\tvec.mut_copy = asMethod(mut_copy, vec);\n\tif(vec.length === 2 || vec.length === 3) vec.cross = asMethod(cross, vec);\n\tdefineAliases(vec);\n\treturn vec;\n}\n\n/**\n * Creates a 2d vector. Curried version of [create](#create) with first argument presupplied.\n * @function create.vec2\n * @return {vector}\n */\nexport const vec2 = create.vec2 = create.bind(null, 2);\n/** \n * Creates a 3d vector. Curried version of [create](#create) with first argument presupplied.\n * @function create.vec3\n * @return {vector}\n */\nexport const vec3 = create.vec3 = create.bind(null, 3);\n/** \n * Creates a 4d vector. Curried version of [create](#create) with first argument presupplied.\n * @function create.vec4\n * @return {vector}\n */\nexport const vec4 = create.vec4 = create.bind(null, 4);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.vectors.js\n// module id = 9\n// module chunks = 0","/**\nRequire the module:\n```javascript\nconst matrices = require(\"vectrix.matrices.js\");\n```\n\nCreate a 2x2 matrix using `create(rows, columns, values)`:\n```javascript\nlet mat = matrices.create(2,2,[0,1, 2,3]);\n```\n\nAdd two matrices using `a.plus(b)`:\n```javascript\nlet first =  matrices.create(2,2,[1,2, 3,4]);\nlet second = matrices.create(2,2,[3,4, 5,6]);\nlet sum = first.plus(second);\n```\n\nSubtract two matrices with `a.minus(b)`:\n```javascript\nlet diff = second.minus(first);\n```\n\nGet the dot product of two matrices via `a.dot(b)`:\n```javascript\nlet prod = first.dot(second);\n```\n\nDot can also multiply a matrix by a scalar:\n```javascript\nlet scalarProd = first.dot(3);\n```\n\nAll matrix and vector methods produce a new object from their operands, creating and\nreturning a new object as a result.\n```javascript\nsum.toArray(); // [4,6,8,10]\ndiff.toArray(); // [2,2,2,2]\nproduct.toArray(); // [13,16,29,26]\nfirst.toArray(); // [1,2,3,4]\nsecond.toArray(); // [3,4,5,6]\nscalarProd; // [3,6,9,12]\n```\n\nThis means matrix operations are composable in an intuitive left-to-right fashion:\n```javascript\nfirst.sub(second).dot(diff).toArray(); // [8,8,8,8]\n```\n\nBut keep in mind that you must follow matrix operation rules! Operating on two\nincompatible matrices returns undefined:\n```javascript\nlet third = matrices.create(1,2,[0,1]);\nfirst.add(third); // undefined\n```\n\nIt turned out to be useful to get a single row or column from a matrix, so you can\ndo that too using `mat.row(N)` and `mat.col(N)`:\n```javascript\nfirst.row(0); // matrix(2,1,[1,2])\nfirst.col(1); // matrix(1,2,[2,4])\n```\n@module vectrix/matrices\n*/\n\n\"use strict\";\n// set the max size for certain matrix operations, used in creating scratch memory\n//const MBF = 20;\nconst {cos, sin} = Math;\nimport * as vectors from \"./vectrix.vectors\";\nconst vec = vectors.create;\n\n/**\n * Flattens an array. Used for flattening arguments passed to factories. \n * @function flatten\n * @param {mixed} a an array, array-like, or object that can be flattened\n * @return {mixed} flat version of input\n */\nexport function flatten(a) {\n\t// cheap array-like check, may not always be reliable\n\tif(a instanceof Object && typeof a.length == \"number\") {\n\t\tlet i = 0, len = a.length, out = [];\n\t\tfor(;i < len; ++i) {\n\t\t\tout = out.concat(flatten(a[i]));\n\t\t}\n\t\treturn out;\n\t}\n\telse return a;\n}\n\n/**\n * Tests whether two unknown objects are like matrices (same rows and columns) or\n * a compatible set of matrix and vector.\n * @param {Matrix|Vector} a \n * @param {Matrix|Vector} b \n * @return {bool}\n */\nexport function likeMatrices(a, b) {\n\treturn (\n\t\t// matrices\n\t\t(a.rows ===  b.rows) && (a.cols === b.cols) ||\n\t\t// vectors\n\t\t((a.rows === undefined && b.rows === undefined) &&\n\t\t\ta.length === b.length) ||\n\t\t// matrix / vector\n\t\t(b.cols === 1 && b.cols === undefined && a.rows === b.length) ||\n\t\t// vector / matrix\n\t\t(a.rows === 1 && b.rows === undefined && a.cols === b.length)\n\t);\n}\n\n/**\n * Add two matrices together.\n * @example\n * plus(matrix, anotherMatrix); // function\n * matrix.plus(anotherMatrix); // method\n * @function plus\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out out value (optional)\n * @return {matrix}\n */\nexport const plus = (function() {\n\tlet i = 0|0, l = 0|0, ar = 0|0, ac = 0|0;\n\treturn function plus(a, b, out) {\n\t\tif(!likeMatrices(a, b)) return undefined;\n\t\tl = a.length;//-1;\n\t\tar = a.rows;\n\t\tac = a.cols;\n\t\tout = out||create.similar(a);\n\t\tfor(i = 0|0; i < l; ++i) {\n\t\t\tout[i] = a[i] + b[i]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [plus](#plus).\n *\n * @function mut_plus\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out out value (optional)\n * @return {matrix}\n */\nexport function mut_plus(a, b) {\n\treturn plus(a, b, a);\n}\n\n/**\n * Add a scalar to a matrix.\n * plus_scalar(matrix, anotherMatrix); // function\n * matrix.plus_scalar(anotherMatrix); // method\n * @function plus\n * @param {matrix} a first matrix\n * @param {matrix} s scalar\n * @param {matrix} out (optional) out value\n * @return {matrix}\n */\nexport const plus_scalar = (function() {\n\tlet i = 0|0;\n\treturn function plus_scalar(a, s, out) {\n\t\tout = out||create(a.rows, a.cols);\n\t\ts = +s;\n\t\ti = a.length;//-1;\n\t\twhile(i--) {\n\t\t\tout[i] = a[i] + s;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [plus](#plus).\n * @function mut_plus\n * @param {matrix} a first matrix\n * @param {matrix} s second matrix\n * @return {matrix}\n */\nexport function mut_plus_scalar(a, s) {\n\treturn plus_scalar(a, s, a);\n}\n\n/**\n * Subtract matrices.\n * @example\n * minus(matrix, anotherMatrix); // function\n * matrix.minus(anotherMatrix); // method\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @return {matrix}\n */\nexport const minus = (function() {\n\tlet i = 0|0, ac = 0|0, ar = 0|0;\n\treturn function minus(a, b, out) {\n\t\tif(!likeMatrices(a, b)) return undefined;\n\t\ti = a.length;//-1;\n\t\tar = a.rows || 0;\n\t\tac = a.cols || i;\n\t\tout = out||create.similar(a);\n\t\twhile(i--) {\n\t\t\tout[i] = a[i] - b[i]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [minus](#minus).\n *\n * @function mut_minus\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out out value (optional)\n * @return {matrix}\n */\nexport function mut_minus(a, b) {\n\treturn minus(a, b, a);\n}\n\n/**\n * subtract a scalar to a matrix.\n * minus_scalar(matrix, anotherMatrix); // function\n * matrix.minus_scalar(anotherMatrix); // method\n * @function minus\n * @param {matrix} a first matrix\n * @param {matrix} s scalar\n * @param {matrix} out (optional) out value\n * @return {matrix}\n */\nexport const minus_scalar = (function() {\n\tlet i = 0|0;\n\treturn function minus_scalar(a, s, out) {\n\t\tout = out||create(a.rows, a.cols);\n\t\ts = +s;\n\t\ti = a.length;//-1;\n\t\twhile(i--) {\n\t\t\tout[i] = a[i] - s;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [minus](#minus).\n * @function mut_minus\n * @param {matrix} a first matrix\n * @param {matrix} s second matrix\n * @return {matrix}\n */\nexport function mut_minus_scalar(a, s) {\n\treturn minus_scalar(a, s, a);\n}\n\n/**\n * Get a single column from a matrix.\n * @example\n * col(matrix, 2); // function\n * matrix.col(2); // method\n * @param {matrix} a source matrix\n * @param {n} column number (zero indexed)\n * @param {matrix} out (optional) out parameter, same rows, 1 column\n * @return {matrix} a single column from the source matrix\n */\nexport const col = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function col(a, n, out) {\n\t\tout = out||create(a.rows, 1);\n\t\tlet cols = a.cols;\n\t\tfor(i = 0, len = a.rows; i < len; ++i) {\n\t\t\tout[i] = a[i*cols+n]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Get a single row from a matrix.\n * @example\n * row(matrix, 2); // function\n * matrix.row(2); // method\n * @param {matrix} a source matrix\n * @param {n} row number (zero indexed)\n * @param {matrix} out (optional) out parameter with rows = a.cols, cols = 1 \n * @return {matrix} a single row from the source matrix\n */\nexport const row = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function row(a, n, out) {\n\t\tout = out||create(1, a.cols);\n\t\tlet cols = a.cols;\n\t\tfor(i = 0, len = a.cols; i < len; ++i) {\n\t\t\tout[i] = a[cols*n+i]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport const multiply_scalar = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function multiply_scalar(a, s, out) {\n\t\tout = out||create(a.rows, a.cols);\n\t\tfor(i = 0, len = a.length; i < len; ++i) {\n\t\t\tout[i] = a[i] * s;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport function mut_multiply_scalar(a, s) {\n\treturn multiply_scalar(a, s, a);\n}\n\n/**\n * Multiply matrices or vectors.\n * @example\n * dot(matrix, anotherMatrix); // function \n * matrix.dot(anotherMatrix); // method\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out (optional) out parameter \n * @return {matrix}\n */\nexport const dot = (function() {\n\tlet blen = 0|0, brow = 0|0, bcol = 0|0, bcols = 0|0, brows = 0|0, bpos = 0|0;\n\tlet acols = 0|0, arows = 0|0, arow = 0|0, aroff = 0|0, apos = 0|0;\n\tlet opos = 0|0;\n\treturn function dot(a, b, out) {\n\t\tacols = (a.cols !== undefined)?a.cols:a.length;\n\t\tbrows = (b.rows !== undefined)?b.rows:b.length;\n\t\tif(acols === brows) {\n\t\t\tarows = (a.rows !== undefined)?a.rows:1;\n\t\t\tbcols = (b.cols !== undefined)?b.cols:1;\n\t\t\tblen = b.length;\n\t\t\tout = out||create(arows, bcols);\n\t\t\t//out.fill(0.0);\n\t\t\topos = 0;\n\t\t\tfor(arow = 0; arow < arows; ++arow) { \n\t\t\t\taroff = arow * acols;\n\t\t\t\tfor(bpos = 0|0; bpos < blen; ++bpos) {\n\t\t\t\t\tbcol = bpos % bcols;\n\t\t\t\t\tbrow = (bpos / bcols)|0; // bitwise floor is safe here and faster\n\t\t\t\t\topos = (bcols * arow) + bcol;\n\t\t\t\t\tapos = (aroff + brow);\n\t\t\t\t\tout[opos] = out[opos] + b[bpos] * a[apos];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\telse return undefined;\n\t}\n})();\n\n\n/**\n * Get the basic array representation of a matrix.\n * @example\n * toArray(matrix); // function\n * matrix.toArray(); // method\n * @param {matrix} a\n * @return {array} values as flat array\n */\nexport function toArray(a) {\n\treturn Array.prototype.slice.apply(a);\n}\n\n/**\n * Get a nicely formatted string representation of a matrix.\n * @example\n * matToString(matrix); // function\n * matrix.toString(); // method\n * @param {matrix} a\n * @return {string}\n */\nexport const toString = (function() {\n\tlet label = \"matrix(\", string = \"\", c = 0|0, r = 0|0, i = 0|0, len = 0|0,\n\t\tstrings, colWidth, row;\n\tfunction padLeft(l,s) {\n\t\treturn ((\" \").repeat(l)+s).slice(-l);\n\t}\n\tfunction makeStrings(a) {\n\t\treturn toArray(a).map((cur) => cur.toFixed(2));\n\t}\n\treturn function toString(a) {\n\t\tc = a.cols|0;\n\t\tr = a.rows|0;\n\t\tstring = label;\n\t\tstrings = makeStrings(a);\n\t\tcolWidth = strings.reduce((a, b) => Math.max(a, b.length), 0);\n\t\tfor(i = 0; i < r; ++i) {\n\t\t\trow = strings.slice(i*c, 2*(i+1)*c);\n\t\t}\n\t\tfor(i = 0, len = strings.length; i < len; ++i) {\n\t\t\tstrings[i] = padLeft(colWidth, strings[i]);\n\t\t\tif(i > 0) {\n\t\t\t\tif(i % c === 0) string += \"\\n       \";\n\t\t\t\telse string += \", \";\n\t\t\t}\n\t\t\tstring += strings[i];\n\t\t}\n\t\treturn string + \")\";\n\t}\n})();\n\n/*\n * Matrix factories\n */\n\n/**\n * Factory for creating generic matrices.\n * @function create\n * @param {int} rows matrix rows\n * @param {int} cols matrix columns\n * @param {mixed} values (optional) matrix values as an array-like object\n * @param {ArrayBuffer} buffer (optional) pre-supplied ArrayBuffer\n * @param {int} offset (optional) offset for buffer\n * @return {matrix}\n */\nexport function create(rows, cols, values = [], buffer = undefined, offset = 0) {\n\tvar matrix;\n\tif(buffer) {\n\t\tmatrix = new Float32Array(buffer, offset, cols * rows);\n\t}\n\telse {\n\t\tmatrix = new Float32Array(cols * rows);\n\t}\n\tvar vals = flatten(values);\n\tmatrix.rows = rows;\n\tmatrix.cols = cols;\n\tif(vals.length) matrix.set(vals);\n\telse matrix.fill(0.0); // just in case it was a previously used buffer\n\treturn matrix;\n}\n\n/**\n * Creates a matrix or vector similar to the one given.\n */\ncreate.similar = function(a, ...args) {\n\tif(a.rows && a.cols) return create.apply(null, [a.rows, a.cols].concat(args));\n\telse return vec.apply(null, [a.length].concat(args));\n}\n\n/**\n * Wraps an matrix (created by [create](#create)) with matrix methods.\n * @param {array-like} matrix a matrix, Array, or Float32Array to wrap as a matrix\n * @param {int} rows (required for non-matrices) number of rows the matrix should have\n * @param {int} cols (required for non-matrices) number of columns the matrix should have\n * @return {matrix} a wrapped matrix\n */\nexport function wrap(matrix, rows, cols) {\n\tmatrix.rows = rows||matrix.rows;\n\tmatrix.cols = cols||matrix.cols;\n\tmatrix.toArray = toArray.bind(null, matrix);\n\tmatrix.toString = toString.bind(null, matrix);\n\tmatrix.col = col.bind(null, matrix);\n\tmatrix.row = row.bind(null, matrix);\n\tmatrix.plus = plus.bind(null, matrix);\n\tmatrix.plus_scalar = plus_scalar.bind(null, matrix);\n\tmatrix.minus = minus.bind(null, matrix);\n\tmatrix.minus_scalar = minus_scalar.bind(null, matrix);\n\tmatrix.dot = dot.bind(null, matrix);\n\tmatrix.multiply_scalar = multiply_scalar.bind(null, matrix);\n\tmatrix.mut_plus = mut_plus.bind(null, matrix);\n\tmatrix.mut_plus_scalar = mut_plus_scalar.bind(null, matrix);\n\tmatrix.mut_minus = mut_minus.bind(null, matrix);\n\tmatrix.mut_minus_scalar = mut_minus_scalar.bind(null, matrix);\n\treturn matrix;\n}\n\n/**\n * Creates an identity matrix of arbitrary dimensions.\n * @example\n * matrices.create.identity(4); // a 4x4 identity matrix\n * @param {int} n dimensions of the matrix\n * @param {ArrayBuffer} buffer (optional) pre-supplied ArrayBuffer\n * @param {int} offset (optional) offset for buffer\n * @return {matrix} identity matrix \n */\ncreate.identity = (function() {\n\tlet i = 0|0, len = 0|0, j = 0|0;\n\treturn function identity(n, buffer = undefined, offset = 0) {\n\t\tn = n|0;\n\t\tlet m = create(n, n, undefined, buffer, offset);\n\t\tfor(i = 0|0, len = n*n, j = n+1|0; i < len; i+=j) m[i] = 1.0;\n\t\treturn m;\n\t}\n})();\n\n/**\n * Creates a translation matrix for a homogenous coordinate in 2D or 3D space. \n * @example\n * let vec = vectors.create.vec3(3,4,5).toHomogenous();\n * matrices.create.identity(vec); // translates by 3x, 4y, 5z\n * @param {vector} v vector representing the distance to translate \n * @return {matrix} 3x3 or 4x4 matrix\n */\ncreate.translation = (function() {\n\tlet v2 = Float32Array.from([1.0,0.0,0.0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,1.0,0.0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,0.0,1.0]); \n\tlet v3 = Float32Array.from([1.0,0.0,0.0,0.0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  0.0,1.0,0.0,0.0, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,0.0,1.0,0.0, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,0.0,0.0,1.0]);\n\treturn function translation(v, buffer = undefined, offset = 0) {\n\t\tswitch(v.length) {\n\t\t\tcase 2: \n\t\t\t\tv2[2] = v[0];\n\t\t\t\tv2[5] = v[1];\n\t\t\t\treturn create(3, 3, v2, buffer, offset);\n\t\t\tcase 3: \n\t\t\t\tv3[3]  = v[0];\n\t\t\t\tv3[7]  = v[1];\n\t\t\t\tv3[11] = v[2];\n\t\t\t\treturn create(4, 4, v3, buffer, offset);\n\t\t\tdefault: return undefined;\n\t\t}\n\t}\n})();\n\n/**\n * Creates a rotation matrix around absolute X axis of angle r.\n * @example\n * matrices.create.rotateX(1.5708); // 90 degree rotation around X axis\n * @param {radian} r angle as a radian\n * @return {matrix} 3x3 matrix\n */\ncreate.rotateX = (function() {\n\tlet cosr = 0.0, sinr = 0.0, scratch = Float32Array.from([\n\t\t1.0,0.0,0.0,\n\t\t0.0,1.0,0.0,\n\t\t0.0,0.0,1.0\n\t]);\n\treturn function rotateX(r, buffer = undefined, offset = 0) {\n\t\tcosr = cos(r);\n\t\tsinr = sin(r);\n\t\tscratch[4] = cosr;\n\t\tscratch[5] = -sinr;\n\t\tscratch[7] = sinr;\n\t\tscratch[8] = cosr;\n\t\treturn create(3, 3, scratch, buffer, offset);\n\t}\n})();\n\n/**\n * Creates a rotation matrix around absolute Y axis of angle r.\n * @example\n * matrices.create.rotateY(1.5708); // 90 degree rotation around Y axis\n * @param {radian} r angle as a radian\n * @return {matrix} 3x3 matrix\n */\ncreate.rotateY = (function() {\n\tlet cosr = 0.0, sinr = 0.0, scratch = Float32Array.from([\n\t\t1.0,0.0,0.0,\n\t\t0.0,1.0,0.0,\n\t\t0.0,0.0,1.0\n\t]);\n\treturn function rotateY(r, buffer = undefined, offset = 0) {\n\t\tcosr = cos(r);\n\t\tsinr = sin(r);\n\t\tscratch[0] = cosr;\n\t\tscratch[2] = sinr;\n\t\tscratch[6] = -sinr;\n\t\tscratch[8] = cosr;\n\t\treturn create(3, 3, scratch, buffer, offset);\n\t}\n})();\n\n/**\n * Creates a rotation matrix around absolute Z axis of angle r.\n * @example\n * matrices.create.rotateZ(1.5708); // 90 degree rotation around Z axis\n * @param {radian} r angle as a radian\n * @return {matrix} 3x3 matrix\n */\ncreate.rotateZ = (function() {\n\tlet cosr = 0.0, sinr = 0.0, scratch = Float32Array.from([\n\t\t1.0,0.0,0.0,\n\t\t0.0,1.0,0.0,\n\t\t0.0,0.0,1.0\n\t]);\n\treturn function rotateZ(r, buffer = undefined, offset = 0) {\n\t\tcosr = cos(r);\n\t\tsinr = sin(r);\n\t\tscratch[0] = cosr;\n\t\tscratch[1] = -sinr;\n\t\tscratch[3] = sinr;\n\t\tscratch[4] = cosr;\n\t\treturn create(3, 3, scratch, buffer, offset);\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.matrices.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {gravitate, drag, outOfBounds, limitVecMut, avoid} from  \"../photonomix.util\";\nimport {Mote, Emitter, AntiGravitonCluster} from \"./\";\nimport * as Photons from \"./photons\";\nconst {vec2, times, mut_times, distance} = vectrix.vectors;\nconst {mut_plus} = vectrix.matrices;\nimport {VOID_SIZE, GLOBAL_DRAG} from \"../photonomix.constants\";\nconst {random, sqrt, PI, ceil, min} = Math;\nconst POS_C = vec2(0,0);\n\nexport default function Void(ipos = vec2(), ivel = vec2(), mass = 1) {\n\tthis.pos = vec2(ipos);\n\tthis.vel = vec2(ivel);\n\tthis.size = 0;\n\tthis.birthMass = mass;\n\tthis.mass = 1;\n\tthis.lastMeal = -1;\n\tthis.eatTime = 0;\n\treturn this;\n}\n\nlet scratchVec1 = vec2(), entity, i = 0|0, len = 0|0, a_dist = 0.0, consume = 0|0;\nVoid.prototype.tick = function(entities, delta) {\n\tif(this.birthMass > 0) {\n\t\tconsume = min(this.birthMass, ceil(this.mass/100));\n\t\tthis.birthMass -= consume;\n\t\tthis.mass += consume;\n\t}\n\tif(this.eatTime > 30) this.eatTime--;\n\telse this.lastMeal = -1;\n\tif(outOfBounds(this.pos, 1.3)) {\n\t\tthis.mass = this.mass - 1;\n\t}\n\tthis.size = sqrt(this.mass/PI) * VOID_SIZE;\n\t// last turn's move, has to happen first\n\tmut_plus(this.pos, times(this.vel, delta, scratchVec1));\n\n\t// apply basic forces\n\t// don't go off the screen\n\tmut_plus(this.vel, avoid(this.vel, this.pos, POS_C, 1.3, 0.01, scratchVec1));\n\t// apply drag\n\tmut_plus(this.vel, drag(this.vel, GLOBAL_DRAG));\n\tlimitVecMut(this.vel, 0, 1);\n\n\tPhotons.forEach((photon) => {\n\t\ta_dist = distance(this.pos, photon.pos);\n\t\tif(a_dist < this.size) {\n\t\t\tphoton.lifetime = photon.lifetime - 1;\n\t\t\tif(photon.lifetime === 0 || a_dist < this.size*0.6) {\n\t\t\t\tthis.mass = this.mass + 1;\n\t\t\t\tthis.lastMeal = photon.color;\n\t\t\t\tthis.eatTime = 15;\n\t\t\t\tphoton.lifetime = 0;\n\t\t\t}\n\t\t}\n\t\tif(photon.lifetime > 0) mut_plus(photon.vel, mut_times(\n\t\t\tgravitate(photon.pos, this.pos, photon.mass*this.mass, scratchVec1), \n\t\t\t(1/photon.mass))\n\t\t);\n\t});\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\ta_dist = distance(this.pos, entity.pos);\n\n\t\tif(entity instanceof Mote && a_dist < this.size*0.6) {\n\t\t\t// probablistic injury, so they don't get shredded instantly\n\t\t\tif((random()*30*a_dist) < 1) entity.injured = entity.injured + 1;\n\t\t}\n\t\tif(entity instanceof Void) {\n\t\t\tif(a_dist < (entity.size+this.size)*0.44) { // bigger ones eat smaller ones\n\t\t\t\tif(this.mass > entity.mass) {\n\t\t\t\t\tconsume = min(entity.mass, ceil(this.birthMass + this.mass / 100));\n\t\t\t\t\tthis.birthMass += consume;\n\t\t\t\t\tentity.mass -= consume;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!entity.mass) continue; // zero mass means gravity bugs\n\t\t// apply gravity\n\t\tif(entity instanceof Emitter) { // emitters have negative & repelling mass\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, (this.mass/entity.mass), scratchVec1),\n\t\t\t\t(1/entity.mass))\n\t\t\t);\n\t\t}\n\t\telse if(!(entity instanceof AntiGravitonCluster)) {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, entity.mass*this.mass, scratchVec1), \n\t\t\t\t(1/entity.mass))\n\t\t\t);\n\t\t}\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Void.js\n// module id = 11\n// module chunks = 0","\"use strict\";\n\n/**\n * *Very* simple event object.\n */\nexport function Events() {\n\tthis.queue = {};\n\treturn this;\n}\n\nEvents.prototype.on = function(event, callback) {\n\tif(this.queue[event] === undefined) this.queue[event] = [];\n\tthis.queue[event].push(callback);\n}\n\nEvents.prototype.fire = (function() {\n\tlet i, len;\n\treturn function(event, params) {\n\t\tif(this.queue[event] === undefined) return;\n\t\tfor(i = 0, len = this.queue[event].length; i < len; ++i) {\n\t\t\tthis.queue[event][i].call(params);\n\t\t}\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.events.js\n// module id = 12\n// module chunks = 0","export const TARGET_FPS = 30;\nexport const GRAVITY = 6.67408e-8;\nexport const GLOBAL_DRAG = 0.1;\n\n// general debug switch\nexport const DEBUG = true;\n// toggles vector validation in various functions that tend to produce\n// infinite or NaN results; when enabled, vectors are checked and if invalid\n// the function is rerun step by step and logged to identify trouble spots\nexport const VALIDATE_VECTORS = DEBUG || true;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.constants.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nimport * as motes from \"./motes\";\nimport * as emitters from \"./emitters\";\nimport * as photons from \"./photons\";\nimport * as voids from \"./voids\";\nimport * as markers from \"./markers\";\nimport * as ui from \"./ui\";\nimport * as util from \"./util\";\n\nexport {motes, emitters, photons, voids, markers, ui, util};\n\nexport function init(props) {\n\tmotes.init(props);\n\tphotons.init(props);\n\temitters.init(props);\n\tvoids.init(props);\n\tui.init(props);\n\tmarkers.init(props);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/index.js\n// module id = 14\n// module chunks = 0","\"use strict\";\n\nexport const MAX_POOL_SIZE = Math.pow(2, 21); // 2mb\n\nfunction calculatePoolSize(itemLength) {\n\treturn MAX_POOL_SIZE - (MAX_POOL_SIZE % itemLength);\n}\n\nfunction createFreedList(freedLength) {\n\tif(freedLength < Math.pow(2, 8)) return new Uint8Array(freedLength);\n\telse if(freedLength < Math.pow(2, 16)) return new Uint16Array(freedLength);\n\telse return new Uint32Array(freedLength);\n}\n\nexport function BufferPool(itemLength, maxItems) {\n\tlet size = 0|0;\n\tif(maxItems) {\n\t\tif(itemLength * maxItems > MAX_POOL_SIZE) {\n\t\t\tthrow new Error(\"requested buffer size is too large\");\n\t\t}\n\t\telse size = itemLength * maxItems;\n\t}\n\telse size = calculatePoolSize(itemLength);\n\tlet buffer = new ArrayBuffer(size);\n\tlet freedLength = (maxItems?maxItems:size/itemLength);\n\tlet freed = createFreedList(freedLength);\n\tObject.defineProperties(this, {\n\t\t\"itemLength\":{get: () => itemLength},\n\t\t\"buffer\":{get: () => buffer},\n\t\t\"size\":{get: () => size},\n\t\t\"freed\":{get: () => freed},\n\t});\n\tthis.next = 0;\n\tthis.freedPos = 0;\n\treturn this;\n}\n\nlet offset = 0|0;\nBufferPool.prototype.allocate = function() {\n\tif(this.freedPos > 0) offset = this.popFree();\n\telse if (this.next < this.size - 1) {\n\t\toffset = this.next;\n\t\tthis.next = this.next + this.itemLength;\n\t}\n\telse throw new Error(\"pool buffer is full\");\n\treturn offset;\n}\n\nBufferPool.prototype.popFree = function() {\n\tthis.freedPos--;\n\toffset = this.freed[this.freedPos]*this.itemLength;\n\tthis.freed[this.freedPos] = 0;\n\treturn offset;\n}\n\nBufferPool.prototype.free = function(offset) {\n\tthis.freed[this.freedPos] = (offset === 0?offset:offset/this.itemLength);\n\tthis.freedPos++;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.bufferPools.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nlet {random, max, min, floor, ceil, sin} = Math;\nimport {TARGET_FPS, MOTE_BASE_SPEED, MOTE_BASE_SIZE, MOTE_BASE_SIGHT, PREGNANT_THRESHOLD, \n\t\t\t\tDEATH_THRESHOLD, GLOBAL_DRAG, PREGNANT_TIME, DEBUG, MAX_MOTES} from \"../photonomix.constants\";\nimport * as vectrix from \"@nphyx/vectrix\";\nimport {avoid, accelerate, drag, twiddleVec, adjRand, posneg, outOfBounds, rotate, norm_ratio} from \"../photonomix.util\";\nconst {vec2, times, mut_clamp, magnitude, distance, mut_copy, mut_times} = vectrix.vectors;\nconst {plus, mut_plus} = vectrix.matrices;\nimport {BufferPool} from \"../photonomix.bufferPools\";\nimport * as Photons from \"./photons\";\nimport {COLOR_R, COLOR_G, COLOR_B} from \"./photons\";\nimport Void from \"./Void\";\nconst clamp = mut_clamp;\n// Center of the playfield is at 0,0 (ranging from -1 to 1 on X and Y axis)\nconst POS_C  = vec2(0.0, 0.0);\n// activity type constants\nexport const ACT_IDLE   = 0;\nexport const ACT_SEARCH = 1;\nexport const ACT_CHASE  = 2;\nexport const ACT_AVOID  = 3;\nexport const ACT_ATTACK = 4;\nexport const ACT_LINK   = 5;\n\n// twiddle to slightly offset the values, avoids divide by zero and other errors\n// inherent to acceleration, friction, drag and gravity equations\ntwiddleVec(POS_C);\n// relative color values derived from a Mote's photons, used to produce color string\n// for rendering\n\n// various consts below are indexes and byte counts for mote data\n// byte length of these value types\nconst I8 = 1;\nconst F32 = 4;\n\n// uint8 values = photons[3]\nconst U8_PHO  = 0,\n\t\t\tU8_COL  = U8_PHO        + I8*3, \n\t\t\tU8_VAL_LENGTH = U8_COL  + I8*3,\n\t\t\tI8_BYTE_OFFSET = U8_VAL_LENGTH;\n// int8 values =  dying, pregnant, injured, lastMeal, pulse\nconst\tI8_DYING       = 0,\n\t\t\tI8_PREG        = I8_DYING       + I8,\n\t\t\tI8_INJURED     = I8_PREG        + I8,\n\t\t\tI8_LAST_INJURY = I8_INJURED     + I8,\n\t\t\tI8_MEAL        = I8_LAST_INJURY + I8,\n\t\t\tI8_UPD         = I8_MEAL        + I8,\n\t\t\tI8_PULSE       = I8_UPD         + I8,\n\t\t\tI8_ACT         = I8_PULSE       + I8,\n\t\t\tI8_VAL_LENGTH  = I8_ACT         + I8,\n\t\t\tINT_VAL_LENGTH = U8_VAL_LENGTH  + I8_VAL_LENGTH;\n\n// float32 values = p[3], v[3], color[4], size, sizeMin, sizeMax, speed, sight, agro, fear, potential, resistance\n// from here on, increments of value * 4\n// vectors\nconst VEC_BYTE_OFFSET = INT_VAL_LENGTH + (F32-(INT_VAL_LENGTH % F32)), // float32 offsets must be multiples of 4\n\t\t\tF32_POS  = 0,\n\t\t\tF32_VEL  = F32_POS + 2,\n\t\t\tF32_RAT  = F32_VEL + 2,\n\t\t\tF32_PREF = F32_RAT + 3,\n\t\t\tVEC_VAL_LENGTH = F32_PREF + 3;\n\nconst F32_BYTE_OFFSET = VEC_BYTE_OFFSET + (VEC_VAL_LENGTH*F32),\n\t\t\t// scalars\n\t\t\tF32_SIZE         = 0,\n\t\t\tF32_SIZE_MIN     = F32_SIZE       + 1,\n\t\t\tF32_SIZE_MAX     = F32_SIZE_MIN   + 1,\n\t\t\tF32_SPEED        = F32_SIZE_MAX   + 1,\n\t\t\tF32_SIGHT        = F32_SPEED      + 1,\n\t\t\tF32_AGRO         = F32_SIGHT      + 1,\n\t\t\tF32_FEAR         = F32_AGRO       + 1,\n\t\t\tF32_POTENTIAL    = F32_FEAR       + 1,\n\t\t\tF32_RESISTANCE   = F32_POTENTIAL  + 1,\n\t\t\tF32_MASS         = F32_RESISTANCE + 1,\n\t\t\tFLOAT_VAL_LENGTH = F32_MASS       + 1;\n\nexport const BUFFER_LENGTH = F32_BYTE_OFFSET + (FLOAT_VAL_LENGTH*F32);\n\n// scratch vectors used in various functions\nconst scratch1 = vec2(), scratch2 = vec2();\n\nconst BUFFER_POOL = new BufferPool(BUFFER_LENGTH, MAX_MOTES);\n\n\n/**\n * Constructor for Motes.\n * @param {Float32Array(3)} photons initial photons (0-255, R, G, B)\n * @param {vec2} pos initial position\n * @param {Float} bSpeed (optional) base acceleration: inheritance and predesigned motes \n * @param {Float} bSight (optional) base vision radius: inheritance and predesigned motes \n * @param {Float} bAgro (optional) base aggressiveness: inheritance and predesigned motes \n * @param {Float} bFear (optional) base fearfulness: inheritance and predesigned motes \n * @property {vec2} pos position vector\n * @property {vec2} vel velocity vector\n * @property {Uint8} r red photon value (setter updates values and derived props)\n * @property {Uint8} g green photon value (setter updates value and derived props)\n * @property {Uint8} b blue photon value (setter updates value and derived props)\n * @property {string} color_string rgba color string, used for drawing in 2d\n * @property {Int8} dying counter from 1 to DEATH_THRESHOLD when a mote is dying\n * @property {Int8} pregnant coundown from PREGNANT_DURATION when a mote is pregnant\n * @property {Int8} injured injury counter, counts down in mote.bleed\n * @property {Int8} lastInjury strength of most recent injury taken\n * @property {Int8} pulse frame offset for pulse animation\n * @property {Int8} lastMeal color value for last meal (see R, G, B constants)\n * @property {Int8} action action choice in relation to target \n * @property {Float32} speed derived acceleration speed based on Mote properties\n * @property {Float32} sight derived vision radius based on Mote properties \n * @property {Float32} agro derived aggression factor based on Mote properties \n * @property {Float32} fear derived fearfulness factor based on Mote properties \n * @property {Float32} potential accumulated charge potential\n * @property {Float32} resistance accumulated resistance to charge\n * @property {Float32} size derived size radius as fraction of screen size\n * @property {Float32} sizeMin minimum size the mote can reach as it shrinks\n * @property {Float32} sizeMax maximum size the mote can reach as it grows\n * @property {UintClamped8Array} photons current photon values (R, G, B)\n * @property {UintClamped8Array} color current mote color (R, G, B)\n * @property {Int8Array} intVals direct access to integer value array (for debug)\n * @property {Float32Array} ratios current photon ratios (R, G, B)\n * @property {Float32Array} prefs preferred photon ratios\n * @property {Float32Array} floatVals direct access to float value array (for debug)\n * @return {Mote}\n */\nexport default function Mote(_photons = new Uint8Array(3), pos = new Float32Array(2), bSpeed = MOTE_BASE_SPEED, bSight = MOTE_BASE_SIGHT, bAgro = 1.0, bFear = 1.0) {\n\tlet buffer = BUFFER_POOL.buffer,\n\t\t\toffset = BUFFER_POOL.allocate();\n\n\t// \"private\" properties\n\t// use a single buffer for properties so that they're guaranteed to be contiguous\n\t// in memory and typed\n\tlet photons = new Uint8ClampedArray(buffer, U8_PHO+offset, 3);\n\tlet color = new Uint8ClampedArray(buffer, U8_COL+offset, 3);\n\tphotons[COLOR_R] = _photons[COLOR_R];\n\tphotons[COLOR_G] = _photons[COLOR_G];\n\tphotons[COLOR_B] = _photons[COLOR_B];\n\tlet intVals = new Int8Array(buffer, I8_BYTE_OFFSET+offset, I8_VAL_LENGTH - U8_PHO);\n\tlet floatVals = new Float32Array(buffer, F32_BYTE_OFFSET+offset, FLOAT_VAL_LENGTH);\n\tthis.pos = vec2(pos, buffer, F32_POS*F32+VEC_BYTE_OFFSET+offset);\n\tthis.vel = vec2(0.0, 0.0, buffer, F32_VEL*F32+VEC_BYTE_OFFSET+offset);\n\tlet ratios  = new Float32Array(buffer, F32_RAT*F32+VEC_BYTE_OFFSET+offset, 3);\n\tlet prefs   = new Float32Array(buffer, F32_PREF*F32+VEC_BYTE_OFFSET+offset, 3);\n\tthis.target = undefined;\n\tthis.color_string = \"\";\n\tbSpeed = bSpeed+adjRand(0.0005);\n\tbSight = bSight+adjRand(0.001); // vision distance\n\tbAgro = bAgro+adjRand(0.001);\n\tbFear = bFear+adjRand(0.001);\n\n\tObject.defineProperties(this, {\n\t\t\"photons\":{get: () => photons},\n\t\t\"color\":{get: () => color},\n\t\t\"dying\":{get: () => intVals[I8_DYING], set: (v) => intVals[I8_DYING] = v},\n\t\t\"action\":{get: () => intVals[I8_ACT], set: (v) => intVals[I8_ACT] = v},\n\t\t\"pregnant\":{get: () => intVals[I8_PREG], set: (v) => intVals[I8_PREG] = v},\n\t\t\"injured\":{get: () => intVals[I8_INJURED], set: (v) => intVals[I8_INJURED] = v},\n\t\t\"lastInjury\":{get: () => intVals[I8_LAST_INJURY], set: (v) => intVals[I8_LAST_INJURY] = v},\n\t\t\"needsUpdate\":{get: () => intVals[I8_UPD], set: (v) => intVals[I8_UPD] = v},\n\t\t\"pulse\":{get: () => intVals[I8_PULSE], set: (v) => intVals[I8_PULSE] = v},\n\t\t\"lastMeal\":{get: () => intVals[I8_MEAL], set: (v) => intVals[I8_MEAL] = v},\n\t\t\"size\":{get: () => floatVals[F32_SIZE], set: (v) => floatVals[F32_SIZE] = v},\n\t\t\"sizeMin\":{get: () => floatVals[F32_SIZE_MIN], set: (v) => floatVals[F32_SIZE_MIN] = v},\n\t\t\"sizeMax\":{get: () => floatVals[F32_SIZE_MAX], set: (v) => floatVals[F32_SIZE_MAX] = v},\n\t\t\"speed\":{get: () => floatVals[F32_SPEED], set: (v) => floatVals[F32_SPEED] = v},\n\t\t\"sight\":{get: () => floatVals[F32_SIGHT], set: (v) => floatVals[F32_SIGHT] = v},\n\t\t\"agro\":{get: () => floatVals[F32_AGRO], set: (v) => floatVals[F32_AGRO] = v},\n\t\t\"fear\":{get: () => floatVals[F32_FEAR], set: (v) => floatVals[F32_FEAR] = v},\n\t\t\"potential\":{get: () => floatVals[F32_POTENTIAL], set: (v) => floatVals[F32_POTENTIAL] = v},\n\t\t\"resistance\":{get: () => floatVals[F32_RESISTANCE], set: (v) => floatVals[F32_RESISTANCE] = v},\n\t\t\"mass\":{get: () => floatVals[F32_MASS], set: (v) => floatVals[F32_MASS] = v},\n\t\t\"base_speed\":{get: () => bSpeed},\n\t\t\"base_sight\":{get: () => bSight},\n\t\t\"base_agro\":{get: () => bAgro},\n\t\t\"base_fear\":{get: () => bFear},\n\t\t\"offset\":{get: () => offset},\n\t\t\"ratios\":{get: () => ratios},\n\t\t\"prefs\":{get: () => prefs}\n\t});\n\n\t/*\n\t * Debug access only.\n\t */\n\tif(DEBUG) Object.defineProperties(this, {\n\t\t\"intVals\":{get: () => intVals},\n\t\t\"floatVals\":{get: () => floatVals},\n\t});\n\n\t// initialize values, important to do since buffer may be reused\n\tthis.dying = 0;\n\tthis.pregnant = 0;\n\tthis.injured = 0;\n\tthis.lastInjury = 0;\n\tthis.speed = bSpeed;\n\tthis.sight = bSight;\n\tthis.agro = bAgro;\n\tthis.fear = bFear;\n\tthis.potential = this.agro*2;\n\tthis.resistance = this.fear*2;\n\tthis.lastMeal = ~~(random()*3);\n\tthis.pulse = ~~(TARGET_FPS*random());\n\tthis.size = MOTE_BASE_SIZE;\n\tthis.sizeMin = MOTE_BASE_SIZE*0.5;\n\tthis.sizeMax = MOTE_BASE_SIZE*3;\n\n\tthis.updateProperties();\n\tthis.prefs[COLOR_R] = this.ratios[COLOR_R];\n\tthis.prefs[COLOR_G] = this.ratios[COLOR_G];\n\tthis.prefs[COLOR_B] = this.ratios[COLOR_B];\n\treturn this;\n}\n\n/**\n * Updates derived properties for mote.\n */\nMote.prototype.updateProperties = (function() {\n\tlet  r = 0|0, g = 0|0, b = 0|0, photons, color, ratios;\n\treturn function updateProperties() {\n\t\t({photons, ratios, color} = this);\n\t\tr = photons[COLOR_R];\n\t\tg = photons[COLOR_G];\n\t\tb = photons[COLOR_B];\n\t\tthis.mass = r + g + b;\n\t\tif(this.mass > 0) { // otherwise skip this stuff since the mote is dead anyway\n\t\tthis.size = clamp(this.mass/(PREGNANT_THRESHOLD/3)*MOTE_BASE_SIZE, this.sizeMin, this.sizeMax);\n\t\t\tnorm_ratio(photons, ratios);\n\t\t\t/*\n\t\t\tratios[COLOR_R] = ratio(r, g+b);\n\t\t\tratios[COLOR_G] = ratio(g, r+b);\n\t\t\tratios[COLOR_B] = ratio(b, g+r);\n\t\t\t*/\n\t\t\tthis.speed = this.base_speed*(1-this.size)*(1+ratios[COLOR_B]);\n\t\t\tthis.sight = this.base_sight+(this.size*0.5); // see from edge onward\n\t\t\tthis.agro = this.base_agro*(1+ratios[COLOR_R]);\n\t\t\tthis.fear = this.base_fear*(1+ratios[COLOR_G]);\n\t\t\tif(DEBUG) {\n\t\t\t\tif(isNaN(this.speed)) throw new Error(\"Mote.updateProperties: NaN speed\");\n\t\t\t\tif(isNaN(this.sight)) throw new Error(\"Mote.updateProperties: NaN sight\");\n\t\t\t\tif(isNaN(this.size)) throw new Error(\"Mote.updateProperties: NaN size\");\n\t\t\t\tif(isNaN(this.agro)) throw new Error(\"Mote.updateProperties: NaN agro\");\n\t\t\t\tif(isNaN(this.fear)) throw new Error(\"Mote.updateProperties: NaN fear\");\n\t\t\t}\n\t\t} // end of stuff to do only if sum > 0\n\n\t\tif((this.mass > PREGNANT_THRESHOLD) && this.pregnant === 0) this.pregnant = PREGNANT_TIME;\n\t\tif((this.mass < DEATH_THRESHOLD) && this.dying === 0) this.dying = 1;\n\n\t\tcolor[COLOR_R] = ~~(ratios[COLOR_R]*255);\n\t\tcolor[COLOR_G] = ~~(ratios[COLOR_G]*255);\n\t\tcolor[COLOR_B] = ~~(ratios[COLOR_B]*255);\n\t\tthis.needsUpdate = 0;\n\t}\n})();\n\n/**\n * Maintenance tasks to be done each tick\n */\nMote.prototype.runMaintenance = (function() {\n\tlet pregnant = 0|0, dying = 0|0, tmpPot = 0.0, tmpRes = 0.0,\n\t\t\tagro = 0.0, fear = 0.0, size = 0.0, speed = 0.0, sight = 0.0,\n\t\t\tpos, vel, target;\n\treturn function runMaintenance(delta) {\n\t\t({pos, vel, pregnant, dying, agro, fear, size, speed, sight, target} = this);\n\t\tif(pregnant > 0) this.pregnant = pregnant - 1;\n\t\tif(dying > 0) this.dying = dying + 1; // start counting up\n\t\tif(this.needsUpdate) this.updateProperties();\n\t\t// build potential and resistance each tick\n\t\ttmpPot = agro * (size*100);\n\t\ttmpRes = fear * (size*100);\n\t\tthis.potential = clamp(this.potential + agro*delta, -tmpPot, tmpPot);\n\t\tthis.resistance = clamp(this.resistance + fear*delta, -tmpRes, tmpRes);\n\n\t\t// last turn's move, has to happen first to avoid prediction inaccuracy\n\t\t// during chases\n\t\tmut_plus(pos, times(vel, delta, scratch1));\n\n\t\t// don't go off the screen\n\t\tmut_plus(vel, avoid(vel, pos, POS_C, 1.3, speed, scratch1)); \n\t\t// apply drag\n\t\tmut_plus(vel, drag(vel, GLOBAL_DRAG));\n\t}\n})();\n\n/**\n * Checks if a target is valid.\n * @param {Object} entity any game object that can be targeted\n * @return {float} distance if valid, otherwise -1\n */\nMote.prototype.validateTarget = (function() {\n\tlet dist = 0.0, sight = 0.0, pos;\n\treturn function(entity) {\n\t\t({pos, sight} = this);\n\t\tdist = distance(pos, entity.pos);\n\t\t// these targets are invalid\n\t\tif(entity === this) return -1;\n\t\tif(entity.dying) return -1;\n\t\tif(entity.lifetime && entity.lifetime < 3) return -1;\n\t\tif(entity.mass < 1) return -1;\n\t\tif(dist > (sight+entity.size*0.5)) return -1;\n\t\tif(outOfBounds(entity, 0.7)) return -1;\n\t\treturn dist;\n\t}\n})();\n\n/**\n * Search for a target and decide how to act toward it.\n */\nMote.prototype.search = (function() {\n\tlet i = 0|0, len = 0|0, sight = 0.0, cur = 0.0, pos, vel, highest, dist, entity,\n\t\t\tdeltar = 0.0, deltag = 0.0, deltab = 0.0, mind = 0.0, maxd = 0.0, weight = 0.0;\n\treturn function search(entities) {\n\t\t({pos, vel, sight} = this);\n\t\thighest = -Infinity;\n\t\tdist = 0;\n\t\tif(this.pregnant || this.dying) {\n\t\t\tthis.action = ACT_IDLE;\n\t\t\thighest = Infinity;\n\t\t}\n\n\t\t// check out photons\n\t\tPhotons.forEach((photon) => {\n\t\t\tif(photon.lifetime < 4) return;\n\t\t\tdeltar = (this.prefs[COLOR_R] - this.ratios[COLOR_R]);\t\n\t\t\tdeltag = (this.prefs[COLOR_G] - this.ratios[COLOR_G]);\t\n\t\t\tdeltab = (this.prefs[COLOR_B] - this.ratios[COLOR_B]);\t\n\t\t\tmaxd = max(deltar, deltag, deltab);\n\t\t\tmind = min(deltar, deltag, deltab);\n\t\t\tif((maxd == deltar && photon.color == COLOR_R) ||\n\t\t\t\t\t(maxd == deltag && photon.color == COLOR_G) ||\n\t\t\t\t\t(maxd == deltab && photon.color == COLOR_B)) weight = 30;\n\t\t\tif((mind == deltar && photon.color == COLOR_R) ||\n\t\t\t\t\t(mind == deltag && photon.color == COLOR_G) ||\n\t\t\t\t\t(mind == deltab && photon.color == COLOR_B)) weight = 10;\n\t\t\telse weight = 20;\n\t\t\tcur = weight*(1/dist);\n\t\t\tif(cur > highest) {\n\t\t\t\tthis.target = photon;\n\t\t\t\tthis.action = ACT_CHASE;\n\t\t\t\thighest = cur;\n\t\t\t}\n\t\t});\n\n\t\tfor(i = 0, len = entities.length; (i < len) && (highest < Infinity); ++i) {\n\t\t\tentity = entities[i];\n\t\t\tlet dist = this.validateTarget(entity);\n\t\t\tif(dist === -1) continue;\n\t\t\t// ignore things outside sight range\n\t\t\tif(entity instanceof Mote) {\n\t\t\t\tcur = 3*(1/dist);\n\t\t\t\tif(cur > highest) {\n\t\t\t\t\tthis.target = entity;\n\t\t\t\t\tif(entity.target === this || dist < (this.size+entity.size)*0.5) {\n\t\t\t\t\t\tthis.action = ACT_AVOID;\n\t\t\t\t\t}\n\t\t\t\t\telse this.action = ACT_CHASE;\n\t\t\t\t\thighest = cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(entity instanceof Void) {\n\t\t\t\tthis.target = entity;\n\t\t\t\tthis.action = ACT_AVOID;\n\t\t\t\thighest = Infinity;\n\t\t\t}\n\t\t}\n\t\tif(highest < 0) return false;\n\t\treturn true;\n\t}\n})();\n\n/**\n * Decide how to act each tick based on nearby objects.\n * @param Array surrounding array of nearby objects to consider in movement\n * @param Float delta time delta\n */\nMote.prototype.tick = (function() {\n\tlet pos, vel, size, sight, speed, agro, fear, resistance, potential, target, dist;\n\treturn function tick(entities, delta, frameCount) {\n\t\t({pos, vel, size, sight, speed, agro, fear, resistance, potential, target} = this);\n\t\tthis.runMaintenance(delta);\n\n\t\t// validate current target \n\t\tif(target && (dist = this.validateTarget(target)) === -1) {\n\t\t\tthis.action = ACT_IDLE;\n\t\t}\n\n\t\tswitch(this.action) {\n\t\t\tcase ACT_IDLE: // lost target, gave up, or completed task\n\t\t\t\tthis.target = undefined;\n\t\t\t\tif(magnitude(vel) < 0.001) { // not going anywhere, so pick a random direction\n\t\t\t\t\tscratch1[0] = random()*2-1;\n\t\t\t\t\tscratch1[1] = random()*2-1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmut_copy(scratch1, pos);\n\t\t\t\t\tmut_plus(scratch1, times(vel, delta, scratch2));\n\t\t\t\t\tmut_plus(scratch1, rotate(scratch1, pos, sin((frameCount+this.pulse)*speed), scratch2));\n\t\t\t\t}\n\t\t\t\tmut_plus(vel, accelerate(pos, scratch1, speed, scratch2));\n\t\t\t\tthis.action = ACT_SEARCH;\n\t\t\tbreak;\n\t\t\tcase ACT_CHASE: // chasing a target\n\t\t\t\t// predict target's next move\n\t\t\t\tplus(target.pos, times(target.vel, delta, scratch1), scratch2);\n\t\t\t\tmut_plus(vel, accelerate(pos, scratch2, speed, scratch1));\n\t\t\t\tif(dist < sight) {\n\t\t\t\t\tif(target instanceof Mote && this.potential > this.agro*3) \n\t\t\t\t\t\tthis.action = ACT_ATTACK;\n\t\t\t\t\telse this.action = ACT_ATTACK;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase ACT_AVOID: // avoiding a target\n\t\t\t\t// predict target's next move\n\t\t\t\tplus(target.pos, times(target.vel, delta, scratch1), scratch2);\n\t\t\t\tmut_plus(vel, accelerate(scratch2, pos, speed, scratch1));\n\t\t\t\tif(this.resistance > fear*3) this.action = ACT_IDLE;\n\t\t\tbreak;\n\t\t\tcase ACT_ATTACK: // attacking a target\n\t\t\t\tif(target instanceof Mote) this.discharge(target);\n\t\t\t\telse if(target instanceof Photons.Photon) this.eatPhoton(target);\n\t\t\tbreak;\n\t\t\tcase ACT_LINK: // linking with a target\n\t\t\tbreak;\n\t\t\tcase ACT_SEARCH:\n\t\t\t\tif(!this.search(entities)) this.action = ACT_IDLE;\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n})();\n\n\nlet delta = 0.0;\nMote.prototype.discharge = function(target) {\n\tdelta = this.potential - target.resistance;\n\ttarget.resistance -= max(this.agro, delta*this.agro);\n\tthis.potential -= max(this.fear, delta*this.fear);\n\ttarget.injure(this, max(0, ~~(delta)));\n\tif(this.potential < 0) this.action = ACT_IDLE;\n}\n\nMote.prototype.injure = function(by, strength) {\n\tthis.injured += strength;\n\tthis.lastInjury = this.injured;\n\tif(this.resistance < (this.agro*3) ||\n\t\tthis.injured < this.fear\n\t) this.target = by;\n}\n\nMote.prototype.bleed = (function() {\n\tlet choice = 0|0, choiceVal = 0|0, pvel = vec2(), photons;\n\treturn function bleed() {\n\t\tphotons = this.photons;\n\t\tdo {\n\t\t\tchoice = ~~(random()*3);\n\t\t\tswitch(choice) {\n\t\t\t\tcase COLOR_R: choiceVal = photons[COLOR_R]; break;\n\t\t\t\tcase COLOR_G: choiceVal = photons[COLOR_G]; break;\n\t\t\t\tcase COLOR_B: choiceVal = photons[COLOR_B]; break;\n\t\t\t}\n\t\t} while (choiceVal === 0);\n\t\tswitch(choice) {\n\t\t\tcase COLOR_R: photons[COLOR_R] = photons[COLOR_R] - 1; break;\n\t\t\tcase COLOR_G: photons[COLOR_G] = photons[COLOR_G] - 1; break;\n\t\t\tcase COLOR_B: photons[COLOR_B] = photons[COLOR_B] - 1; break;\n\t\t}\n\t\tthis.injured--;\n\t\tmut_times(this.vel, 1+this.speed);\n\t\tmut_copy(pvel, this.vel);\n\t\tmut_times(pvel, -1);\n\t\tthis.needsUpdate = 1;\n\t\tPhotons.create(this.pos, pvel, choice);\n\t\t//return choice;\n\t}\n})();\n\nMote.prototype.split = (function() {\n\tlet baby, photons;\n\treturn function() {\n\t\tphotons = this.photons;\n\t\tbaby = new Mote(\n\t\t\t[floor(photons[COLOR_R]/2), floor(photons[COLOR_G]/2), floor(photons[COLOR_B]/2)],\n\t\t\tthis.pos, this.base_speed, this.base_sight, this.base_agro, \n\t\t\tthis.base_fear);\n\t\tphotons[COLOR_R] = ceil(photons[COLOR_R]/2);\n\t\tphotons[COLOR_G] = ceil(photons[COLOR_G]/2);\n\t\tphotons[COLOR_B] = ceil(photons[COLOR_B]/2);\n\t\tthis.pregnant = PREGNANT_TIME-1;\n\t\tbaby.pregnant = PREGNANT_TIME-1;\n\t\tthis.target = baby;\n\t\tbaby.target = this;\n\t\tbaby.needsUpdate = 1;\n\t\tthis.needsUpdate = 1;\n\t\treturn baby;\n\t}\n})();\n\nMote.prototype.eatPhoton = (function() {\n\tlet photons;\n\treturn function eatPhotons(photon) {\n\t\tif(photon.lifetime > 2 && distance(this.pos, photon.pos) < this.sight) {\n\t\t\tphotons = this.photons;\n\t\t\tphoton.lifetime = 2;\n\t\t\tswitch(photon.color) {\n\t\t\t\tcase COLOR_R: photons[COLOR_R]+=1; break;\n\t\t\t\tcase COLOR_G: photons[COLOR_G]+=1; break;\n\t\t\t\tcase COLOR_B: photons[COLOR_B]+=1; break;\n\t\t\t}\n\t\t\tthis.lastMeal = photon.color;\n\t\t\tthis.potential -= this.agro*0.5;\n\t\t\tthis.resistance -= this.fear*0.5;\n\t\t\tthis.needsUpdate = 1;\n\t\t}\n\t\tthis.action = ACT_IDLE;\n\t}\n})();\n\nconst rpos = new Float32Array(2);\nconst rphotons = new Uint8ClampedArray(3);\n/**\n * Generates mote with randomized position and photon values.\n * @return {Mote}\n */\nMote.random = function() {\n\tdo {\n\t\trpos[0] = random()*posneg();\n\t\trpos[1] = random()*posneg();\n\t}\n\twhile(magnitude(rpos) > 0.8); \n\trphotons[0] = ~~(random()*64);\n\trphotons[1] = ~~(random()*64);\n\trphotons[2] = ~~(random()*64);\n\treturn new Mote(rphotons, rpos);\n}\n\nMote.prototype.destroy = function() {\n\tBUFFER_POOL.free(this.offset);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Mote.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {gravitate} from \"../photonomix.util\";\nlet {vec2, mut_times, distance} = vectrix.vectors;\nlet {mut_plus} = vectrix.matrices;\nimport * as Photons from \"./photons\";\nimport Void from \"./Void\";\n\n/**\n * Ripples are small bursts that push objects away then expire. Usually spawned by player clicks.\n */\nexport default function Ripple(pos = vec2(), mass = 100) {\n\tthis.pos = vec2(pos);\n\tthis.vel = vec2(0,0);\n\tthis.storedMass = 0;\n\tthis.mass = mass; \n\treturn this;\n}\n\nlet scratchVec1 = vec2(), i = 0|0, len = 0|0, entity, a_dist = 0.0;\nRipple.prototype.tick = function(entities) {\n\tif(this.storedMass) {\n\t\tthis.mass += this.storedMass;\n\t\tthis.storedMass = 0;\n\t}\n\telse this.mass--;\n\tPhotons.forEach((photon) => {\n\t\ta_dist = distance(this.pos, photon.pos);\n\t\tif(a_dist < 0.01) photon.lifetime = 0;\n\t\telse mut_plus(photon.vel, mut_times(\n\t\t\tgravitate(photon.pos, this.pos, this.mass*20, scratchVec1),\n\t\t\t1/photon.mass));\n\t});\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\ta_dist = distance(this.pos, entity.pos);\n\t\t// check for stored mass so they don't just swap back and forth forever\n\t\tif(entity instanceof Ripple && !entity.storedMass) {\n\t\t\tif(a_dist < 0.005 && a_dist > 0.001) {\n\t\t\t\tthis.storedMass++;\n\t\t\t\tentity.mass--;\n\t\t\t}\n\t\t}\n\t\telse if(entity instanceof Void) {\n\t\t\tif(a_dist < 0.0025) {\n\t\t\t\tentity.birthMass += this.storedMass;\n\t\t\t\tthis.storedMass = 0;\n\t\t\t}\n\t\t\tif((a_dist - entity.size) < 0.01 && this.mass > 90 && this.mass < 100) {\n\t\t\t\tentity.mass--;\n\t\t\t}\n\t\t\tthis.storedMass = 0;\n\t\t}\n\t\telse {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, -this.mass*entity.mass, scratchVec1),\n\t\t\t\t1/entity.mass));\n\t\t}\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Ripple.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nimport {controls, display} from \"@nphyx/pxene\";\nimport * as draw from \"./draw\";\nimport * as game from \"./game\";\nimport * as constants from \"./photonomix.constants\";\nimport * as util from \"./photonomix.util\";\n\nconst displayConfig = {\n\tcontainer:\"body\",\n\tbufferDescriptions:[\n\t\t{label:\"bokehBack\", compositeMethod:\"source-over\", scaleMethod:display.buffers.SCALE_KEEP_ASPECT},\n\t\t{label:\"bokehFront\", compositeMethod:\"lighter\", scaleMethod:display.buffers.SCALE_NONE},\n\t\t{label:\"entitiesLight\", compositeMethod:\"lighter\", scaleMethod:display.buffers.SCALE_NONE},\n\t\t{label:\"entitiesDark\", compositeMethod:\"hard-light\", scaleMethod:display.buffers.SCALE_NONE},\n\t\t{label:\"ui\", compositeMethod:\"source-over\", scaleMethod:display.buffers.SCALE_NONE}\n\n\t],\n\tpixelRatio:1,\n\tframeCallback:main\n}\n\nvar photonomix = {\n\tutil:util,\n\tconstants:constants,\n\tcontrols:controls,\n\tdisplay:display,\n\tgame:game,\n\tdraw:draw,\n\tstate:{}\n}\n\nwindow.photonomix = photonomix;\n\nwindow.addEventListener(\"load\", function() {\n\tphotonomix.state.game = new game.Game();\n\tdisplay.init(displayConfig);\n\tdraw.init(photonomix.state, display);\n\tcontrols.init();\n\tdocument.querySelector(displayConfig.container).addEventListener(\"click\", startGame);\n});\n\nfunction main() {\n\tif(photonomix.state.game.started) photonomix.state.game.tick(display.timing);\n\tphotonomix.draw.tick();\n}\n\n/**\n * Starts up the game.\n */\nexport function startGame() {\n\tlet container = document.querySelector(displayConfig.container);\n\tphotonomix.state.game.start();\n\tcontainer.removeEventListener(\"click\", startGame);\n\tcontainer.classList.remove(\"start\");\n\tconsole.log(\"game started\");\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.js\n// module id = 18\n// module chunks = 0","\"use strict\";\n//import {flatten} from \"../pxene.util\";\nimport KeyState from \"./KeyState\";\nimport KeyMap from \"./KeyMap\";\n\nconst state = [\n];\n\nconst keyMaps = {\n}\n\n/**\n * Flattens an array. \n * @function flatten\n * @param {mixed} a an array, array-like, or object that can be flattened\n * @return {mixed} flat version of input\n */\nexport function flatten(a) {\n\t// cheap array-like check, may not always be reliable\n\tif(a instanceof Object && typeof a.length == \"number\") {\n\t\tlet i = 0, len = a.length, out = [];\n\t\tfor(;i < len; ++i) {\n\t\t\tout = out.concat(flatten(a[i]));\n\t\t}\n\t\treturn out;\n\t}\n\telse return a;\n}\n\n\n/**\n * Maps a label to one or more keys.\n * @example\n * ```javascript\n * let forward = pxene.controls.map(\"forward\", \"d\", \"rightArrow\");\n * ```\n * @param {string} label a label for the keymap\n * @param {string|Array} ...keys a list of keys to map\n * @return {KeyMap}\n */\nexport function map(label, ...keys) {\n\tconst map = getOrInitMap(label);\n\tkeys = flatten(keys);\n\tkeys.forEach(key => {\n\t\tconst ks = getOrInitKeyState(key);\n\t\tif(map.keys.indexOf(ks) == -1) map.keys.push(ks)\n\t});\n\treturn map;\n}\n\n/**\n * Removes a key mapping, returning the modified {@link KeyMap}.\n * @param {string} label the key map's label\n * @param {string} key the [key name]{@link KeyState} to remove\n * @return {KeyMap|undefined} undefined if the KeyMap for the label didn't exist\n */\nexport function unmap(label, key) {\n\tif(keyMaps[label]) {\n\t\tlet index = keyMaps[label].keys.indexOf(lookupKeyState(key));\n\t\tif(index) keyMaps.keys.splice(index, 1);\n\t}\n\treturn keyMaps[label];\n}\n\n/**\n * Finds a keyState by [key name]{@link KeyMap}, initializing a new one if necessary.\n * @param {string} key the key name\n * @return {KeyState}\n */\nfunction getOrInitKeyState(key) {\n\tkey = key.toLowerCase();\n\tlet ks = lookupKeyState(key);\n\tif(ks === undefined) {\n\t\tks = new KeyState(key);\n\t\tstate.push(ks);\n\t}\n\treturn ks;\n}\n\n/**\n * Finds a keyMap by label, initializing a new one if necessary.\n * @param {string} label the keymap label\n * @return {KeyMap}\n */\nfunction getOrInitMap(label) {\n\tlet mapped = lookupMap(label);\n\tif(mapped === undefined) {\n\t\tmapped = new KeyMap(label);\n\t\tkeyMaps[label] = mapped;\n\t}\n\treturn mapped;\n}\n\n/**\n * Looks up a KeyMap by label.\n * @param {string} label the keymap label\n * @return {KeyMap|undefined}\n */\nexport function lookupMap(label) {\n\treturn keyMaps[label];\n}\n\n/**\n * Looks up a KeyState by [key name]{@link KeyState}.\n */\nexport function lookupKeyState(key) {\n\tkey = key.toLowerCase();\n\treturn state.filter(ks => ks.key === key)[0]\n}\n\n/**\n * Handles keydown & mousedown events.\n */\nfunction down(ev) {\n\tconst time = Date.now();\n\tif(ev instanceof MouseEvent) {\n\t\tconst ks = lookupKeyState(\"mouse\"+ev.button);\n\t\tif(ks && ks.lastUp >= ks.lastDown) { // ignore key repeats\n\t\t\tks.down = true;\n\t\t\tks.lastDown = time; \n\t\t}\n\t}\n\telse if(ev instanceof KeyboardEvent) {\n\t\t/* global KeyboardEvent */\n\t\tconst ks = lookupKeyState(ev.key);\n\t\tif(ks && ks.lastUp >= ks.lastDown) { // ignore key repeats\n\t\t\tks.down = true;\n\t\t\tks.lastDown = time; \n\t\t}\n\t}\n}\n\n/**\n * Handles keyup & mouseup events.\n */\nfunction up(ev) {\n\tconst time = Date.now();\n\tif(ev instanceof MouseEvent) {\n\t\tconst ks = lookupKeyState(\"mouse\"+ev.button);\n\t\tif(ks) {\n\t\t\tks.down = false;\n\t\t\tks.lastUp = time;\n\t\t}\n\t}\n\telse if(ev instanceof KeyboardEvent) {\n\t\tconst ks = lookupKeyState(ev.key);\n\t\tif(ks) {\n\t\t\tks.down = false;\n\t\t\tks.lastUp = time;\n\t\t}\n\t}\n}\n\n/**\n * When the window blurs we lose track of key events, so toggle all keys off.\n */\nfunction blur() {\n\tconst time = Date.now();\n\tstate.forEach(ks => {\n\t\tks.down = false;\n\t\tks.lastUp = time;\n\t});\n}\n\nconst cursor_pos = new Float32Array(2);\nfunction updateCursorState(ev) {\n\tcursor_pos[0] = ev.clientX;\n\tcursor_pos[1] = ev.clientY;\n}\n\nexport function getCursorPosition() {\n\treturn Float32Array.of(cursor_pos[0], cursor_pos[1]);\n}\n\nexport function init() {\n\twindow.addEventListener(\"keydown\", down); \n\twindow.addEventListener(\"keyup\", up); \n\twindow.addEventListener(\"mousedown\", down); \n\twindow.addEventListener(\"mouseup\", up); \n\twindow.addEventListener(\"blur\", blur);\n\twindow.addEventListener(\"mousemove\", updateCursorState);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/controls/index.js\n// module id = 19\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.controls.KeyState\n * contains the KeyState prototype.\n */\n\n/**\n * Data type for tracking the state of a single key.\n * @param {string} key key name, as defined in [KeyboardEvent.key]{@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values}\n * @return {KeyState}\n */\nexport default function KeyState(key) {\n\tthis.key = key;\n\tthis.down = false;\n\tthis.lastDown = 0;\n\tthis.lastUp = 0;\n\treturn Object.seal(this);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/controls/KeyState.js\n// module id = 20\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.controls.KeyMap\n * contains the KeyMap prototype.\n */\n\n/**\n * Data type for handling mappings of keys to control labels.\n * @example\n * ```javascript\n * let jump = pxene.controls.map(\"jump\", \"space\");\n * jump.down(); // true or false depending on whether the spacebar is down\n * pxene.controls.map(\"jump\", \"esc\");\n * jump.isDown(); // true if either space or esc are down \n * jump.lastDown(); // most recent time either space or esc were pressed down\n * jump.LastUp(); // most recent time either space or esc were released\n * jump.unmap(\"esc\"); // now jump only pays attention to spacebar\n *\n * // The controls module keeps track of your control mappings, so you don't\n * // have to worry about losing them. Once you've created the \"jump\" label\n * // above you can always look it up later:\n * let jump = pxene.controls.lookupMap(\"jump\");\n * ```\n * @param {String} label the label for the mapping\n * @return KeyMap object\n */\nexport default function KeyMap(label) {\n\tlabel = label.toLowerCase();\n\tthis.label = label;\n\tthis.keys = [];\n\tthis.checkedDown = 0;\n\tthis.checkedUp = 0;\n\treturn Object.seal(this);\n}\n\nKeyMap.prototype.lastDown = function lastDown() {\n\treturn this.keys.reduce((p, c) => p = (p > c.lastDown?p:c.lastDown), 0);\n}\n\nKeyMap.prototype.lastUp = function lastUp() {\n\treturn this.keys.reduce((p, c) => p = (p > c.lastDown?p:c.lastDown), 0);\n}\n\nKeyMap.prototype.isDown = function isDown() {\n\treturn this.keys.reduce((p, c) => p = p || c.down, false);\n}\n\nKeyMap.prototype.onceDown = function onceDown() {\n\tif(this.lastUp() >= this.checkedDown && this.isDown()) {\n\t\tthis.checkedDown = Date.now();\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nKeyMap.prototype.onceUp = function onceUp() {\n\tif(this.lastDown() >= this.checkedUp && !this.isDown()) {\n\t\tthis.checkedUp = Date.now();\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/controls/KeyMap.js\n// module id = 21\n// module chunks = 0","\"use strict\";\nimport * as assets from \"../pxene.assets\";\n/**\n * @module pxene.graphics.Sprite\n *\n * Contains the Sprite prototype, as well as the internally managed sprite cache.\n */\n/** a cache of already processed Sprites **/\nlet cache = [];\n\n/**\n * An image subdivided into individual cells suitable for character animations. The\n * Sprite object manages data related to the location of individual animations, and\n * drawing of individual cells to an external canvas.\n */\nexport default function Sprite(frameCount, frameWidth, frameHeight, animations) {\n\tthis.frameCount = frameCount;\n\tthis.frameWidth = frameWidth;\n\tthis.frameHeight = frameHeight;\n\tthis.animations = animations;\n\tthis.context = undefined;\n\tthis.flippedContext = undefined;\n\tthis.ready = false;\n\t// below calculated during generateComposite\n\tthis.width = 0; \n\tthis.height = 0;\n\tthis.rows = 0;\n\tthis.columns = 0;\n\treturn Object.seal(this);\n}\n\n/**\n * Initializes the sprite with an image, copying it to the sprite's internal\n * canvas.\n * @param {Image} image a loaded Image element\n * @param {bool} flipped whether to generate a horizontally flipped version (default: true)\n */\nSprite.prototype.init = function init(image, flipped = true) {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.width = image.width;\n\tcanvas.height = this.height = image.height;\n\tthis.columns = canvas.width / this.frameWidth;\n\tthis.rows = canvas.height / this.frameHeight;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.drawImage(image, 0, 0);\n\tthis.context = context;\n\tif(flipped) this.generateFlipped();\n\tthis.ready = true;\n}\n\n\n/**\n * Generates a horizontally flipped version of the sprite with all the cells\n * at the same indexes. Normally run during {@link init} but can be called\n * manually if init was instructed not to create the flipped version.\n */\nSprite.prototype.generateFlipped = function generateFlipped() {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.width;\n\tcanvas.height = this.height;\n\tlet context = canvas.getContext(\"2d\");\n\tlet row, col, sx, sy, dx, dy;\n\tlet rows = this.rows;\n\tlet cols = this.cols;\n\tlet w = this.frameWidth;\n\tlet h = this.frameHeight;\n\n\tcontext.scale(-1, 1);\n\tfor(row = 0, rows = this.rows; row < rows; ++row) {\n\t\tfor(col = 0, cols = this.columns; col < cols; ++col) {\n\t\t\tsx = col * w;\n\t\t\tdx = sx; //((cols - col) * w) - w;\n\t\t\tsy = dy = row * h;\n\t\t\tcontext.drawImage(this.context.canvas, sx, sy, w, h, -sx-w, dy, w, h);\n\t\t}\n\t}\n\tcontext.setTransform(1, 0, 0, 1, 0, 0);\n\tthis.flippedContext = context;\n}\n\n/**\n * Draws a sprite frame from a given animation set, or the default animation\n * if the specified animation is incorrect.\n * @param {CanvasRenderingContext2D} dest the destination context\n * @param {string} name the name of the animation to draw\n * @param {int} frame the frame number to draw\n * @param {vec2} pos the top left corner from which to start drawing\n * @param {bool} flip horizontal flip toggle (to reverse facing of sprite)\n */\nSprite.prototype.draw = function draw(dest, name, frame, pos, flipped = false) {\n\tlet animation = (\n\t\t\tthis.animations[name]?\n\t\t\tthis.animations[name]:\n\t\t\tthis.animations.default);\n\tlet frameNum = animation.startFrame + (frame % animation.length);\n\tlet {frameWidth, frameHeight} = this;\n\tlet canvas = flipped?this.flippedContext.canvas:this.context.canvas; \n\tdest.drawImage(\n\t\tcanvas,\n\t\tgetX(this, frameNum), getY(this, frameNum),\n\t\tframeWidth, frameHeight,\n\t\tpos[0], pos[1], \n\t\tframeWidth, frameHeight);\n}\n\n/**\n * Figures out the x offset for a frame based on the frame number and the sprite's parameters.\n */\nfunction getX(sprite, frameNum) {\n\treturn (frameNum % sprite.columns) * sprite.frameWidth;\n}\n\n/**\n * Figures out the x offset for a frame based on the frame number and the sprite's parameters.\n */\nfunction getY(sprite, frameNum) {\n\treturn Math.floor(frameNum / sprite.columns) * sprite.frameHeight;\n}\n\n/**\n * Create a new Sprite from an imported AsepriteAtlas. Returns a promise\n * which resolves with a sprite once it's ready to use.\n *\n * @param {string} uri a URI for an atlas JSON file\n * @return {Promise}\n */\nSprite.fromAsepriteAtlas = function fromAsepriteAtlas(uri) {\n\treturn new Promise((resolve) => {\n\t\tif(cache[uri] !== undefined && cache[uri] instanceof Sprite) {\n\t\t\tresolve(cache[uri]);\n\t\t}\n\t\telse {\n\t\t\tconsole.log(assets);\n\t\t\tassets.requestAsset(uri).then((asset) => {\n\t\t\t\tlet aspr = asset.content;\n\t\t\t\tlet animations = {\n\t\t\t\t\tdefault:{\n\t\t\t\t\tlabel:\"default\",\n\t\t\t\t\tstartFrame:0,\n\t\t\t\t\tlength:1\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(aspr.meta.frameTags) aspr.meta.frameTags.forEach((anim) => {\n\t\t\t\t\tanimations[anim.name.toLowerCase()] = {\n\t\t\t\t\t\tlabel:anim.name.toLowerCase(),\n\t\t\t\t\t\tstartFrame:anim.from,\n\t\t\t\t\t\tlength:(anim.to - anim.from) + 1\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tassets.requestAsset(aspr.meta.image).then((image) => {\n\t\t\t\t\tlet sprite = new Sprite(\n\t\t\t\t\t\taspr.frames.length,\n\t\t\t\t\t\taspr.frames[0].frame.w,\n\t\t\t\t\t\taspr.frames[0].frame.h,\n\t\t\t\t\t\tanimations\n\t\t\t\t\t);\n\t\t\t\t\tsprite.init(image.content);\n\t\t\t\t\tcache[uri] = sprite;\n\t\t\t\t\tresolve(sprite);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/Sprite.js\n// module id = 23\n// module chunks = 0","/**\n * @module pxene.assets.mimeTypes\n * Manages the collection of mime type handlers used by the {@link pxene.assets} module to process\n * fetched assets.\n */\nconst mimeHandlers = {\n\t\"default\":(response) => new Promise(resolve => response.blob().then(blob => resolve(blob)))\n};\n\n/**\n * Adds a specialized handler for a given mime type. Can be used as a plugin system or to handle\n * specialized asset types. See {@link mimeTimeHandler} for information about the callback.\n *\n * @Example\n * ```javascript\n * addMimeHandler(\"some-type/subtype\", fn(originalUrl, response, resolve) {\n*   res.text().then(text => resolve(text, originalUrl, type));\n * });\n * @param {string} mimeType\n * @param {mimeTypeHandler} cb callback\n */\nexport function addHandler(mimeType, cb) {\n\tif(mimeHandlers[mimeType] === undefined) mimeHandlers[mimeType] = cb;\n\telse throw new Error(\"tried to add a mimeType but there's already a handler for it\");\n}\n\n/**\n * Looks up a mime type handler, returning the default handler if none is found.\n */\nexport function getHandler(mimeType) {\n\tif(typeof mimeHandlers[mimeType] === \"function\") return mimeHandlers[mimeType];\n\telse return mimeHandlers.default;\n}\n\n/**\n * A mime type handler callback function. This is a sort of middleware that does some preprocessing\n * on certain asset types before passing them on to the storage system.\n * @callback mimeTypeHandler\n * @param {Response} the Response object returned from a fetch()\n * @return {Promise} which resolves() with the final form of the asset to be stored\n */\n\n/**\n * A mime handler for image types.\n */\nfunction mimeTypeHandlerImages(response) {\n\treturn new Promise((resolve) => {\n\t\tresponse.blob().then((blob) => {\n\t\t\tlet img = document.createElement(\"img\");\n\t\t\timg.addEventListener(\"load\", () => resolve(img));\n\t\t\timg.src = URL.createObjectURL(blob);\n\t\t});\n\t});\n}\n\n/**\n * A mime type handler for plain text.\n */\nfunction mimeTypeHandlerText(response) {\n\treturn new Promise((resolve) => response.text().then(text => resolve(text)));\n}\n\n/**\n * A mime type handler for json objects.\n */\nfunction mimeTypeHandlerJSON(response) {\n\treturn new Promise((resolve) => response.json().then(json => resolve(json)));\n}\n\naddHandler(\"image/jpeg\", mimeTypeHandlerImages);\naddHandler(\"image/gif\",  mimeTypeHandlerImages);\naddHandler(\"image/png\",  mimeTypeHandlerImages);\naddHandler(\"text/html\", mimeTypeHandlerText);\naddHandler(\"text/plain\", mimeTypeHandlerText);\naddHandler(\"application/json\", mimeTypeHandlerJSON);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.assets.mimeTypes.js\n// module id = 24\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.graphics.CompositeSprite\n *\n * Contains the CompositeSprite prototype.\n */\nexport default function CompositeSprite() {\n\treturn this;\n}\n\n/**\n * Generates a composite sprite from the image list the sprite was loaded with.\n */\nCompositeSprite.prototype.init = function init(sprites) {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.width = sprites[0].width;\n\tcanvas.height = this.height = sprites[0].height;\n\tthis.columns = canvas.width / this.frameWidth;\n\tthis.rows = canvas.height / this.frameHeight;\n\tlet context = canvas.getContext(\"2d\");\n\tfor(let i = 0, len = sprites.length; i < len; ++i) {\n\t\tcontext.drawImage(sprites[i], 0, 0);\n\t}\n\tthis.ready = true;\n\tthis.spriteCanvas = canvas;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/CompositeSprite.js\n// module id = 25\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.graphics.Atlas\n *\n * Contains the Atlas prototype.\n */\nimport * as assets from \"../pxene.assets\";\nimport {vectors} from \"@nphyx/vectrix\";\n\n/** a cache of already processed Atlases **/\nconst cache = [];\n/**\n * Much like a sprite, an atlas is a collection of smaller images on a single sheet.\n * An atlas may have non-uniform cell sizes, and is more suitable for static graphics.\n *\n * @todo Implement me\n */\nexport default function Atlas(layers, animations, slices) {\n\tthis.layers = layers;\n\tthis.animations = animations;\n\tthis.slices = slices;\n\tthis.source = undefined;\n\tthis.context = undefined;\n\tthis.flippedContext = undefined;\n\tthis.ready = false;\n\treturn Object.seal(this);\n}\n\n/**\n * Initializes the sprite with an image, copying it to the sprite's internal\n * canvas.\n * @param {Image} image a loaded Image element\n * @param {bool} flipped whether to generate a horizontally flipped version (default: true)\n */\nAtlas.prototype.init = function init(image, flipped = true) {\n\tthis.source = image;\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = image.width;\n\tcanvas.height = image.height;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.drawImage(image, 0, 0);\n\tthis.context = context;\n\tif(flipped) this.generateFlipped();\n\tthis.ready = true;\n}\n\n/**\n * Generates a horizontally flipped version of the sprite with all the cells\n * at the same indexes. Normally run during {@link init} but can be called\n * manually if init was instructed not to create the flipped version.\n */\nAtlas.prototype.generateFlipped = function generateFlipped() {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.context.canvas.width;\n\tcanvas.height = this.context.canvas.height;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.scale(-1, 1);\n\tlet i, len, layer;\n\t// let's not create functions within loops\n\tlet eachSlice = (key) => {\n\t\tlet slice = this.slices[key];\t\n\t\tlet source = vectors.vec2(slice.pos);\n\t\tvectors.mut_plus(source, layer.frames[i].pos);\n\t\tcontext.drawImage(\n\t\t\tthis.context.canvas,\n\t\t\tsource[0], source[1],\n\t\t\tslice.dims[0], slice.dims[1],\n\t\t\t-source[0]-slice.dims[0], source[1],\n\t\t\tslice.dims[0], slice.dims[1]\n\t\t);\n\n\t}\n\n\tlet eachLayer = (key) => {\n\t\tlayer = this.layers[key];\n\t\tfor(i = 0, len = layer.frames.length; i < len; ++i) {\n\t\t\tObject.keys(this.slices).filter(key => key !== \"default\").forEach(eachSlice);\n\t\t}\n\t}\n\n\tObject.keys(this.layers).forEach(eachLayer); \n\n\tcontext.setTransform(1, 0, 0, 1, 0, 0);\n\tthis.flippedContext = context;\n}\n\n/**\n * Draw a slice from the atlas to the given context.\n * @param {CanvasContext2d} dest the destination context\n * @param {string} name the name of the slice to draw\n * @param {vec2} pos the top left corner to start drawing at\n * @param {bool} flipped horizontal flip toggle (to reverse facing of image)\n * @param {Array} layers list of layers by name to draw\n */\nAtlas.prototype.draw = function(dest, label, pos, flipped = false, layers = undefined) {\n\tlet slice = (\n\t\t\tthis.slices[label]?\n\t\t\tthis.slices[label]:\n\t\t\tthis.slices.default);\n\tlet canvas = flipped?this.flippedContext.canvas:this.context.canvas;\n\n\t// draw all layers if a layer list isn't specified\n\tif(layers === undefined) layers = Object.keys(this.layers);\n\tlayers.forEach(layer => {\n\t\tlet source = vectors.vec2(slice.pos);\n\t\t//vectors.mut_plus(source, this.layers[layer].pos);\n\t\tvectors.mut_plus(source, this.layers[layer].frames[0].pos);\n\t\tdest.drawImage(\n\t\t\tcanvas,\n\t\t\tsource[0], source[1],\n\t\t\tslice.dims[0], slice.dims[1],\n\t\t\tpos[0], pos[1],\n\t\t\tslice.dims[0], slice.dims[1]\n\t\t);\n\t});\n}\n\n/**\n * Draws a sprite frame from a given animation set, or the default animation\n * if the specified animation is incorrect.\n * @param {CanvasRenderingContext2D} dest the destination context\n * @param {string} label the name of the animation to draw\n * @param {vec2} pos the top left corner from which to start drawing\n * @param {int} frame the frame number to draw\n * @param {bool} flip horizontal flip toggle (to reverse facing of sprite)\n * @param {Array} layers list of layers by name to draw\n */\nAtlas.prototype.animate = function animate(dest, label, pos, frame, flipped = false, layers = undefined) {\n\t// draw all layers if a layer list isn't specified\n\tif(layers === undefined) layers = Object.keys(this.layers);\n\n\tlet animation = (\n\t\t\tthis.animations[label]?\n\t\t\tthis.animations[label]:\n\t\t\tthis.animations.default);\n\n\tlet frameNum = animation.start + (frame % animation.length);\n\tlet canvas = flipped?this.flippedContext.canvas:this.context.canvas; \n\tlayers.forEach(layer => {\n\t\tlet frame = this.layers[layer].frames[frameNum];\n\t\tdest.drawImage(\n\t\t\tcanvas,\n\t\t\tframe.pos[0], frame.pos[1],\n\t\t\tframe.dims[0], frame.dims[1],\n\t\t\tpos[0], pos[1], \n\t\t\tframe.dims[0], frame.dims[1])\n\t});\n}\n\n/**\n * Creates a new Atlas by combining into a single layer the listed layers, \n * in the order supplied.\n * @param {Array} layers list of layers by label\n * @return {Atlas}\n *\n * @todo implement me\n */\nAtlas.prototype.prebake = function prebake() {\n\tthrow new Error(\"unimplemented\");\n}\n\n/**\n * Create a new Atlas from an imported AsepriteAtlas. Returns a promise\n * which resolves with an atlas once it's ready to use. Accepts a callback for\n * processing the data property on layers and slices, which defaults to treating\n * it as a string.\n *\n * @todo a gulp module that exports with the correct options to make this work\n *\n * @param {string} uri a URI for an atlas JSON file\n * @param {function} dataCallback custom function for transforming the \"data\" parameter\n * @return {Promise}\n */\nAtlas.fromAsepriteAtlas = function fromAsepriteAtlas(uri, dataCallback) {\n\tdataCallback = dataCallback || function(a) {return a};\n\t/**\n\t * uniq used below to filter unique tags, due to aseprite bug\n\t * which creates duplicate entries\n\t */\n\t//const uniq = (v, i, self) => self.indexOf(v) === i;\n\treturn new Promise((resolve) => {\n\t\tif(cache[uri] !== undefined && cache[uri] instanceof Atlas) {\n\t\t\tresolve(cache[uri]);\n\t\t}\n\t\telse {\n\t\t\tconsole.log(assets);\n\t\t\tassets.requestAsset(uri).then((asset) => {\n\t\t\t\tlet aspr = asset.content;\n\t\t\t\tlet width = aspr.meta.size.w;\n\t\t\t\tlet height = aspr.meta.size.h;\n\t\t\t\tlet numLayers = aspr.meta.layers.length;\n\t\t\t\tlet numFrames = aspr.frames.length / numLayers;\n\t\t\t\tlet layerHeight = height / numLayers;\n\n\t\t\t\t// Hash of layers by name to be added to the Atlas\n\t\t\t\tlet layers = {}, layer;\n\t\t\t\tlet layerNames = [];\n\n\t\t\t\taspr.meta.layers.forEach((l, i) => {\n\t\t\t\t\tlayerNames.push(l.name);\n\t\t\t\t\tif(layers[l.name] === undefined) {\n\t\t\t\t\t\tlayer = {\n\t\t\t\t\t\t\tlabel:l.name.trim(),\n\t\t\t\t\t\t\tdata:dataCallback(l.data?l.data:\"\"),\n\t\t\t\t\t\t\topacity:l.opacity,\n\t\t\t\t\t\t\tblendMode:l.blendMode,\n\t\t\t\t\t\t\tpos:vectors.vec2(0, i * layerHeight),\n\t\t\t\t\t\t\tframes:[]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlayers[layer.label] = Object.freeze(layer);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Hash of animations by name to be added to the Atlas\n\t\t\t\tlet slices = {\n\t\t\t\t\tdefault:{\n\t\t\t\t\t\tlabel:\"default\",\n\t\t\t\t\t\tdata:dataCallback(\"\"),\n\t\t\t\t\t\tpos:vectors.vec2(0, 0),\n\t\t\t\t\t\tdims:vectors.vec2(width, height)\n\t\t\t\t\t}\n\t\t\t\t}, slice;\n\n\t\t\t\taspr.meta.slices.forEach(s => {\n\t\t\t\t\t// as of v1.2.2, aseprite duplicates frame tags once per\n\t\t\t\t\t// layer but the data is always the same\n\t\t\t\t\tif(slices[s.name] === undefined) {\n\t\t\t\t\t\tslice = {\n\t\t\t\t\t\t\tlabel:s.name.trim(),\n\t\t\t\t\t\t\tdata:dataCallback(s.data?s.data:\"\"),\n\t\t\t\t\t\t\tpos:vectors.vec2(s.keys[0].bounds.x, s.keys[0].bounds.y),\n\t\t\t\t\t\t\tdims:vectors.vec2(s.keys[0].bounds.w, s.keys[0].bounds.h)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tslices[slice.label] = Object.freeze(slice);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Hash of animations by name to be added to the Atlas\n\t\t\t\tlet animations = {}, animation;\n\n\t\t\t\taspr.meta.frameTags.forEach(f => {\n\t\t\t\t\t// as of v1.2.2, aseprite duplicates frame tags once per\n\t\t\t\t\t// layer but the data is always the same\n\t\t\t\t\tif(animations[f.name] === undefined) {\n\t\t\t\t\t\t animation = {\n\t\t\t\t\t\t\tlabel:f.name.trim(),\n\t\t\t\t\t\t\tstart:f.from,\n\t\t\t\t\t\t\tlength:(f.to - f.from) + 1\n\t\t\t\t\t\t}\n\t\t\t\t\t\tanimations[animation.label] = Object.freeze(animation);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\taspr.frames.forEach((f, i) => {\n\t\t\t\t\tlet layer = layers[layerNames[~~(i / numFrames)]];\n\t\t\t\t\tlet frame = {\n\t\t\t\t\t\t//label:f.name.trim(),\n\t\t\t\t\t\tpos:vectors.vec2(f.frame.x, f.frame.y),\n\t\t\t\t\t\tdims:vectors.vec2(f.frame.w, f.frame.h)\n\t\t\t\t\t}\n\t\t\t\t\tlayer.frames.push(Object.freeze(frame));\n\t\t\t\t});\n\n\t\t\t\tassets.requestAsset(aspr.meta.image).then((image) => {\n\t\t\t\t\tlet atlas = new Atlas(\n\t\t\t\t\t\tObject.seal(layers),\n\t\t\t\t\t\tObject.seal(animations),\n\t\t\t\t\t\tObject.seal(slices)\n\t\t\t\t\t);\n\t\t\t\t\tatlas.init(image.content);\n\t\t\t\t\tcache[uri] = atlas;\n\t\t\t\t\tresolve(atlas);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/Atlas.js\n// module id = 26\n// module chunks = 0","/**\nMaster module for vectrix. See individual modules for documentation.\n@module vectrix\n */\n\"use strict\";\nimport * as _v from \"./vectrix.vectors\";\nimport * as _m from \"./vectrix.matrices\";\nimport * as _q from \"./vectrix.quaternions\";\n\nexport const vectors = _v;\nexport const matrices = _m;\nexport const quaternions = _q;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.js\n// module id = 27\n// module chunks = 0","\"use strict\";\n/**\nThe quaternions module focuses on quaternion operations that are useful for performing 3-dimensional rotations. Quaternions inherit from [[vectrix.vectors#vec4|4d-vectors]], which in turn inherit from [[vectrix.matrices|matrices]], so most of the operations supported by vec4 and generic matrices are supported by quats (TODO: remove the ones that don't make sense for quaternions)\n\nNote that in the examples quaternions outputs are displayed as they would be by quaternion.toString(), which rounds to the nearest 2 decimal points for brevity. Actual values will be accurate to at least 1.0e-7 (the minimum accuracy required by the unit tests).\n\nVectrix quaternions store their scalar component in the last place, so all quaternion functions that accept an array as a parameter expect it as [x,y,z,w] rather than [w,x,y,z]. This for consistency with the vectors module.\n\n```javascript\nconst quaternions = require(\"vectrix.quaternions\");\nlet q = quaternion.create([0.4, 1.0, 2.1, 1.0]); // quaternion(0.40, 1.00, 2.10, 1.0);\n```\nQuaternion values are aliased to x, y, z, and w, and can be accessed in any combination\nas with GLSL:\n```javascript\nq.xy; // [0.4, 1.0]\nq.zyx; // [2.1, 1.0, 0.4]\nq.zw; // [2.1, 1.0]\n// etc\n```\n@module vectrix/quaternions\n*/\n\nimport * as vectors from \"./vectrix.vectors\";\nimport * as matrices from \"./vectrix.matrices\";\nconst vecNrm = vectors.normalize;\nconst {abs, sin, cos, acos, sqrt} = Math;\n\n/**\n * @private\n */\nlet aliasCombos = [];\n\t\n[\"xyzw\", \"xyz\", \"xzw\", \"xyw\", \"yzw\", \"xy\", \"xw\", \"xz\", \"yz\", \"yw\", \"zw\"].forEach((props) => {\n\tpermutations(props.split(\"\")).forEach((combo) => {\n\t\taliasCombos.push(combo);\n\t});\n});\n\n/**\n * Util function to help generate permutations of property alias sets\n * @private\n */\nfunction permutations(list) {\n\t// Empty list has one permutation\n\tif (list.length === 0) return [[]];\n\tvar result = [];\n\tfor (var i=0; i<list.length; i++) {\n\t\tvar copy = list.slice();\n\t\tvar head = copy.splice(i, 1);\n\t\tvar rest = permutations(copy);\n\t\tfor (var j=0; j<rest.length; j++) {\n\t\t\tvar next = head.concat(rest[j]);\n\t\t\tresult.push(next);\n\t\t}\n\t}\n\treturn result;\n}\n/**\n * @private\n */\nfunction getAliasCombo(combo) {\n\treturn combo.map((p) => this[p]);\n}\n\n/**\n * Adds x,y,z,w aliases to a quaternion.\n * @private\n */\nfunction defineAliases(q) {\n\tObject.defineProperties(q, {\n\t\tx:{get:function() {return this[0]}},\n\t\ty:{get:function() {return this[1]}},\n\t\tz:{get:function() {return this[2]}},\n\t\tw:{get:function() {return this[3]}}\n\t});\n\tfor(let i = 0, len = aliasCombos.length; i < len; ++i) {\n\t\tObject.defineProperty(q, aliasCombos[i].join(\"\"), {\n\t\t\tget:getAliasCombo.bind(q, aliasCombos[i])\n\t\t});\n\t}\n}\n\n/**\n * Create a string representation of a quaternion.\n * @example\n * // functional style\n * quaternions.quatToString(quaternions.create()); // quaternion(0.00, 0.00, 0.00, 1.00)\n * // OO style\n * quaternions.create().toString(); // quaternion(0.00, 0.00, 0.00, 1.00)\n * @param {quaternion} a quaternion to stringify\n * @return {string}\n */\nexport function toString(a) {\n\tlet strings = matrices.toArray(a).map((cur) => cur.toFixed(2));\n\treturn \"quaternion(\"+strings.join(\", \")+\")\";\n}\n\n/**\n * Performs a spherical linear interpolation between a and b.\n * @example\n * let q1 = quaternions.create([0.3,-0.6,-0.4,0.2]);\n * let q2 = quaternions.create([0.6,0.8,0.5,0.7]);\n * slerp(q1, q2, 0.4); // quaternion(0.75, 0.01, -0.02, 0.72);\n * @param {quaternion|array(4)} a origin quaternion\n * @param {quaternion|array(4)} b destination quaternion\n * @param {float} t interval [0...1]\n * @return {quaternion}\n */ \nexport const slerp = (function() {\n\tlet ax = 0.0, bx = 0.0, ay = 0.0, by = 0.0,\n\t\t  az = 0.0, bz = 0.0, aw = 0.0, bw = 0.0,\n\t\t\tcosHalfTheta = 0.0, sinHalfTheta = 0.0,\n\t\t\thalfTheta = 0.0,\n\t\t\tratioA = 0.0, ratioB = 0.0;\n\treturn function slerp(a, b, t, out = undefined) {\n\t\tax = a[0];\n\t\tbx = b[0];\n\t\tay = a[1];\n\t\tby = b[1];\n\t\taz = a[2];\n\t\tbz = b[2];\n\t\taw = a[3];\n\t\tbw = b[3];\n\t\tcosHalfTheta = ax * bx + ay * by + az * bz + aw * bw;\n\t\tout = out||create();\n\t\tif (abs(cosHalfTheta) >= 1.0) {\n\t\t\tout[0] = ax;\n\t\t\tout[1] = ay;\n\t\t\tout[2] = az;\n\t\t\tout[3] = aw;\n\t\t\treturn out;\n\t\t}\n\t\thalfTheta = acos(cosHalfTheta);\n\t\tsinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\t\tratioA = sin((1 - t) * halfTheta) / sinHalfTheta;\n\t\tratioB = sin(t * halfTheta) / sinHalfTheta;\n\n\t\tout[0] = ax * ratioA + bx * ratioB;\n\t\tout[1] = ay * ratioA + by * ratioB;\n\t\tout[2] = az * ratioA + bz * ratioB;\n\t\tout[3] = aw * ratioA + bw * ratioB;\n\t\treturn out;\n\t}\n})();\n\n/**\n * Normalize a quaternion.\n * @example\n * // functional style\n * quaternions.normalize([4.0, 10.0, 3.0, 1.0]).toString(); // quaternion(0.36, 0.89, 0.27, 0.09);\n * // OO style\n * quaternions.create([4.0, 10.0, 3.0, 1.0]).normalize(); // quaternion(0.36, 0.89, 0.27, 0.09);\n * @param {quaternion|array(4)} a quaternion to normalize\n * @param {quaternion} out (optional) out parameter\n * @return {quaternion}\n */\nexport function normalize(a, out = undefined) {\n\t// this function only exists to override the out parameter, so pass down\n\t// to the vector version of normalize afterward\n\tout = out||create();\n\tlet out2 = vecNrm(a, out);\n\treturn out2;\n}\n\n/**\n * Finds the inverse of a quaternion by normalizing then inverting the quat. Normalization\n * can be skipped by setting normalize = false if the quat is known to be normal already.\n * Be careful, since floating point errors will often de-normalize your quats!\n * @example\n * // functional\n * quaternions.invert([4.0,7.0,5.0,1.0]); // quaternion(-0.36, -0.89, -0.27, 0.09)\n * // OO\n * quaternions.create([4.0,7.0,5.0,1.0]).invert(); // quaternion(-0.36, -0.89, -0.27, 0.09)\n * @param {quaternion|array(4)} a the input quaternion\n * @param {quaternion} (optional) out out parameter\n * @param {bool} norm (default true) whether to normalize the quaternion before inverting\n * @return {quaternion}\n */\nexport const invert = (function() {\n\treturn function invert(a, norm = true, out = undefined) {\n\t\tout = out||create();\n\t\tif(norm) normalize(a, out);\n\t\telse out.set(a);\n\t\tout[0] = -out[0];\n\t\tout[1] = -out[1];\n\t\tout[2] = -out[2];\n\t\treturn out;\n\t}\n})();\n\n/**\n * Factory for creating quaternions. Quaternions are represented as 4 member arrays\n * of (x,y,z,w) where x,y,z are the vector component and w is the scalar component.\n * @example\n * quaternions.create([0.4, 32.1, 9.0, 1.0]); // quaternion(0.40, 32.10, 9.00, 1.00)\n * @param {array(4)} vals [x,y,z,w] (default [0,0,0,1] = identity quaternion)\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n\n * @return {quaternion}\n */\nexport function create() {\n\tlet identity = [0,0,0,1];\n\tlet params = Array.prototype.slice.apply(arguments), len = params.length;\n\tif(len === 0) { // just create an identity quaternion \n\t\tparams = identity;\n\t}\n\telse {\n\t\tif(params[len-1] instanceof ArrayBuffer) { // supplied buffer, no offset\n\t\t\tif(len === 1) params = identity.concat(params).concat([0]);\n\t\t\telse params = params.concat([0]);\n\t\t}\n\t\telse if(params[len-2] instanceof ArrayBuffer) { // supplied buffer + offset\n\t\t\tif(len === 2) params = identity.concat(params);\n\t\t}\n\t}\n\tlet q = vectors.create.apply(null, [4].concat(params));\n\treturn q;\n}\n\n/**\n * Wraps a quaternion with aliases and quaternion functions as methods.\n * @param {quaternion} q quaternion to wrap\n * @return {quaternion} wrapped quaternion\n */\nexport function wrap(q) {\n\tdefineAliases(q);\n\tmatrices.wrap(q);\n\tq.slerp = asMethod(slerp, q);\n\tq.normalize = asMethod(normalize, q);\n\tq.invert = asMethod(invert, q);\n\tq.toString = toString.bind(null, q);\n\tq.times = asMethod(vectors.times, q);\n\tq.clamp = asMethod(vectors.clamp, q);\n\tq.normalize = asMethod(vectors.normalize, q);\n\tq.mut_normalize = asMethod(vectors.mut_normalize, q);\n\tq.mut_times = asMethod(vectors.mut_times, q);\n\tq.mut_clamp = asMethod(vectors.mut_clamp, q);\n\tq.mut_copy = asMethod(vectors.mut_copy, q);\n\treturn q;\n}\n\n/**\n * Turns a quaternion function into a method by wrapping its result.\n * @param {function} method\n * @param {quaternion} q \n * @private\n */\nfunction asMethod(method, q) {\n\treturn function() {\n\t\tlet res = method.apply(null, [q].concat(Array.prototype.slice.apply(arguments)));\n\t\treturn wrap(create(res));\n\t}\n}\n\n/**\n * Creates an identity quaternion [0,0,0,1].\n * @example \n * quaternions.create.identity(); // quaternion(0.00, 0.00, 0.00, 1.00)\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {quaternion}\n */\ncreate.identity = function() {\n\treturn create();\n}\n\n/**\n * Creates a quaternion from Euler angles (in radians).\n * @example\n * quaternions.create.fromEulerAngles([75*Math.PI/180, 65*Math.PI/180, 15*Math.PI/180]); // quaternion(0.412, 0.56, 0.36, 0.62)\n * @param {array(3)} a [yaw,pitch,roll] in radians \n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {quaternion}\n */\ncreate.fromEulerAngles = (function() {\n\tlet yawh = 0.0, pitchh = 0.0, rollh = 0.0, c1 = 0.0, s1 = 0.0,\n\t\tc2 = 0.0, s2 = 0.0, c3 = 0.0, s3 = 0.0, c1c2 = 0.0, s1s2 = 0.0;\n\treturn function(a, buffer = undefined, offset = undefined) {\n\t\tlet out = create(buffer, offset);\n\t\tyawh = a[0]/2;\n\t\tpitchh = a[1]/2;\n\t\trollh = a[2]/2;\n\t\tc1 = cos(yawh);\n\t\ts1 = sin(yawh);\n\t\tc2 = cos(pitchh);\n\t\ts2 = sin(pitchh);\n\t\tc3 = cos(rollh);\n\t\ts3 = sin(rollh);\n\t\tc1c2 = c1*c2;\n\t\ts1s2 = s1*s2;\n\t\tout[0] = c1c2*s3 + s1s2*c3;\n\t\tout[1] = s1*c2*c3 + c1*s2*s3;\n\t\tout[2] = c1*s2*c3 - s1*c2*s3;\n\t\tout[3] = c1c2*c3 - s1s2*s3;\n\t\treturn out;\n\t}\n})();\n\n/**\n * Creates a quaternion from an axis-angle rotation.\n * @example\n * quaternions.create.fromAxisAngle([1,0,0],90*Math.PI/180); // quaternion(0.70, 0.00, 0.00, 0.70)\n * @param {array(3)} axis of rotation\n * @param {float} angle of rotation as radian\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {quaternion}\n */\ncreate.fromAxisAngle = (function() {\n\tlet a = 0.0, angleh = 0.0;\n\treturn function fromAxisAngle(axis, angle, buffer = undefined, offset = undefined) {\n\t\tlet out = create(buffer, offset);\n\t\ta = vecNrm(axis);\n\t\tangleh = angle/2;\n\t\tout[0] = a[0] * sin(angleh);\n\t\tout[1] = a[1] * sin(angleh);\n\t\tout[2] = a[2] * sin(angleh);\n\t\tout[3] = cos(angleh);\n\t\treturn out;\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.quaternions.js\n// module id = 28\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.graphics.BitmapFont\n *\n * Contains the BitmapFont prototype.\n */\n\n/**\n * A bitmap font is a fixed-size font contained in a single bitmap image, \n * similar to a Sprite or Atlas. The BitmapFont object manages loading the font\n * and writing text to a canvas using the font.\n * @todo implement me\n */\nexport default function BitmapFont() {\n\treturn this;\n}\n\n/**\n * Initializes the font with an image.\n * @param {Image} image a loaded Image element\n */\nBitmapFont.prototype.init = function(image) {\n}\n\n/**\n * Draws text to canvas.\n * @param {string} text text contents to write\n * @param {CanvasContext2d} target canvas context to write to\n * @param {int} sx start x-coordinate\n * @param {int} sy start y-coordinate\n * @param {int} wl wrap length in pixels\n * @param {int} lh space between lines in pixels (optional, default 1)\n * @param {int}\tls letter spacing in pixels (optional, default 1) \n */\nBitmapFont.prototype.write = function(text, target, sx, sy, lw, ls = 1) {\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/BitmapFont.js\n// module id = 29\n// module chunks = 0","\"use strict\";\nimport * as util from \"./pxene.display.util.js\";\nimport * as buffers from \"./pxene.display.buffers\";\nimport * as events from \"./pxene.events\";\nimport * as ui from \"./pxene.display.ui\";\nexport {buffers, ui, util};\nimport * as constants from \"./pxene.constants\";\n//import {evenNumber} from \"./pxene.util\";\nlet {min, max} = Math;\nlet AUTO_FULLSCREEN = false;\n\nlet startTime; // time game started\nlet interval = 0;\nlet elapsed = 0;\nlet frameCount = 0; // running total of drawn frames\nlet animating = false; // whether the game is currently running animation loop\nlet container; // display container \nlet fullscreen = false; // whether the game is in fullscreen mode\nlet lastFrame = 0;\nlet frameCallback;\nconst bufferList = [];\nexport const buffersByLabel = {};\nlet compositeBuffer;\n\n/**\n * Round to nearest even number.\n */\nexport function evenNumber(n) {\nreturn n >> 1 << 1;\n}\n\nexport const props = {\n\twidth:0,\n\theight:0,\n\tpixelRatio:1,\n\torientation:0,\n\taspect:0,\n\tminDimension:0,\n\tmaxDimension:0,\n\tevents:new events.Events()\n}\n\nexport const timing = {\n\tget frameCount() {return frameCount},\n\tget startTime() {return startTime},\n\tget lastFrame() {return lastFrame},\n\tget elapsed() {return elapsed},\n\tget interval() {return interval}\n}\n\n/**\n * Using this checks and avoids altering the canvas context state machine if unnecessary,\n * which theoretically saves a little time.\n */\nexport function updateCompositeOperation(ctx, op) {\n\tif(ctx.globalCompositeOperation !== op) ctx.globalCompositeOperation = op;\n}\n\n/**\n * Toggles fullscreen on.\n * Code from Mozilla Developer Network.\n */\nfunction toggleFullScreen() {\n\tif(fullscreen) return;\n\tfullscreen = true;\n  if(!document.fullscreenElement &&    // alternative standard method\n      !document.mozFullScreenElement && \n\t\t\t!document.webkitFullscreenElement && \n\t\t\t!document.msFullscreenElement) {  // current working methods\n    if(document.documentElement.requestFullscreen)\n\t\t\tdocument.documentElement.requestFullscreen();\n    else if (document.documentElement.msRequestFullscreen)\n      document.documentElement.msRequestFullscreen();\n    else if (document.documentElement.mozRequestFullScreen)\n      document.documentElement.mozRequestFullScreen();\n    else if (document.documentElement.webkitRequestFullscreen)\n      document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n\t\tprops.events.fire(\"fullscreen-on\");\n  } \n\telse {\n    if (document.exitFullscreen) document.exitFullscreen();\n    else if (document.msExitFullscreen) document.msExitFullscreen();\n    else if (document.mozCancelFullScreen) document.mozCancelFullScreen();\n    else if (document.webkitExitFullscreen) document.webkitExitFullscreen();\n\t\tprops.events.fire(\"fullscreen-off\");\n  }\n}\n\n/**\n * Turns fullscreen off.\n */\nfunction fullscreenOff(ev) {\n\tev.preventDefault();\n\tif(document.webkitIsFullScreen || \n\t   document.mozIsFullScreen || \n\t\t document.msIsFullScreen) fullscreen = true;\n\telse fullscreen = false;\n\treturn false;\n}\n\n/**\n * Updates screen ratio.\n */\nfunction updateProperties() {\n\tcompositeBuffer.width  = props.width  = evenNumber(container.clientWidth);\n\tcompositeBuffer.height = props.height = evenNumber(container.clientHeight);\n\tprops.orientation = props.width > props.height?0:1;\n\tprops.minDimension = min(props.width, props.height);\n\tprops.maxDimension = max(props.width, props.height);\n\t// @todo review this, it probably needs better handling\n\tbufferList.forEach(buffer => {\n\t\tbuffer.width = ~~(props.width/props.pixelRatio);\n\t\tbuffer.height = ~~(props.height/props.pixelRatio);\n\t});\n\tprops.events.fire(\"resize\");\n}\n\n\n/**\n * Main animation loop.\n */\nfunction animate() {\n\trequestAnimationFrame(animate);\n\ttry {\n\t\tlet now = Date.now();\n\t\t\telapsed = now - lastFrame;\n\t\t\tif(elapsed > interval) {\n\t\t\t\tlastFrame = now - (elapsed % interval);\n\t\t\t\tframeCount++;\n\t\t\t\tframeCallback(buffersByLabel);\n\t\t\t\tbuffers.composite(bufferList, compositeBuffer, props);\n\t\t\t}\n\t\t}\n\tcatch(e) {\n\t\tconsole.error(\"Crappy uncaught error in animation loop is crappy\");\n\t}\n}\n\nfunction initBuffers(bufferDescriptions) {\n\tfor(let i = 0, len = bufferDescriptions.length; i < len; ++i) {\n\t\tlet bufData = bufferDescriptions[i];\n\t\tlet buffer = new buffers.DrawBuffer(bufData.compositeMethod, bufData.scaleMethod);\n\t\tbuffer.id = bufData.label;\n\t\tbufferList.push(buffer);\n\t\tbuffersByLabel[bufData.label] = buffer;\n\t}\n}\n\n/**\n * Initializes game environment.\n */\nexport function init(config) {\n\tprops.pixelRatio = config.pixelRatio || props.pixelRatio;\n\tcontainer = document.querySelector(config.container);\n\tcontainer.classList.add(\"2d\");\n\tcompositeBuffer = new buffers.CompositeBuffer(container);\n\tcontainer.width = compositeBuffer.width  = evenNumber(container.clientWidth);\n\tcontainer.height = compositeBuffer.height = evenNumber(container.clientHeight);\n\tinitBuffers(config.bufferDescriptions);\n\tupdateProperties();\n\tframeCallback = config.frameCallback;\n\twindow.addEventListener(\"resize\", updateProperties);\n\tAUTO_FULLSCREEN = config.fullscreen;\n\tif(AUTO_FULLSCREEN) {\n\t\tcontainer.addEventListener(\"click\", toggleFullScreen);\n\t\tdocument.addEventListener(\"fullscreenchange\", fullscreenOff);\n\t\tdocument.addEventListener(\"mozfullscreenchange\", fullscreenOff);\n\t\tdocument.addEventListener(\"msfullscreenchange\", fullscreenOff);\n\t\tdocument.addEventListener(\"webkitfullscreenchange\", fullscreenOff);\n\t}\n\tstartTime = Date.now();\n\tlastFrame = startTime;\n\tinterval = 1000 / constants.TARGET_FPS;\n\tif(!animating) requestAnimationFrame(animate);\n\tanimating = true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.display.js\n// module id = 30\n// module chunks = 0","\"use strict\";\n\n\n/**\n * Draws a colored circle.\n */\nexport function drawCircle(ctx, x, y, size, fillStyle, lineWidth = 0, strokeStyle = undefined) {\n\tctx.globalCompositeOperation = \"source-over\";\n\tctx.beginPath();\n\tctx.arc(x, y, size, 2 * Math.PI, false);\n\tctx.fillStyle = fillStyle;\n\tctx.fill();\n\tif(strokeStyle) {\n\t\tctx.strokeStyle = strokeStyle;\n\t\tctx.lineWidth = lineWidth;\n\t\tctx.stroke();\n\t}\n\tctx.closePath();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.display.util.js\n// module id = 31\n// module chunks = 0","\"use strict\";\n/**\n * An offscreen draw buffer, which will be drawn to a composite buffer for display\n * onscreen.\n * @param {string} compositeMethod globalCompositeMethod to use when compositing\n * @param {bool} scaleMethod method for scaling (see SCALE_* constants)\n * @param {string} context [2d|webGL]\n * @return {DrawBuffer}\n */\nconst {min} = Math;\nexport const SCALE_STRETCH = 0;\nexport const SCALE_KEEP_ASPECT = 1;\nexport const SCALE_NONE = 2;\nexport const SCALE_CROP = 3;\nexport function DrawBuffer(compositeMethod = \"source-over\", scaleMethod = SCALE_STRETCH, context = \"2d\") {\n\tthis.canvas = document.createElement(\"canvas\");\n\tthis.context = this.canvas.getContext(context);\n\tthis.offsetX = 0;\n\tthis.offsetY = 0;\n\tthis.compositeMethod = compositeMethod;\n\tthis.scaleMethod = scaleMethod;\n\tObject.defineProperties(this, {\n\t\twidth:{get:() => this.canvas.width, set:(v) => this.canvas.width = v},\n\t\theight:{get:() => this.canvas.height, set:(v) => this.canvas.height = v},\n\t});\n\treturn this;\n}\n\n/**\n * A canvas to draw a BufferGroup into.\n * @param {HTMLElement} container the containing element for the canvas\n * @return {CompositeBuffer}\n */\nexport function CompositeBuffer(container) {\n\tthis.canvas = document.createElement(\"canvas\");\n\tthis.context = this.canvas.getContext(\"2d\");\n\tthis.container = container;\n\tthis.container.appendChild(this.canvas);\n\tObject.defineProperties(this, {\n\t\twidth:{get:() => this.canvas.width, set:(v) => this.canvas.width = v},\n\t\theight:{get:() => this.canvas.height, set:(v) => this.canvas.height = v},\n\t});\n\treturn this;\n}\n\nexport const composite = (function() {\n\tlet i, len, sourceBuffer, targetContext;\n\tlet sw, sh, sx, sy, dw, dh, dx, dy;\n\treturn function composite(sourceBuffers, targetBuffer, displayProps) {\n\t\ttargetContext = targetBuffer.context;\n\t\t// if using a pixel ratio, assume it's for pixel art and don't screw it up\n\t\tif(displayProps.pixelRatio !== 1) targetContext.imageSmoothingEnabled = false;\n\t\tfor(i = 0, len = sourceBuffers.length; i < len; ++i) {\n\t\t\tsourceBuffer = sourceBuffers[i];\n\t\t\tif(targetContext.globalCompositeOperation !== sourceBuffer.compositeMethod)\n\t\t\t\ttargetContext.globalCompositeOperation = sourceBuffer.compositeMethod;\n\t\t\tswitch(sourceBuffer.scaleMethod) {\n\t\t\t\tcase SCALE_STRETCH:\n\t\t\t\t\tsx = 0; sy = 0; sw = sourceBuffer.width; sh = sourceBuffer.height;\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = targetBuffer.width; dh = targetBuffer.height;\n\t\t\t\tbreak;\n\t\t\t\tcase SCALE_KEEP_ASPECT:\n\t\t\t\t\tsx = 0; sy = 0; sw = sourceBuffer.width; sh = sourceBuffer.height;\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = targetBuffer.width; dh = targetBuffer.height;\n\t\t\t\t\tif(displayProps.orientation) {\n\t\t\t\t\t\tsw = targetBuffer.width;\n\t\t\t\t\t\tsh = min(targetBuffer.height, sourceBuffer.height);\n\t\t\t\t\t\tdw = min(targetBuffer.width, sourceBuffer.width);\n\t\t\t\t\t\tdh = targetBuffer.height;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsw = min(targetBuffer.width, sourceBuffer.width);\n\t\t\t\t\t\tsh = targetBuffer.height;\n\t\t\t\t\t\tdw = targetBuffer.width;\n\t\t\t\t\t\tdh = min(targetBuffer.height, sourceBuffer.height);\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\tcase SCALE_CROP:\n\t\t\t\t\tsx = 0; sy = 0; \n\t\t\t\t\tsw = min(targetBuffer.width - sourceBuffer.offsetX, sourceBuffer.width);\n\t\t\t\t\tsh = min(targetBuffer.height - sourceBuffer.offsetY, sourceBuffer.height);\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = min(targetBuffer.width - sourceBuffer.offsetX, sourceBuffer.width);\n\t\t\t\t\tdh = min(targetBuffer.height - sourceBuffer.offsetY, sourceBuffer.height);\n\t\t\t\tbreak;\n\t\t\t\tdefault: // SCALE_NONE\n\t\t\t\t\tsx = 0; sy = 0; sw = sourceBuffer.width; sh = sourceBuffer.height;\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = sourceBuffer.width*displayProps.pixelRatio; dh = sourceBuffer.height*displayProps.pixelRatio;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttargetContext.drawImage(sourceBuffer.canvas, sx, sy, sw, sh, dx, dy, dw, dh); \n\t\t}\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.display.buffers.js\n// module id = 32\n// module chunks = 0","\"use strict\";\nimport {VALIDATE_VECTORS, GRAVITY} from \"./pxene.constants\";\nimport {vectors} from \"@nphyx/vectrix\";\nconst {minus,mut_clamp,mut_copy,mut_times,normalize,mut_normalize,magnitude,vec2} = vectors;\nconst {sqrt, abs, floor, ceil, round} = Math;\nconst MIN_F = 1e-11;\nconst MAX_F = 1e+11;\n\n/**\n * Round to nearest even number.\n */\nexport function evenNumber(n) {\nreturn n >> 1 << 1;\n}\n\nexport function tan_vec(v, out) {\n\tlet tmpx = 0;\n\tnormalize(v, out);\n\ttmpx = out[0];\n\tout[0] = -out[1];\n\tout[1] = tmpx;\n\treturn out;\n}\n\nexport function perpdot(a, b) {\n\treturn a[0]*b[1] - b[0]*a[1];\n}\n\nexport function floor_vec(v, out) {\n\tlet len = v.length;\n\tout = out || vectors.create(len);\n\tfor(let i = 0; i < len; ++i) {\n\t\tout[i] = floor(v[i]);\n\t}\n\treturn out;\n}\n\nexport function mut_floor_vec(v) {\n\treturn floor_vec(v, v);\n}\n\nexport function ceil_vec(v, out) {\n\tlet len = v.length;\n\tout = out || vectors.create(len);\n\tfor(let i = 0; i < len; ++i) {\n\t\tout[i] = ceil(v[i]);\n\t}\n\treturn out;\n}\n\nexport function mut_ceil_vec(v) {\n\treturn ceil_vec(v, v);\n}\n\nexport function round_vec(v, out) {\n\tlet len = v.length;\n\tout = out || vectors.create(len);\n\tfor(let i = 0; i < len; ++i) {\n\t\tout[i] = round(v[i]);\n\t}\n\treturn out;\n}\n\nexport function mut_round_vec(v) {\n\treturn round_vec(v, v);\n}\n\n/**\n * Clamp the absolute value of a number, keeping its sign.\n */\nfunction limit(v, min_v = 0, max_v = Infinity) {\n\tif(abs(v) < abs(min_v)) {\n\t\tif(v < 0) v = -min_v;\n\t\telse v = min_v;\n\t}\n\telse if(abs(v) > abs(max_v)) {\n\t\tif(v < 0) v = -max_v;\n\t\telse v = max_v;\n\t}\n\treturn v;\n}\n\n/**\n * Limits absolute values of vectors within a range.\n */\nexport const limitVecMut = (function() {\n\tlet i = 0|0, l = 0|0;\n\treturn function limitVecMut(v, min_v = 0, max_v = Infinity) {\t\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = limit(v[i], min_v, max_v);\n\t\t}\n\t}\n})();\n\n/**\n * Validates a vector. For debugging purposes.\n */\nexport const validate = (function() {\n\tlet i, l;\n\treturn function validate(v) {\n\t\tfor(i = 0, l = v.length; i < l; i++) {\n\t\t\tif(isNaN(v[i])) throw new Error(\"NaN vector\");\n\t\t\tif(v[i] === Infinity) throw new Error(\"Infinite vector\");\n\t\t\tif(v[i] === -Infinity) throw new Error(\"-Infinite vector\");\n\t\t}\n\t}\n})();\n\n/**\n * Gravitate toward target.\n */\nexport const gravitate = (function() {\n\tlet g_v = vec2();\n\tlet mag = 0.0, x = 0.0, y = 0.0, scale = 0.0;\n\treturn function gravitate(p1, p2, strength, out) {\n\t\tout = out||g_v;\n\t\tminus(p1, p2, out);\n\t\tmag = magnitude(out);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || mag === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength*GRAVITY/(mag*mag));\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"gravitation error\", e);\n\t\t\t\tconsole.log(strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tlimitVecMut(out, 0.00001, 10); // put a cap on it to avoid infinite acceleration\n\t\t\t\tconsole.log(\"limit\", out);\n\t\t\t\tmag = magnitude(out);\n\t\t\t\tconsole.log(\"magnitude\", mag);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength/(mag*mag));\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Accelerate toward a target.\n */\nexport const accelerate = (function() {\n\tlet v = vec2();\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\treturn function accelerate(p1, p2, strength, out) {\n\t\tout = out||v;\t\n\t\tminus(p1, p2, out);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif(x === 0 && y === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"acceleration error\", e);\n\t\t\t\tconsole.log(\"strength\", strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength);\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport const drag = (function() {\n\tlet delta = vec2(), dragStrength = 0.0, dragSpeed = 0.0;\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\t/**\n\t * Apply drag.\n\t */\n\treturn function drag(vel, c, out) {\n\t\tout = out||delta;\n\t\tdragSpeed = magnitude(vel);\n\t\t// null small values\n\t\tdragSpeed = limit(dragSpeed, 0, 1e+11); // avoid infinite dragSpeeds\n\t\tdragStrength = mut_clamp(c * dragSpeed * dragSpeed, 1e-11, 1e+11);\n\t\tmut_copy(out, vel);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || dragStrength === 0) return out;\n\t\t// inline normalize for speed, since this happens a lot\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tdragStrength = mut_clamp(dragStrength, MIN_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t// mut_normalize(out)\n\t\tmut_times(out, -1);\n\t\tmut_times(out, dragStrength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"drag error\", e);\n\t\t\t\tconsole.log(c, dragSpeed, dragStrength);\n\t\t\t\tconsole.log(\"magnitude\", magnitude(vel));\n\t\t\t\tmut_copy(out, vel);\n\t\t\t\tconsole.log(\"copied\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalized\", out);\n\t\t\t\tmut_times(out, -1);\n\t\t\t\tconsole.log(\"inverted\", out);\n\t\t\t\tmut_times(out, dragStrength);\n\t\t\t\tconsole.log(\"scaled\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n\n/**\n * Checks if entity is out of screen space by more than 50%.\n */\nexport function offscreen(x, y, displayProps) {\n\treturn (\n\t\tx < (displayProps.width  * -0.5) || x >displayProps.width   * 1.5 ||\n\t\ty < (displayProps.height * -0.5) || y > displayProps.height * 1.5\n\t)\n}\n\n/**\n * Calculates the screenspace pixel offset of a coordinate from the [-1,1] coordinate\n * range used in game position vectors.\n */\nexport function screenSpace(x, displayProps) {\n\treturn ((x+1)/2) * displayProps.minDimension;\n}\n\n/**\n * Finds the screen space equivalent of the game space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\n\nexport function screenSpaceVec(v, displayProps, out) {\n\tout[0] = (((v[0]+1)/2)*displayProps.minDimension);\n\tout[1] = (((v[1]+1)/2)*displayProps.minDimension);\n\treturn out;\n}\n\n/**\n * Finds the game space equivalent of the sceen space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\nexport function gameSpaceVec(v, displayProps, out) {\n\tout[0] = 2*((v[0])/displayProps.minDimension)-1;\n\tout[1] = 2*((v[1])/displayProps.minDimension)-1;\n}\n\n/**\n * Flattens an array. \n * @function flatten\n * @param {mixed} a an array, array-like, or object that can be flattened\n * @return {mixed} flat version of input\n */\nexport function flatten(a) {\n\t// cheap array-like check, may not always be reliable\n\tif(a instanceof Object && typeof a.length == \"number\") {\n\t\tlet i = 0, len = a.length, out = [];\n\t\tfor(;i < len; ++i) {\n\t\t\tout = out.concat(flatten(a[i]));\n\t\t}\n\t\treturn out;\n\t}\n\telse return a;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.util.js\n// module id = 34\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.BooleanArray\n */\n\n/**\n * A BooleanArray is a TypedArray-like implementation for integer-indexed\n * boolean fields. It lets you store a set of boolean values in an arraybuffer,\n * which allows for better potential memory use in circumstances where you need\n * to set more than 2 booleans on a single data set\\*, and potentially slightly\n * better performance (though probably not significantly).\n *\n * It's probably not incredibly useful in most circumstances, but when you have\n * an object with a bunch of boolean flags and you're going to make a bunch of\n * that kind of object it might come in handy.\n *\n * In short, if you don't know whether you need this you almost certainly don't.\n *\n * *_most sources indicate a boolean occupies 4 bytes of javascript memory due \n * to storage and indexing overhead. In contrast, a BooleanArray can store up \n * to 8 booleans in around the same amount of memory (and the proportionate \n * savings grow the more booleans you have to store, since an arraybuffer\n * has a small fixed overhead)._\n */\nconst internalArray = Symbol();\n\nexport default function BooleanArray() {\n\tif((arguments[0] instanceof ArrayBuffer) && (typeof arguments[1] === \"number\") && (typeof arguments[2] === \"number\")) {\n\t\t\tthis[internalArray] = new Uint8Array(arguments[0], arguments[1], Math.ceil(arguments[2]/8));\n\t}\n\telse if(typeof arguments[0] === \"number\") {\n\t\tthis[internalArray] = new Uint8Array(Math.ceil(arguments[0]/8));\n\t}\n\telse throw Error(\"expected either length or buffer, offset, length as arguments\");\n\tthis.length = this[internalArray].byteLength * 8;\n\tObject.freeze(this);\n\treturn this;\n}\n\n/**\n * Gets a boolean by index.\n */\nBooleanArray.prototype.get = function get(n) {\n\tlet i = ~~(n/8);\n\tlet s = n % 8;\n\treturn (this[internalArray][i] & (1 << s))?true:false;\n}\n\n/**\n * Sets an index to the truthiness of the given value.\n * @param {int} n index to set\n * @param {truthy|falsy} v value to set\n */\nBooleanArray.prototype.set = function set(n, v) {\n\tlet i = ~~(n/8);\n\tlet s = n % 8;\n\tif(v) { // any kind of truthy is ok!\n\t\tthis[internalArray][i] |= 1 << s;\n\t}\n\telse {\n\t\tthis[internalArray][i] &= 255 ^ (1 << s);\n\t}\n}\n\n/**\n * Fill the array with a value.\n * @param {truthy|falsy} v\n */\nBooleanArray.prototype.fill = function(v) {\n\tthis[internalArray].fill(v?255:0);\n}\n\n/**\n * For useful compatibility with {@link pxene.ObjectPool}.\n */\nBooleanArray.prototype.recycle = function() {\n\tthis[internalArray].fill(0);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.BooleanArray.js\n// module id = 35\n// module chunks = 0","\"use strict\";\n//import BooleanArray from \"./pxene.BooleanArray\";\nconst {floor} = Math;\n/** mask a full rectangle **/\nconst MASK_16 = Math.pow(2, 16) - 1;\n/** used to generate offset masks **/\nconst MASK_X = new Uint16Array(4);\n/** used to generate offset masks **/\nconst MASK_Y = new Uint16Array(4);\n/** mask offsets from the top **/\nconst MASK_TOP = new Uint16Array(4);\n/** mask offsets from the bottom **/\nconst MASK_BOTTOM = new Uint16Array(4);\n/** mask offsets from the right **/\nconst MASK_RIGHT = new Uint16Array(4);\n/** mask offsets from the left **/\nconst MASK_LEFT = new Uint16Array(4);\n\n/**\n * Precompute a bunch of useful masks for fast shape checks. Done this way\n * to illustrate/keep track of how they're constructed instead of just using\n * \"magic numbers\".\n */\nMASK_X[0] = 1 | (1 << 4) | (1 << 8) | (1 << 12);\nMASK_X[1] = MASK_X[0] << 1;\nMASK_X[2] = MASK_X[0] << 2;\nMASK_X[3] = MASK_X[0] << 3;\nif((MASK_X[0] | MASK_X[1] | MASK_X[2] | MASK_X[3]) !== MASK_16) throw new Error(\"MASK_X is bad\");\n\nMASK_Y[0] = (1 << 4) - 1; \nMASK_Y[1] = MASK_Y[0] << 4;\nMASK_Y[2] = MASK_Y[0] << 8;\nMASK_Y[3] = MASK_Y[0] << 12;\nif((MASK_Y[0] | MASK_Y[1] | MASK_Y[2] | MASK_Y[3]) !== MASK_16) throw new Error(\"MASK_Y is bad\");\n\nMASK_TOP[0] = 0;\nMASK_TOP[1] = MASK_Y[3];\nMASK_TOP[2] = MASK_TOP[1] | MASK_Y[2];\nMASK_TOP[3] = MASK_TOP[2] | MASK_Y[1];\n\nMASK_BOTTOM[0] = 0;\nMASK_BOTTOM[1] = MASK_Y[0];\nMASK_BOTTOM[2] = MASK_BOTTOM[1] | MASK_Y[1];\nMASK_BOTTOM[3] = MASK_BOTTOM[2] | MASK_Y[2];\n\nMASK_RIGHT[0] = 0;\nMASK_RIGHT[1] = MASK_X[3];\nMASK_RIGHT[2] = MASK_RIGHT[1] | MASK_X[2];\nMASK_RIGHT[3] = MASK_RIGHT[2] | MASK_X[1];\n\nMASK_LEFT[0] = 0;\nMASK_LEFT[1] = MASK_X[0];\nMASK_LEFT[2] = MASK_LEFT[1] | MASK_X[1];\nMASK_LEFT[3] = MASK_LEFT[2] | MASK_X[2];\n\n\n/**\n * @module pxene.CollisionMap\n *\n * Module containing {@link CollisionMap} prototype.\n */\n\nconst internal_array = Symbol();\n\n/**\n * @constructor\n * A collision map is a 2d grid of boolean true/false values, meant to be\n * used for collision testing.\n *\n * @param {int} width the width of the grid\n * @param {int} height the height of the grid\n * @return {CollisionMap}\n */\nexport default function CollisionMap(width = 0, height = 0) {\n\tthis.width = 0;\n\tthis.height = 0;\n\tthis.cellWidth = 0;\n\tthis.cellHeight = 0;\n\tthis.length = 0;\n\tif(width && height) this.init(width, height);\n\treturn this;\n}\n\n/* helpful(?) constants */\n/** pixel array index offset for the red channel **/\nCollisionMap.CHANNEL_RED = 0;\n/** pixel array index offset for the green channel **/\nCollisionMap.CHANNEL_GREEN = 1;\n/** pixel array index offset for the blue channel **/\nCollisionMap.CHANNEL_BLUE = 2;\n/** pixel array index offset for the alpha channel **/\nCollisionMap.CHANNEL_ALPHA = 3;\n\n/**\n * Creates a per-pixel collision map from a Canvas.\n * @param {Canvas} canvas the canvas to read pixel data from\n * @param {int} threshold the threshold above which a pixel will be considered solid (default 0) \n * @param {int} channel the channel to check against (default {@link CollisionMap.CHANNEL_ALPHA}) \n * @return {CollisionMap} \n *\n * @note internal canvas pixel data stores alpha in a range of 0 to 255, so\n * convert from [0 - 1] to [0 - 255] if providing a threshold \n */\nCollisionMap.fromCanvasPixels = function(canvas, threshold = 0, channel = CollisionMap.CHANNEL_ALPHA) {\n\tconsole.time(\"new CollisionMap\");\n\tlet map = new CollisionMap(canvas.width, canvas.height);\n\tconsole.timeEnd(\"new CollisionMap\");\n\tlet pixels;\n\tlet context = canvas.getContext(\"2d\");\n\tconsole.time(\"fromCanvasPixels loop\");\n\tlet once = true;\n\tfor(let y = 0, h = canvas.height; y < h; y += 100) {\n\t\t// go 100 rows at time with the image data for sanity/memory use\n\t\ttry {\n\t\t\tif(once) console.time(\"getImageData\");\n\t\t\tpixels = context.getImageData(0, y, canvas.width, 100).data;\n\t\t\tif(once) console.timeEnd(\"getImageData\");\n\t\t}\n\t\tcatch(e) {\n\t\t\tthrow new Error(\"CollisionData:failed to get image data :(\");\n\t\t}\n\t\tif(once) console.time(\"loop map.set\");\n\t\tfor(let i = 0, len = pixels.length; i < len; i+=4) {\n\t\t\tlet mx = (i / 4) % canvas.width, my = y + (~~((i / 4) / canvas.width));\n\t\t\tif(pixels[i+channel] > threshold) map.set(mx, my, true);\n\t\t}\n\t\tif(once) console.timeEnd(\"loop map.set\");\n\t\tonce = false;\n\t}\n\tconsole.timeEnd(\"fromCanvasPixels loop\");\n\treturn map;\n}\n\n/**\n * Returns the bit for the given set of coordinates.\n */\nconst cellBit = CollisionMap.cellBit = function cellBit(x, y) {\n\treturn 1 << ((x % 4) + ((y % 4)*4));\n}\n\n/**\n * Returns the mask which excludes the given bit coordinate from the cell.\n */\nconst cellMask = CollisionMap.cellMask = function cellMask(x, y) {\n\treturn invertMask(cellBit(x, y));\n}\n\nconst cellIndex = CollisionMap.cellIndex = function cellIndex(x, y, w) {\n\treturn (floor(y/4) * floor(w/4)) + floor(x/4) \n}\n\n\n/**\n * Reinitializes the map with a new width and height.\n * @param {int} width\n * @param {int} height\n * @return {self}\n */\nCollisionMap.prototype.init = function(width, height) {\n\tthis.width = ~~width;\n\tif(this.width % 4) this.width += (4 - (~~width % 4)); // round to nearest 4\n\tthis.height = ~~height;\n\tif(this.height % 4) this.height += (4 - (~~height % 4)); // round to nearest 4\n\tthis.cellWidth = this.width / 4;\n\tthis.cellHeight = this.height / 4;\n\tlet newlen = (this.cellWidth * this.cellHeight);\n\tif(this.length !== newlen) {\n\t\tthis.length = newlen;\n\t\tif(this.length) {\n\t\t\tthis[internal_array] = new Uint16Array(this.length);\n\t\t}\n\t}\n\telse if(this[internal_array]) this[internal_array].fill(0);\n\treturn this;\n}\n\nCollisionMap.prototype.getCell = function getCell(x, y) {\n\treturn this[internal_array][cellIndex(x, y, this.width)];\n}\n\nCollisionMap.prototype.get = function get(x, y) {\n\treturn (this.getCell(x, y) & cellBit(x, y))?1:0;\n}\n\nCollisionMap.prototype.set = function set(x, y, v) {\n\tif(v) this[internal_array][cellIndex(x, y, this.width)] |= cellBit(x, y);\n\telse this[internal_array][cellIndex(x, y, this.width)] &= cellMask(x, y);\n}\n\n/**\n * Checks a rectangular area of the CollisionMap, returning a count of solid\n * grid sections within.\n *\n * @param {int} x start x coordinate\n * @param {int} y start y coordinate\n * @param {int} w width of rectangle\n * @param {int} h height of rectangle \n * @return {int}\n */\nCollisionMap.prototype.checkRect = function checkRect(x, y, w, h) {\n\tlet offsetX = x % 4;\n\tlet offsetY = y % 4;\n\tlet cellWidth = Math.ceil((offsetX + w) / 4);\n\tlet cellHeight = Math.ceil((offsetY + h) / 4);\n\tlet maskX, maskY;\n\tfor(let cellY = 0; cellY < cellHeight; ++cellY) {\n\t\tif(cellY === 0) maskY = MASK_TOP[offsetY];\n\t\telse if(cellY === (cellHeight - 1)) maskY = MASK_BOTTOM[offsetY];\n\t\telse maskY = MASK_16;\n\t\tfor(let cellX = 0; cellX < cellWidth; ++cellX) {\n\t\t\tif(cellX === 0) maskX = MASK_LEFT[offsetX];\n\t\t\telse if(cellX === (cellWidth - 1)) maskX = MASK_RIGHT[offsetX];\n\t\t\telse maskX = MASK_16;\n\t\t\tif(maskX & maskY & this[internal_array][(cellY * this.cellWidth) + cellX]) return 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/**\n * Intersects two CollisionMaps, returning a sum of the count of overlapping\n * solid areas.\n * @param {CollisionMap} target the map to intersect with\n * @param {int} sx start x of this map\n * @param {int} sy start y of this map\n * @param {int} tx start x of the target map\n * @param {int} ty start y of the target map\n * @param {int} w width of area to collide\n * @param {int} h height of area to collide\n * @return {int}\n * @todo examine whether fast intersection by blocks of 8 sectors is doable\n */\nCollisionMap.prototype.intersect = function intersect(target, sx, sy, tx, ty, w, h) {\n\tlet x, y, sum = 0;\n\tfor(y = 0; y < h; ++y) {\n\t\tfor(x = 0; x < h; ++x) {\n\t\t\tsum += (this.get(sx+x, sy+y) && target.get(tx+x, ty+y))?1:0;\t\n\t\t}\n\t}\n\treturn sum;\n}\n\nfunction invertMask(mask) {\n\treturn MASK_16 ^ mask;\n}\n\n// export constants for debugging\nCollisionMap.MASK_X = MASK_X;\nCollisionMap.MASK_Y = MASK_Y;\nCollisionMap.MASK_TOP = MASK_TOP;\nCollisionMap.MASK_BOTTOM = MASK_BOTTOM;\nCollisionMap.MASK_LEFT = MASK_LEFT;\nCollisionMap.MASK_RIGHT = MASK_RIGHT;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.CollisionMap.js\n// module id = 37\n// module chunks = 0","/**\n * Derived from bokeh generator by Jack Rugile at [CodePen](http://codepen.io/jackrugile/pen/gaFub)\n */\n\"use strict\";\nimport {shuffle, clamp} from \"../photonomix.util.js\";\nimport {canvasRGBA as stackBlur} from \"stackblur-canvas\";\nlet bgBuffer, bokehBuffer, bgCtx, bokehCtx, tau = Math.PI * 2, parts = [], displayProps;\nlet colors1 = [\n\t\"rgba(255,64,64,1.0)\",\n\t\"rgba(64,255,64,1.0)\",\n\t\"rgba(64,64,225,1.0)\"\n];\nshuffle(colors1);\nlet colors2 = [\n\t\"rgba(255,64,64,0.8)\",\n\t\"rgba(64,255,64,0.8)\",\n\t\"rgba(64,64,225,0.8)\"\n];\nshuffle(colors2);\n\n\n\nfunction rand( min, max ) {\n\treturn Math.random() * (max - min) + min;\n}\n\nfunction hsla( h, s, l, a ) {\n\treturn \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\";\n}\n\t\nexport function init(display) {\n\tdisplayProps = display.props;\n\tbgBuffer = display.buffersByLabel.bokehBack;//buffer1;\n\tbgCtx = bgBuffer.context;\n\tbokehBuffer = display.buffersByLabel.bokehFront; //buffer2;\n\tbokehCtx = bokehBuffer.context;\n\n\tlet sizeBase = bgBuffer.width + bgBuffer.height;\n\tlet w = bokehBuffer.width;\n\tlet h = bokehBuffer.height;\n\n\n\tparts.length = 0;\n\tfor( var i = 0; i < Math.floor( ( w + h ) * 0.01 ); i++ ) {\n\t\tparts.push({\n\t\t\tradius: rand( sizeBase * 0.005, sizeBase * 0.02 ),\n\t\t\tx: rand( 0, w ),\n\t\t\ty: rand( 0, h ),\n\t\t\tangle: rand( 0, tau ),\n\t\t\tvel: rand( 0.05, 0.2 ),\n\t\t\ttick: rand( 0, 10000 )\n\t\t});\n\t}\n\n\tgenerateBackground();\n\tdisplayProps.events.on(\"resize\", generateBackground);\n}\n\nexport function generateBackground() {\n\tlet w = bokehBuffer.width;\n\tlet h = bokehBuffer.height;\n\tlet mind = Math.min(w, h);\n\tlet maxd = Math.max(w, h);\n\tlet noise = 6;\n\tbgCtx.fillStyle = \"black\";\n\tbgCtx.fillRect(0, 0, w, h);\n\tlet g = bgCtx.createLinearGradient(0, 0, w, h);\n\tg.addColorStop(0.0, colors1[0]);\n\tg.addColorStop(0.5, colors1[1]);\n\tg.addColorStop(1.0, colors1[2]);\n\tbgCtx.fillStyle = g;\n\tbgCtx.fillRect(0, 0, w, h);\n\n\tg = bgCtx.createLinearGradient(0, h, w, 0);\n\tg.addColorStop(0.0, colors2[0]);\n\tg.addColorStop(0.5, colors2[1]);\n\tg.addColorStop(1.0, colors2[2]);\n\tbgCtx.fillStyle = g;\n\tbgCtx.fillRect(0, 0, w, h);\n\tnoisify(bgCtx, 0, 0, w, h, noise);\n\n\tg = bgCtx.createRadialGradient(w/2, h/2, maxd/2, w/2, h/2, 0);\n\tlet rad = ((maxd - mind) / maxd);\n\tg.addColorStop(1, \"rgba(32,32,32,0.5)\");\n\tg.addColorStop(rad + 0.06, \"rgba(0,0,0,0.8)\");\n\tg.addColorStop(rad + 0.05, \"rgba(128,128,128,1.0)\");\n\tg.addColorStop(rad + 0.04, \"rgba(255,255,255,0.6)\");\n\tg.addColorStop(rad + 0.03, \"rgba(255,255,255,0.8)\");\n\tg.addColorStop(rad + 0.025, \"rgba(255,255,255,0.8)\");\n\tg.addColorStop(rad + 0.005, \"rgba(255,255,255,0.5)\");\n\tg.addColorStop(0, \"rgba(255,255,255,0.01)\");\n\tbgCtx.fillStyle = g;\n\tbgCtx.globalCompositeOperation = \"luminosity\";\n\tbgCtx.fillRect(0, 0, w, h);\n\tbgCtx.globalCompositeOperation = \"source-in\";\n\tnoisify(bgCtx, 0, 0, w, h, noise);\n\tstackBlur(bgCtx.canvas, 0, 0, w, h, 4);\n}\n\n\nfunction noisify(ctx, sx, sy, sw, sh, strength = 1) {\n\tlet data = ctx.getImageData(sx, sy, sw, sh);\n\tlet pixels = data.data;\n\tlet tweak;\n\tfor(let i = 0, len = pixels.length; i < len; i += 4) {\n\t\ttweak = ~~((Math.random() * strength * 2) - strength);\n\t\tpixels[i] = clamp(pixels[i] + tweak, 0, 255); \n\t\ttweak = ~~((Math.random() * strength * 2) - strength);\n\t\tpixels[i+1] = clamp(pixels[i+1] + tweak, 0, 255); \n\t\ttweak = ~~((Math.random() * strength * 2) - strength);\n\t\tpixels[i+2] = clamp(pixels[i+2] + tweak, 0, 255); \n\t}\n\tbgCtx.putImageData(data, sx, sy);\n}\n\nexport function draw() {\n\tvar i = parts.length;\n\tlet w = bokehBuffer.width;\n\tlet h = bokehBuffer.height;\n\tbokehCtx.fillStyle = \"rgba(0,0,0,0)\";\n\tbokehCtx.globalCompositeOperation = \"source-over\";\n\tbokehCtx.clearRect(0, 0, w, h);\n\tbokehCtx.shadowBlur = 15;\n\tbokehCtx.shadowColor = \"#fff\";\n\twhile(i--) {\n\t\tvar part = parts[i];\n\t\t\n\t\tpart.x += Math.cos(part.angle) * part.vel;\n\t\tpart.y += Math.sin(part.angle) * part.vel;\n\t\tpart.angle += rand(-0.05, 0.05);\n\t\t\n\t\tbokehCtx.beginPath();\n\t\tbokehCtx.arc(part.x, part.y, part.radius, 0, tau);\n\t\tbokehCtx.fillStyle = hsla(0, 0, 100, 0.03 + Math.cos( part.tick * 0.02 ) * 0.01);\n\t\tbokehCtx.fill();\n\t\t\n\t\tif(part.x - part.radius > w) part.x = -part.radius;\n\t\tif(part.x + part.radius < 0) part.x = w + part.radius;\n\t\tif(part.y - part.radius > h) part.y = -part.radius;\n\t\tif(part.y + part.radius < 0) part.y = h + part.radius;\n\t\t\n\t\tpart.tick++;\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/bokeh.js\n// module id = 38\n// module chunks = 0","/*\n    StackBlur - a fast almost Gaussian Blur For Canvas\n\n    Version:     0.5\n    Author:        Mario Klingemann\n    Contact:     mario@quasimondo.com\n    Website:    http://www.quasimondo.com/StackBlurForCanvas\n    Twitter:    @quasimondo\n\n    In case you find this class useful - especially in commercial projects -\n    I am not totally unhappy for a small donation to my PayPal account\n    mario@quasimondo.de\n\n    Or support me on flattr:\n    https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n    Copyright (c) 2010 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n    */\n\n\nvar mul_table = [\n    512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n    454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n    482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n    437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n    497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n    320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n    446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n    329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n    505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n    399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n    324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n    268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n    451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n    385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n    332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n    289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];\n\n\nvar shg_table = [\n    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n    17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];\n\n\nfunction processImage(img, canvas, radius, blurAlphaChannel)\n{\n    if (typeof(img) == 'string') {\n        var img = document.getElementById(img);\n    }\n    else if (typeof HTMLImageElement !== 'undefined' && !img instanceof HTMLImageElement) {\n        return;\n    }\n    var w = img.naturalWidth;\n    var h = img.naturalHeight;\n\n    if (typeof(canvas) == 'string') {\n        var canvas = document.getElementById(canvas);\n    }\n    else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement) {\n        return;\n    }\n\n    canvas.style.width  = w + 'px';\n    canvas.style.height = h + 'px';\n    canvas.width = w;\n    canvas.height = h;\n\n    var context = canvas.getContext('2d');\n    context.clearRect(0, 0, w, h);\n    context.drawImage(img, 0, 0);\n\n    if (isNaN(radius) || radius < 1) return;\n\n    if (blurAlphaChannel)\n        processCanvasRGBA(canvas, 0, 0, w, h, radius);\n    else\n        processCanvasRGB(canvas, 0, 0, w, h, radius);\n}\n\nfunction getImageDataFromCanvas(canvas, top_x, top_y, width, height)\n{\n    if (typeof(canvas) == 'string')\n        var canvas  = document.getElementById(canvas);\n    else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement)\n        return;\n\n    var context = canvas.getContext('2d');\n    var imageData;\n\n    try {\n        try {\n            imageData = context.getImageData(top_x, top_y, width, height);\n        } catch(e) {\n            throw new Error(\"unable to access local image data: \" + e);\n            return;\n        }\n    } catch(e) {\n        throw new Error(\"unable to access image data: \" + e);\n    }\n\n    return imageData;\n}\n\nfunction processCanvasRGBA(canvas, top_x, top_y, width, height, radius)\n{\n    if (isNaN(radius) || radius < 1) return;\n    radius |= 0;\n\n    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n\n    imageData = processImageDataRGBA(imageData, top_x, top_y, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGBA(imageData, top_x, top_y, width, height, radius)\n{\n    var pixels = imageData.data;\n\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,\n        r_out_sum, g_out_sum, b_out_sum, a_out_sum,\n        r_in_sum, g_in_sum, b_in_sum, a_in_sum,\n        pr, pg, pb, pa, rbs;\n\n    var div = radius + radius + 1;\n    var w4 = width << 2;\n    var widthMinus1  = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1  = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    for (i = 1; i < div; i++)\n    {\n        stack = stack.next = new BlurStack();\n        if (i == radiusPlus1) var stackEnd = stack;\n    }\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n\n    yw = yi = 0;\n\n    var mul_sum = mul_table[radius];\n    var shg_sum = shg_table[radius];\n\n    for (y = 0; y < height; y++)\n    {\n        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi+3]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++)\n        {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n            a_sum += (stack.a = (pa = pixels[p+3])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n\n            stack = stack.next;\n        }\n\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++)\n        {\n            pixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa != 0)\n            {\n                pa = 255 / pa;\n                pixels[yi]   = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi+1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi+2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            } else {\n                pixels[yi] = pixels[yi+1] = pixels[yi+2] = 0;\n            }\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n\n            p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            r_in_sum += (stackIn.r = pixels[p]);\n            g_in_sum += (stackIn.g = pixels[p+1]);\n            b_in_sum += (stackIn.b = pixels[p+2]);\n            a_in_sum += (stackIn.a = pixels[p+3]);\n\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n            a_sum += a_in_sum;\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n            a_out_sum += (pa = stackOut.a);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n\n    for (x = 0; x < width; x++)\n    {\n        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi+3]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++)\n        {\n            yi = (yp + x) << 2;\n\n            r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n            a_sum += (stack.a = (pa = pixels[yi+3])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n\n            stack = stack.next;\n\n            if(i < heightMinus1)\n            {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++)\n        {\n            p = yi << 2;\n            pixels[p+3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa > 0)\n            {\n                pa = 255 / pa;\n                pixels[p]   = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p+1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p+2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            } else {\n                pixels[p] = pixels[p+1] = pixels[p+2] = 0;\n            }\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n            g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n            b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n            a_sum += (a_in_sum += (stackIn.a = pixels[p+3]));\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n            a_out_sum += (pa = stackOut.a);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n    return imageData;\n}\n\nfunction processCanvasRGB(canvas, top_x, top_y, width, height, radius)\n{\n    if (isNaN(radius) || radius < 1) return;\n    radius |= 0;\n\n    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n    imageData = processImageDataRGB(imageData, top_x, top_y, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGB(imageData, top_x, top_y, width, height, radius)\n{\n    var pixels = imageData.data;\n\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,\n        r_out_sum, g_out_sum, b_out_sum,\n        r_in_sum, g_in_sum, b_in_sum,\n        pr, pg, pb, rbs;\n\n    var div = radius + radius + 1;\n    var w4 = width << 2;\n    var widthMinus1  = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1  = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    for (i = 1; i < div; i++)\n    {\n        stack = stack.next = new BlurStack();\n        if (i == radiusPlus1) var stackEnd = stack;\n    }\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n\n    yw = yi = 0;\n\n    var mul_sum = mul_table[radius];\n    var shg_sum = shg_table[radius];\n\n    for (y = 0; y < height; y++)\n    {\n        r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;\n\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++)\n        {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n\n            stack = stack.next;\n        }\n\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++)\n        {\n            pixels[yi]   = (r_sum * mul_sum) >> shg_sum;\n            pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;\n            pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n\n            p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            r_in_sum += (stackIn.r = pixels[p]);\n            g_in_sum += (stackIn.g = pixels[p+1]);\n            b_in_sum += (stackIn.b = pixels[p+2]);\n\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n\n    for (x = 0; x < width; x++)\n    {\n        g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;\n\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++)\n        {\n            yi = (yp + x) << 2;\n\n            r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n\n            stack = stack.next;\n\n            if(i < heightMinus1)\n            {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++)\n        {\n            p = yi << 2;\n            pixels[p]   = (r_sum * mul_sum) >> shg_sum;\n            pixels[p+1] = (g_sum * mul_sum) >> shg_sum;\n            pixels[p+2] = (b_sum * mul_sum) >> shg_sum;\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n            g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n            b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n\n    return imageData;\n}\n\nfunction BlurStack()\n{\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n}\n\nmodule.exports = {\n    image: processImage,\n    canvasRGBA: processCanvasRGBA,\n    canvasRGB: processCanvasRGB,\n    imageDataRGBA: processImageDataRGBA,\n    imageDataRGB: processImageDataRGB\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stackblur-canvas/src/stackblur.js\n// module id = 39\n// module chunks = 0","\"use strict\";\n/**\n * Module for drawing entity layer.\n */\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport * as sprites from \"./sprites\";\nimport * as constants from \"../photonomix.constants\";\nimport * as Photons from \"../game/photons\";\nimport {rotate} from \"../photonomix.util\";\nimport {offscreen, screenSpace, updateCompositeOperation} from \"./\";\nconst {vec2, lerp} = vectrix.vectors;\nconst {mut_plus} = vectrix.matrices;\nimport {Photon, Mote, Void, Emitter, AntiGravitonCluster, Ripple} from \"../game\";\nimport {COLOR_R, COLOR_G, COLOR_B} from \"../game/photons\";\nimport {ACT_ATTACK} from \"../game/Mote\";\n\nlet {min, cos, sin, sqrt, tan, round, PI} = Math;\nconst tf = constants.TARGET_FPS;\n\nlet lightBuffer, darkBuffer, lightCtx, darkCtx, frameCount, timing, displayProps;\n\n/**\n * Draws plasma lines between a mote and its target.\n */\nconst drawPlasmaLine = (function() {\n\tlet a  = vec2(), b  = vec2(), c  = vec2(), d  = vec2(),\n\t\t\tra = vec2(), rb = vec2(), \n\t\t\trax = 0|0, ray = 0|0, speeda = 0.0, ta = 0.0, tc = 0.0,\n\t\t\trbx = 0|0, rby = 0|0, speedb = 0.0, tb = 0.0, td = 0.0,\n\t\t\tsx = 0|0, sy = 0|0, tx = 0|0, ty = 0|0;\n\treturn function drawPlasmaLine(ctx, source, target, outerColor, innerColor, lineSize = 4, frameOffset = 0) {\n\t\t// only these acts get lines\n\t\tta = 0.6;\n\t\ttc = 0.9;\n\t\ttb = 0.7;\n\t\ttd = 0.9;\n\t\tspeeda = 0.57121;\n\t\tspeedb = 0.71213;\n\t\tlerp(source, target, ta, a);\n\t\tlerp(source, target, tb, b);\n\t\tlerp(source, target, tc, c);\n\t\tlerp(source, target, td, d);\n\t\t\n\t\tmut_plus(rotate(a, c, tan(cos((frameCount+frameOffset)*speeda)), ra), a);\n\t\tmut_plus(rotate(b, d, tan(sin((frameCount+frameOffset)*speedb)), rb), b);\n\n\t\tsx = source[0]; sy = source[1];\n\t\ttx = target[0]; ty = target[1];\n\t\trax = ra[0]; ray = ra[1];\n\t\trbx = rb[0]; rby = rb[1];\n\t\tif(lightBuffer.width > lightBuffer.height) {\n\t\t\tsx = sx;\n\t\t\ttx = tx;\n\t\t\trax = rax;\n\t\t\trbx = rbx;\n\t\t}\n\t\telse {\n\t\t\tsy = sy;\n\t\t\tty = ty;\n\t\t\tray = ray;\n\t\t\trby = rby;\n\t\t}\n\t\tctx.beginPath();\n\t\tctx.moveTo(sx, sy);\n\t\tctx.bezierCurveTo(rax, ray, rbx, rby, tx, ty);\n\t\tctx.strokeStyle = outerColor;\n\t\tctx.lineWidth = round(cos((frameCount+frameOffset)*speeda)*lineSize);\n\t\tctx.lineCap = \"round\";\n\t\tctx.stroke();\n\t\tctx.closePath();\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(sx, sy);\n\t\tctx.bezierCurveTo(rax, ray, rbx, rby, tx, ty);\n\t\tctx.strokeStyle = innerColor;\n\t\tctx.lineWidth = round(cos((frameCount+frameOffset)*speeda)*~~(lineSize/4));\n\t\tctx.lineCap = \"round\";\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n})();\n\n/**\n * Draw a mote.\n */\nconst drawMote = (function() {\n\tlet pulse = 0|0, pregnant = 0|0, injured = 0|0, lastMeal = 0|0, size = 0.0,\n\tplasmaSource = vec2(), plasmaTarget = vec2(), sc = 0.0, sw = 0.0, sch = 0.0, \n\tswh = 0.0, colorIndex = 0|0, px = 0.0, py = 0.0, sprite;\n\treturn function drawMote(entity) {\n\t\tlightCtx.globalCompositeOperation = \"lighter\";\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\t({pulse, pregnant, injured, lastMeal} = entity);\n\t\tsize = entity.size * displayProps.minDimension;\n\t\tif(pregnant) {\n\t\t\tsc = size * cos((frameCount+pulse) * 0.2) * (sqrt(pregnant)+1);\n\t\t\tsw = size * sin((frameCount+pulse+tf) * 0.2) * (sqrt(pregnant)+1)*0.1;\n\t\t}\n\t\telse if(injured) {\n\t\t\tsc = size * cos((frameCount+pulse) * (0.2+(1-1/injured)));\n\t\t\tsw = size * sin((frameCount+pulse+tf) * 0.2)*0.1; //* (0.2+(1-1/injured)))*0.25;\n\t\t}\n\t\telse {\n\t\t\tsc = size * cos((frameCount+pulse) * 0.2);\n\t\t\tsw = size * sin((frameCount+pulse+tf) * 0.2)*0.1;\n\t\t}\n\t\tsch = sc*0.5;\n\t\tswh = sw*0.5;\n\t\tcolorIndex = sprites.util.colorIndex(entity.color[COLOR_R], entity.color[COLOR_G], entity.color[COLOR_B]);\n\t\tsprite = sprites.motes.get(colorIndex);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-sch, py-sch, sc, sc);\n\t\tsprite = sprites.motes.getCenter();\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-sch, py-sch, sc, sc);\n\t\tif(entity.target && entity.action == ACT_ATTACK) {\n\t\t\t// need vectors but in screen space, not absolute space\n\t\t\tplasmaSource[0] = px;\n\t\t\tplasmaSource[1] = py;\n\t\t\tplasmaTarget[0] = screenSpace(entity.target.pos[0]);\n\t\t\tplasmaTarget[1] = screenSpace(entity.target.pos[1]);\n\tdrawPlasmaLine(lightCtx, plasmaSource, plasmaTarget, sprites.motes.getColorString(colorIndex), \"white\", 5, pulse);\n\t\t}\n\t}\n})();\n\n/**\n * Draws a photon.\n */\nconst drawPhoton = (function() {\n\tlet sw = 0.0, swh = 0.0, px = 0.0, py = 0.0, ps = 0.0, pulse = 0|0, sprite;\n\treturn function drawPhoton(entity) {\n\t\tupdateCompositeOperation(lightCtx, \"lighter\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\t\tsprite = sprites.photons.get(entity.color);\n\t\tps = constants.PHOTON_BASE_SIZE * displayProps.minDimension; //sprite.pixelSize;\n\t\tpulse = entity.pulse;\n\t\tsw = (ps * 0.75 * (cos((frameCount+pulse)*0.3) * sin((frameCount+pulse)*0.1))) + \n\t\t     (ps * 0.25);\n\t\tswh = sw*0.5;\n\t\tlightCtx.drawImage(sprite.canvas, 0, 0, sprite.pixelSize, sprite.pixelSize, px-swh, py-swh, sw, sw);\n\t}\n})();\n\n/**\n * Draws a marker.\n */\nconst drawMarker = (function() {\n\tlet sw = 0.0, swh = 0.0, px = 0.0, py = 0.0, ps = 0.0, sprite;\n\treturn function drawMarker(entity) {\n\t\tupdateCompositeOperation(lightCtx, \"lighter\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\t\tsprite = sprites.markers.get();\n\t\tps = Math.pow(100 - entity.mass, 1.5)*0.5;\n\n\t\tsw = ps;// * 0.55 * sin((frameCount)*0.3) + (ps * 0.45);\n\t\tswh = sw*0.5;\n\t\tlightCtx.drawImage(sprite.canvas, 0, 0, sprite.pixelSize, sprite.pixelSize, px-swh, py-swh, sw, sw);\n\n\t\tsw = ps * cos(frameCount*10);\n\t\tswh = sw*0.5;\n\t\tlightCtx.drawImage(sprite.canvas, 0, 0, sprite.pixelSize, sprite.pixelSize, px-swh, py-swh, sw, sw);\n\t}\n})();\n\n\n/**\n * Draws a void.\n */\nconst drawVoid = (function() {\n\tlet sc = 0.0, sch = 0.0, px = 0.0, py = 0.0, ox = 0.0, oy = 0.0, sprite, \n\t    sw = 0.0, swh = 0.0, colorIndex = 0|0;\n\treturn function drawVoid(entity) {\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\tsc = entity.size * displayProps.minDimension * 1+(sin(frameCount*0.2));\n\t\tsch = sc*0.5;\n\n\t\tsprite = sprites.voids.get();\n\t\tupdateCompositeOperation(darkCtx, \"source-over\");\n\t\tdarkCtx.drawImage(sprite.canvas, px-sch, py-sch, sc, sc);\n\t\tswitch(entity.lastMeal) {\n\t\t\tcase -1:colorIndex = 0x888; break;\n\t\t\tcase COLOR_R:colorIndex = 0xf44; break;\n\t\t\tcase COLOR_G:colorIndex = 0x4f4; break;\n\t\t\tcase COLOR_B:colorIndex = 0x44f; break;\n\t\t}\n\t\t// white patch\n\t\tsw = sc*1.7;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.0127)*sc*0.1;\n\t\toy = cos(frameCount*0.0127)*sc*0.1;\n\t\tsprite = sprites.motes.get(0xfff);\n\t\tupdateCompositeOperation(darkCtx, \"soft-light\");\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t\t// color patch\n\t\tsw = sc*1.2;\n\t\tswh = sw*0.5;\n\t\tox = cos(frameCount*0.023)*sc*0.13;\n\t\toy = sin(frameCount*0.023)*sc*0.13;\n\t\tsprite = sprites.motes.get(colorIndex);\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t\t// dark patch\n\t\tsprite = sprites.motes.get(0x000);\n\t\tsw = sc*1.65;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.0122)*sc*0.15;\n\t\toy = cos(frameCount*0.0122)*sc*0.15;\n\t\tupdateCompositeOperation(darkCtx, \"multiply\");\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t}\n})();\n\n/**\n * Draws an emitter.\n */\nconst drawEmitter = (function() {\n\tlet sc = 0.0, sch = 0.0, px = 0.0, py = 0.0, ox = 0.0, oy = 0.0, sprite, \n\t    sw = 0.0, swh = 0.0;\n\treturn function drawEmitter(entity) {\n\t\tupdateCompositeOperation(lightCtx, \"lighter\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\tsc = entity.size * displayProps.minDimension;\n\t\t//sc = sc + (sc*(sin(frameCount*0.05))/100);\n\t\tsch = sc*0.5;\n\n\t\tsprite = sprites.emitters.get();\n\t\tlightCtx.drawImage(sprite.canvas, px-sch, py-sch, sc, sc);\n\n\t\tsw = cos((frameCount)*0.2)*sc*1.7;\n\t\tswh = sw*0.5;\n\n\t\tsprite = sprites.motes.get(0x333);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-swh, py-swh, sw, sw);\n\n\t\ttry {\n\t\tsw = sc*1.3;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.08)*sc*(0.1 - (entity.ratios[0]*0.1));\n\t\toy = cos(frameCount*0.08)*sc*(0.1 - (entity.ratios[0]*0.1));\n\t\tsprite = sprites.motes.get(entity.ratios[0]*15.9 << 8);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\n\t\tsw = sc*1.3;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.08+2.094394)*sc*(0.1 - (entity.ratios[1]*0.1));\n\t\toy = cos(frameCount*0.08+2.094394)*sc*(0.1 - (entity.ratios[1]*0.1));\n\t\tsprite = sprites.motes.get(entity.ratios[1]*15.9 << 4);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\n\t\tsw = sc*1.3;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.08+4.188789)*sc*(0.1 - (entity.ratios[2]*0.1));\n\t\toy = cos(frameCount*0.08+4.188789)*sc*(0.1 - (entity.ratios[2]*0.1));\n\t\tsprite = sprites.motes.get(~~(entity.ratios[2]*15.9));\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t\t} catch (e) {console.log(e.message)}\n\t}\n})();\n\n\n/**\n * Draws an antigraviton cluster.\n */\nconst drawAntiGravitonCluster = (function() {\n\tlet size = 0.0, plasmaSource = vec2(), plasmaTarget = vec2(), lw = 4,\n\t\t\touterColor = \"rgba(0,0,0,0.3)\", innerColor = \"rgba(0,0,0,0.7)\",\n\t\t\tpi3rd = PI*(1/3), px = 0.0, py = 0.0, ox = 0.0, oy = 0.0,\n\t\t\tsc = 0.0, sch = 0.0, sprite;\n\tfunction drawAntiPlasma(offset, length) {\n\t\tox = sin(frameCount*0.08+offset)*sc*length;\n\t\toy = cos(frameCount*0.08+offset)*sc*length;\n\t\tplasmaTarget[0] = px+ox;\n\t\tplasmaTarget[1] = py+oy;\n\t\tdrawPlasmaLine(darkCtx, plasmaSource, plasmaTarget, outerColor, innerColor, lw);\n\t}\n\treturn function drawAntiGravitonCluster(entity) {\n\t\tupdateCompositeOperation(darkCtx, \"multiply\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\tsize = entity.size * displayProps.minDimension;\n\t\tsc = size;\n\t\tlw = min(4, ~~(sc/2));\n\t\tsch = sc*0.5;\n\t\tplasmaSource[0] = px;\n\t\tplasmaSource[1] = py;\n\n\t\tdrawAntiPlasma(0, 0.5);\n\t\tdrawAntiPlasma(pi3rd*2, 0.5);\n\t\tdrawAntiPlasma(pi3rd*4, 0.5);\n\t\tdrawAntiPlasma(pi3rd, 0.25);\n\t\tdrawAntiPlasma(pi3rd*3, 0.25);\n\t\tdrawAntiPlasma(pi3rd*5, 0.25);\n\n\t\tsprite = sprites.motes.get(0x000);\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-sch, py-sch, sc, sc);\n\t}\n})();\n\nexport const init = function(display) {\n\tdisplayProps = display.props;\n\ttiming = display.timing;\n\tlightBuffer = display.buffersByLabel.entitiesLight;\n\tdarkBuffer = display.buffersByLabel.entitiesDark;\n\tlightCtx = lightBuffer.context;\n\tdarkCtx = darkBuffer.context;\n\tupdateProps();\n\tdisplayProps.events.on(\"resize\", updateProps);\n\tsprites.init(displayProps);\n}\n\n/**\n * Draw call for all entities. Loops through game entities and draws them according\n * to kind and displayProps.\n */\nexport const draw = (function() {\n\t// these variables are shared by draw calls below\n\tlet i, l, entity, px, py;\n\tlet lightClearStyle = \"rgba(0,0,0,0.2)\";\n\tlet darkClearStyle  = \"rgba(0,0,0,0.1)\";\n\n\treturn function draw(state) {\n\t\tupdateCompositeOperation(lightCtx, \"destination-out\"); //\"source-over\");\n\t\tlightCtx.fillStyle = lightClearStyle;\n\t\tlightCtx.fillRect(0, 0, lightBuffer.width, lightBuffer.height);\n\t\tupdateCompositeOperation(darkCtx, \"destination-out\");\n\t\tdarkCtx.fillStyle = darkClearStyle;\n\t\tdarkCtx.clearRect(0, 0, darkBuffer.width, darkBuffer.height);\n\t\tframeCount = timing.frameCount;\n\t\tlet mask = sprites.ui.get(\"mask\");\n\t\tPhotons.forEach(drawPhoton);\n\t\tfor(i = 0, l = state.entities.length; i < l; ++i) {\n\t\t\tentity = state.entities[i];\n\t\t\tpx = screenSpace(entity.pos[0]);\n\t\t\tpy = screenSpace(entity.pos[1]);\n\t\t\tif(offscreen(px, py)) continue;\n\t\t\tif(entity instanceof Mote) drawMote(entity);\n\t\t\telse if(entity instanceof Photon) drawPhoton(entity);\n\t\t\telse if(entity instanceof Void) drawVoid(entity);\n\t\t\telse if(entity instanceof Emitter) drawEmitter(entity);\n\t\t\telse if(entity instanceof AntiGravitonCluster) drawAntiGravitonCluster(entity);\n\t\t\telse if(entity instanceof Ripple) drawMarker(entity);\n\t\t}\n\t\tupdateCompositeOperation(lightCtx, \"destination-out\");\n\t\tlightCtx.drawImage(mask.canvas, 0, 0, displayProps.minDimension, displayProps.minDimension);\n\t\tupdateCompositeOperation(darkCtx, \"destination-out\");\n\t\tdarkCtx.drawImage(mask.canvas, 0, 0, displayProps.minDimension, displayProps.minDimension);\n\t}\n})();\n\nfunction updateProps() {\n\tlet {width, height, minDimension, orientation} = displayProps;\n\tlet ox, oy;\n\tlightBuffer.width = darkBuffer.width = minDimension;\n\tlightBuffer.height = darkBuffer.height = minDimension;\n\tif(orientation) {\n\t\tox = 0;\n\t\toy = (height-width)/2;\t\n\t}\n\telse {\n\t\tox = (width-height)/2;\n\t\toy = 0;\n\t}\n\tlightBuffer.offsetX = darkBuffer.offsetX = ox;\n\tlightBuffer.offsetY = darkBuffer.offsetY = oy;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/entities.js\n// module id = 40\n// module chunks = 0","\"use strict\";\nimport {MOTE_BASE_SIZE} from \"../../photonomix.constants.js\";\nimport {scaleSprite} from \"./util\";\nvar moteSprites, moteMaskCanvas, moteCenter, moteSpriteSheetContext, \n    moteMaskContext, moteTmpCanvas, moteTmpContext, spriteScale, moteSpriteSize,\n\t\tmotePixelSize, moteSpriteSheetCanvas;\nconst MASK_R = 0xf00;\nconst MASK_G = 0x0f0;\nconst MASK_B = 0x00f;\nconst colorStrings = Array(4096);\n\nexport function getColorString(index) {\n\treturn colorStrings[index];\n}\n\nexport function get(index) {\n\treturn moteSprites[index];\n}\n\nexport function getCenter() {\n\treturn moteCenter;\n}\n\nexport function init(props) {\n\tspriteScale = props.minDimension;\n\tmoteSpriteSize = MOTE_BASE_SIZE*4;\n\tmotePixelSize = scaleSprite(spriteScale, moteSpriteSize);\n\n\tinitMask();\n\tinitCenterSprite();\n\tinitSpriteSheet();\n}\n\nfunction initCenterSprite() {\n\tlet w = motePixelSize;\n\tlet h = motePixelSize;\n\tlet px = 0;\n\tlet py = 0;\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = w;\n\tcanvas.height = h;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.globalCompositeOperation = \"copy\";\n\tcontext.drawImage(moteMaskCanvas, 0, 0, w, h);\n\tcontext.globalCompositeOperation = \"source-in\";\n\tcontext.fillStyle = \"rgba(255,255,255,0.15)\";\n\tcontext.fillRect(0, 0, w, h);\n\tmoteCenter = {\n\t\tcanvas:canvas,\n\t\tcontext:context,\n\t\tpixelSize:motePixelSize,\n\t\tsw:motePixelSize,\n\t\tsh:motePixelSize,\n\t\tsx:px,\n\t\tsy:py\n\t}\n}\n\nfunction initMask() {\n\tmoteMaskCanvas = document.createElement(\"canvas\");\n\tmoteMaskCanvas.width = moteMaskCanvas.height = motePixelSize;\n\tmoteMaskContext = moteMaskCanvas.getContext(\"2d\");\t\n\tlet g = moteMaskContext.createRadialGradient(\n\t\tmotePixelSize/2, motePixelSize/2, motePixelSize/2,\n\t\tmotePixelSize/2, motePixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(255,255,255,1.0\");\n\tg.addColorStop(0.8, \"rgba(255,255,255,0.5)\");\n\tg.addColorStop(0.1, \"rgba(255,255,255,0.0)\");\n\tmoteMaskContext.fillStyle = g;\n\tmoteMaskContext.fillRect(0, 0, motePixelSize, motePixelSize);\n}\n\nfunction initSpriteSheet() {\n\tmoteTmpCanvas = document.createElement(\"canvas\");\n\tmoteTmpCanvas.width = moteTmpCanvas.height = motePixelSize;\n\tmoteTmpContext = moteTmpCanvas.getContext(\"2d\");\n\n\tmoteSpriteSheetCanvas = document.createElement(\"canvas\");\n\tmoteSpriteSheetCanvas.width = moteSpriteSheetCanvas.height = motePixelSize*64;\n\tmoteSpriteSheetContext = moteSpriteSheetCanvas.getContext(\"2d\");\t\n\n\tmoteSprites = Array(4096);\n\tfor(let i = 0; i < 4096; ++i) {\n\t\tcolorStrings[i] = \"rgb(\" +((i & MASK_R) >> 4)+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\",\"+(i  & MASK_G)+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\",\"+((i & MASK_B) << 4)+\")\";\t\n\t\tmoteSprites[i] = createMoteSprite(i, colorStrings[i]);\n\t}\n}\n\nfunction createMoteSprite(index, color) {\n\tlet w = motePixelSize;\n\tlet h = motePixelSize;\n\tlet y = (index%64);\n\tlet x = (index-y)/64;\n\tlet py = y*motePixelSize;\n\tlet px = x*motePixelSize;\n\tmoteTmpContext.globalCompositeOperation = \"copy\";\n\tmoteTmpContext.drawImage(moteMaskCanvas, 0, 0, w, h);\n\tmoteTmpContext.globalCompositeOperation = \"source-in\";\n\tmoteTmpContext.fillStyle = color;\n\tmoteTmpContext.fillRect(0, 0, w, h);\n\tmoteSpriteSheetContext.drawImage(moteTmpCanvas, px, py, w, h);\n\treturn {\n\t\tcanvas:moteSpriteSheetCanvas,\n\t\tcontext:moteSpriteSheetContext,\n\t\tpixelSize:motePixelSize,\n\t\tsw:motePixelSize,\n\t\tsh:motePixelSize,\n\t\tsx:px,\n\t\tsy:py\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/motes.js\n// module id = 41\n// module chunks = 0","\"use strict\";\nimport {scaleSprite} from \"./util\";\n\nvar sprite;\n\n/**\n * Creates an emitter sprite.\n */\nexport function init(props) {\n\tlet pixelSize = scaleSprite(props.minDimension, 1);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet ctx = canvas.getContext(\"2d\");\t\n\tlet g = ctx.createRadialGradient(\n\t\tpixelSize/2, pixelSize/2, pixelSize/2,\n\t\tpixelSize/2, pixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(255,255,255,0.3)\");\n\tg.addColorStop(0.78, \"rgba(255,255,255,0.3)\");\n\tg.addColorStop(0.58, \"rgba(255,255,255,0.22)\");\n\tg.addColorStop(0.48, \"rgba(255,255,255,0.17)\");\n\tg.addColorStop(0.44, \"rgba(255,255,255,0.22)\");\n\tg.addColorStop(0.40, \"rgba(255,255,255,0.19)\");\n\tg.addColorStop(0.2, \"rgba(255,255,255,0.09)\");\n\tg.addColorStop(0.1, \"rgba(255,255,255,0.0)\");\n\tctx.fillStyle = g;\n\tctx.fillRect(0, 0, pixelSize, pixelSize);\n\tsprite = {\n\t\tcanvas:canvas,\n\t\tcontext:ctx,\n\t\tw:pixelSize,\n\t\th:pixelSize,\n\t\tpixelSize:pixelSize\n\t}\n}\n\nexport function get() {\n\treturn sprite;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/emitters.js\n// module id = 42\n// module chunks = 0","\"use strict\";\n\nimport {PHOTON_BASE_SIZE} from \"../../photonomix.constants.js\";\nimport {COLOR_R, COLOR_G, COLOR_B} from \"../../game/photons\";\n\nconst sprites = Array(3);\n\nexport function init(props) {\n\tsprites[COLOR_R] = createPhotonSprite(props.minDimension, PHOTON_BASE_SIZE, \"red\");\n\tsprites[COLOR_G] = createPhotonSprite(props.minDimension, PHOTON_BASE_SIZE, \"green\");\n\tsprites[COLOR_B] = createPhotonSprite(props.minDimension, PHOTON_BASE_SIZE, \"blue\");\n}\n\nexport function get(color) {\n\treturn sprites[color];\n}\n\n/**\n * Creates a photon sprite.\n */\nfunction createPhotonSprite(scale, spriteSize, color) {\n\tlet pixelSize = 17;\n\tlet hps = ~~(pixelSize/2);\n\tlet qps = ~~(pixelSize/4);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet context = canvas.getContext(\"2d\");\n\tlet g;\n\tg = context.createRadialGradient(hps, hps, hps, hps, hps, 0);\n\tg.addColorStop(0.7, color);\n\tg.addColorStop(1.0, \"white\");\n\tcontext.globalCompositeOperation = \"source-over\";\n\tcontext.beginPath();\n\tcontext.moveTo(hps, 0);\n\tcontext.quadraticCurveTo(hps, hps, 0, hps);\n\tcontext.quadraticCurveTo(hps, hps, hps, pixelSize);\n\tcontext.quadraticCurveTo(hps, hps, pixelSize, hps);\n\tcontext.quadraticCurveTo(hps, hps, hps, 0);\n\tcontext.fillStyle = g;\n\tcontext.fill();\n\tcontext.closePath();\n\tcontext.beginPath();\n\tcontext.moveTo(hps, qps);\n\tcontext.lineTo(hps, pixelSize-qps);\n\tcontext.moveTo(qps, hps);\n\tcontext.lineTo(pixelSize-qps, hps);\n\tcontext.strokeStyle = \"white\";\n\tcontext.lineWidth = 1;\n\tcontext.stroke();\n\tcontext.closePath();\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:context,\n\t\tpixelSize:pixelSize,\n\t\tw:pixelSize,\n\t\th:pixelSize\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/photons.js\n// module id = 43\n// module chunks = 0","\"use strict\";\nimport {scaleSprite} from \"./util\";\n\nvar sprite;\n\n/**\n * Creates a void sprite.\n */\nexport function init(props) {\n\tlet pixelSize = scaleSprite(props.minDimension, 1);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet ctx = canvas.getContext(\"2d\");\t\n\tlet g = ctx.createRadialGradient(\n\t\tpixelSize/2, pixelSize/2, pixelSize/2,\n\t\tpixelSize/2, pixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(0,0,0,1.0)\");\n\tg.addColorStop(0.50, \"rgba(0,0,0,1.0)\");\n\tg.addColorStop(0.479, \"rgba(0,0,0,0.99)\");\n\tg.addColorStop(0.442, \"rgba(0,0,0,0.98)\");\n\tg.addColorStop(0.44, \"rgba(255,255,255,0.95)\");\n\tg.addColorStop(0.43, \"rgba(255,255,255,0.95)\");\n\tg.addColorStop(0.41, \"rgba(255,255,255,0.39)\");\n\tg.addColorStop(0.37, \"rgba(255,255,255,0.29)\");\n\tg.addColorStop(0.36, \"rgba(255,255,255,0.32)\");\n\tg.addColorStop(0.34, \"rgba(255,255,255,0.31)\");\n\tg.addColorStop(0.30, \"rgba(255,255,255,0.35)\");\n\tg.addColorStop(0.28, \"rgba(255,255,255,0.39)\");\n\tg.addColorStop(0.26, \"rgba(255,255,255,0.35)\");\n\tg.addColorStop(0.23, \"rgba(255,255,255,0.30)\");\n\tg.addColorStop(0.21, \"rgba(255,255,255,0.26)\");\n\tg.addColorStop(0.20, \"rgba(255,255,255,0.31)\");\n\tg.addColorStop(0.19, \"rgba(255,255,255,0.34)\");\n\tg.addColorStop(0.17, \"rgba(255,255,255,0.29)\");\n\tg.addColorStop(0.16, \"rgba(255,255,255,0.21)\");\n\tg.addColorStop(0.15, \"rgba(255,255,255,0.19)\");\n\tg.addColorStop(0.14, \"rgba(255,255,255,0.15)\");\n\tg.addColorStop(0.10, \"rgba(255,255,255,0.09)\");\n\tg.addColorStop(0.09, \"rgba(255,255,255,0.15)\");\n\tg.addColorStop(0.07, \"rgba(255,255,255,0.12)\");\n\tg.addColorStop(0.05, \"rgba(255,255,255,0.09)\");\n\tg.addColorStop(0.0, \"rgba(0,0,0,0.0)\");\n\tctx.fillStyle = g;\n\tctx.fillRect(0, 0, pixelSize, pixelSize);\n\tsprite = {\n\t\tcanvas:canvas,\n\t\tcontext:ctx,\n\t\tw:pixelSize,\n\t\th:pixelSize,\n\t\tpixelSize:pixelSize\n\t}\n}\n\nexport function get() {\n\treturn sprite;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/voids.js\n// module id = 44\n// module chunks = 0","\"use strict\";\nimport {scaleSprite} from \"./util\";\n\nvar sprite;\n\nexport function init(props) {\n\tlet pixelSize = scaleSprite(props.minDimension, 1);\n\tlet hps = ~~(pixelSize/2);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet context = canvas.getContext(\"2d\");\n\tlet g = context.createRadialGradient(hps, hps, hps, hps, hps, 0);\n\tg.addColorStop(0.0, \"rgba(255,255,255,0.0)\");\n\tg.addColorStop(0.75, \"rgba(255,255,255,0.0)\");\n\tg.addColorStop(0.8, \"rgba(255,255,255,0.007)\");\n\tg.addColorStop(0.85, \"rgba(255,255,255,0.007)\");\n\tg.addColorStop(0.9, \"rgba(255,255,255,0.0)\");\n\tcontext.fillStyle = g;\n\tcontext.fillRect(0, 0, pixelSize, pixelSize);\n\tsprite = {\n\t\tcanvas:canvas,\n\t\tcontext:context,\n\t\tpixelSize:pixelSize,\n\t\tw:pixelSize,\n\t\th:pixelSize\n\t}\n}\n\nexport function get() {return sprite;}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/markers.js\n// module id = 45\n// module chunks = 0","\"use strict\";\n\nvar sprites = {\n\tmask:undefined\n}\n\nexport function get(which) {\n\treturn sprites[which];\n}\n\nexport function init(display) {\n\tlet pixelSize = display.minDimension;\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet ctx = canvas.getContext(\"2d\");\t\n\tlet g = ctx.createRadialGradient(\n\t\tpixelSize/2, pixelSize/2, pixelSize/2,\n\t\tpixelSize/2, pixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(0,0,0,0.0)\");\n\tg.addColorStop(0.05, \"rgba(0,0,0,0.0)\");\n\tg.addColorStop(0.0, \"rgba(255,255,255,1.0)\");\n\tctx.fillStyle = g;\n\tctx.fillRect(0, 0, pixelSize, pixelSize);\n\tsprites.mask = {\n\t\tcanvas:canvas,\n\t\tcontext:ctx,\n\t\tw:pixelSize,\n\t\th:pixelSize,\n\t\tpixelSize:pixelSize\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites/ui.js\n// module id = 46\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {TARGET_FPS, GLOBAL_DRAG, EMITTER_SIZE} from \"../photonomix.constants\";\nimport {rotate, drag, gravitate, avoid, norm_ratio} from \"../photonomix.util\";\nimport * as Photons from \"./photons\";\nimport Ripple from \"./Ripple\";\nlet {vec2, vec3, times, mut_times, distance} = vectrix.vectors;\nlet {mut_plus} = vectrix.matrices;\nlet {random, sqrt, ceil, min, PI} = Math;\nconst POS_C = vec2(0,0);\n\n/**\n * Emitters are \"white holes\" that spit out photons on a fixed schedule until depleted.\n */\nexport default function Emitter(ipos = vec2(), ivel = vec2(), mass = 1, arms = undefined, ratios = vec3(1, 1, 1)) {\n\tthis.pos = vec2(ipos);\n\tthis.vel = vec2(ivel);\n\tthis.ratios = norm_ratio(ratios);\n\tthis.birthMass = mass;\n\tthis.mass = 1;\n\tthis.initialMass = mass;\n\tthis.arms = arms||(ceil(random()*random()*50));\n\tthis.size = 0;\n\tthis.next = ~~(random()*3);\n\treturn this;\n}\n\nlet scratchVec1 = vec2(), emissionsPerSecond = 0|0, emissionsPerFrame = 0|0, \n\t\ttargetFrame = 0|0, i = 0|0, len = 0|0, entity, a_dist = 0.0, consume = 0|0;\nEmitter.prototype.tick = function(entities, delta, frameCount) {\n\t/* jshint unused:false */\n\tif(this.birthMass > 0) {\n\t\tconsume = min(this.birthMass, ceil(this.mass/100));\n\t\tthis.birthMass -= consume;\n\t\tthis.mass += consume;\n\t}\n\tthis.size = sqrt(this.mass/PI) * EMITTER_SIZE;\n\tif(this.birthMass === 0) { // don't start producing until finished spawning\n\t\temissionsPerSecond = this.initialMass/20;\n\t\ttargetFrame = ceil(TARGET_FPS/emissionsPerSecond);\n\t\temissionsPerFrame = emissionsPerSecond/TARGET_FPS;\n\t\tif(frameCount % targetFrame === 0) {\n\t\t\twhile((emissionsPerFrame-- > 0) && this.mass > 0) {\n\t\t\t\tthis.mass--;\n\t\t\t\tthis.emitPhoton();\n\t\t\t}\n\t\t}\n\t}\n\t// last turn's move, has to happen first\n\tmut_plus(this.pos, times(this.vel, delta, scratchVec1));\n\t// apply drag\n\tmut_plus(this.vel, drag(this.vel, GLOBAL_DRAG));\n\t// avoid edge\n\tmut_plus(this.vel, avoid(this.vel, this.pos, POS_C, 1.3, 0.001, scratchVec1));\n\n\tPhotons.forEach((photon) => {\n\t\tmut_plus(photon.vel, mut_times(\n\t\t\tgravitate(photon.pos, this.pos, -this.mass*photon.mass, scratchVec1),\n\t\t\t1/photon.mass)\n\t\t);\n\t});\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\ta_dist = distance(this.pos, entity.pos);\n\t\tif(entity instanceof Emitter) {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, this.mass*entity.mass, scratchVec1),\n\t\t\t\t1/entity.mass)\n\t\t\t);\n\t\t}\n\t\telse if(!(entity instanceof Ripple))  {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, -this.mass*entity.mass, scratchVec1),\n\t\t\t\t1/entity.mass)\n\t\t\t);\n\t\t}\n\t}\n}\n\nEmitter.prototype.emitPhoton = (function() {\n\tlet pos = vec2(), vel = vec2(), radians = 0.0, mim = 0.0, color = 0|0;\n\treturn function emitPhoton() {\n\t\tcolor = this.next;\n\t\tpos[0] = this.size/5;\n\t\tpos[1] = this.size/5;\n\t\tmut_plus(pos, this.pos);\n\t\tmim = (this.mass%this.initialMass);\n\t\tradians = (mim/(this.initialMass/2));\n\t\tradians = radians + (mim%this.arms)*(2/this.arms); // split across arms\n\t\tmut_plus(rotate(pos, this.pos, radians, pos), this.pos);\n\t\tthis.next = getColor(this.ratios);\n\t\tPhotons.create(pos, vel, color);\n\t}\n})();\n\nfunction getColor(ratios) {\n\tlet rand = random();\n\tif(rand < ratios[0]) return 0;\n\telse if(rand < ratios[0]+ratios[1]) return 1;\n\telse return 2;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Emitter.js\n// module id = 47\n// module chunks = 0","\"use strict\";\nimport {TARGET_FPS} from \"../photonomix.constants\";\nimport * as vectrix from  \"@nphyx/vectrix\";\n\nexport const MARKER_HIT = 0;\n\nexport default function Marker(type, pos, lifetime = TARGET_FPS) {\n\tthis.type = type;\n\tthis.pos = vectrix.vectors.vec2(pos);\n\tthis.start = lifetime;\n\tthis.lifetime = lifetime;\n}\n\nMarker.prototype.tick = function() {\n\tthis.lifetime--;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Marker.js\n// module id = 48\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {rotate, drag, avoid, accelerate} from  \"../photonomix.util\";\nimport {Void} from \"./\";\nimport * as photons from \"./photons\";\nconst {vec2, times, distance, mut_copy} = vectrix.vectors;\nconst {mut_plus} = vectrix.matrices;\nimport {TARGET_FPS, MOTE_BASE_SIZE, GLOBAL_DRAG} from \"../photonomix.constants\";\nconst {random, sqrt, PI, ceil, min, max} = Math;\nconst POS_C = vec2(0,0);\n\nexport default function AntiGravitonCluster(ipos = vec2(), ivel = vec2(), mass = 1) {\n\tthis.pos = vec2(ipos);\n\tthis.vel = vec2(ivel);\n\tthis.size = 0;\n\tthis.birthMass = this.initialMass = mass;\n\tthis.mass = 1;\n\tthis.instability = 0;\n\tthis.size = 0;\n\treturn this;\n}\n\nlet scratch = vec2(), entity, i = 0|0, len = 0|0, dist = 0.0, consume = 0|0;\nAntiGravitonCluster.prototype.tick = function(entities, delta, frameCount) {\n\tif(this.birthMass > 0) {\n\t\tconsume = min(this.birthMass, ceil(this.mass/10));\n\t\tthis.birthMass -= consume;\n\t\tthis.mass += consume;\n\t}\n\tthis.size = sqrt(this.mass*0.05/PI) * MOTE_BASE_SIZE;\n\t// last turn's move, has to happen first\n\tmut_plus(this.pos, times(this.vel, delta, scratch));\n\tthis.initialMass = max(this.mass, this.initialMass);\n\n\t// apply basic forces\n\t// don't go off the screen\n\tmut_plus(this.vel, avoid(this.vel, this.pos, POS_C, 1.3, 0.01, scratch));\n\t// apply drag\n\tmut_plus(this.vel, drag(this.vel, GLOBAL_DRAG));\n\n\tif(this.birthMass === 0) {\n\t\tthis.instability += this.mass*0.003;\n\t}\n\tif((frameCount % ceil(TARGET_FPS*0.05)) === 0) {\n\t\twhile((this.instability > 0) && (this.mass > 0)) {\n\t\t\tentities.push(this.emitPhoton());\n\t\t\tthis.mass -= min(this.mass, 7);\n\t\t\tthis.instability -= 0.9;\n\t\t}\n\t}\n\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\tdist = distance(this.pos, entity.pos);\n\n\t\tif(entity instanceof Void) {\n\t\t\tif((dist < (entity.size+this.size)*0.5)) {\n\t\t\t\tconsume = min(entity.mass, ceil((entity.mass+entity.birthMass)/10));\n\t\t\t\tthis.mass += consume;\n\t\t\t\tentity.mass -= consume;\n\t\t\t\tthis.instability += consume*0.07;\n\t\t\t}\n\t\t\tif(dist < this.size*10) mut_plus(this.vel, accelerate(this.pos, entity.pos, this.size*dist*5, scratch));\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nAntiGravitonCluster.prototype.emitPhoton = (function() {\n\tlet pos = vec2(), vel = vec2(), rot = vec2(), radians = 0.0, mim = 0.0, color = 0|0;\n\treturn function emitPhoton() {\n\t\tcolor = ~~(random()*3);\n\t\tpos[0] = this.size*0.1;\n\t\tpos[1] = this.size*0.1;\n\t\tmut_plus(pos, this.pos);\n\t\tmut_copy(vel, this.vel);\n\t\tmim = (this.mass%this.initialMass);\n\t\tradians = (mim/(this.initialMass/2));\n\t\tradians = radians + (mim%100)*(2/100); // split across arms\n\t\tmut_copy(rot, rotate(pos, this.pos, radians, pos));\n\t\tmut_plus(rot, this.pos);\n\t\tmut_plus(pos, rot);\n\t\t// introduce some jitter\n\t\tmut_plus(vel, accelerate(this.pos, pos, this.size*2, scratch));\n\t\treturn(photons.create(pos, vel, color));\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/AntiGravitonCluster.js\n// module id = 49\n// module chunks = 0","\"use strict\";\nimport {drawCircle} from \"./\";\nimport {DEBUG} from \"../photonomix.constants\";\nimport {controls} from \"@nphyx/pxene\";\n\nlet ctx, uiBuffer;\nlet displayProps;\n\n/**\n * Creates debug markers on screen to show the center, top, left, bottom, right, topleft\n * and topright extremes of the main game area.\n */\nconst drawDebugMarkers = (function() {\n\tlet w, h, wh, hh;\n\treturn function drawDebugMarkers() {\n\t\tw = displayProps.width;\n\t\th = displayProps.height;\n\t\twh = w/2; \n\t\thh = h/2;\n\t\tdrawCircle(ctx,  0,  0, 4, \"yellow\", 1, \"white\");\n\t\tdrawCircle(ctx, wh,  0, 4, \"orange\", 1, \"white\");\n\t\tdrawCircle(ctx,  w,  0, 4, \"red\", 1, \"white\");\n\t\tdrawCircle(ctx,  0, hh, 4, \"white\", 1, \"white\");\n\t\tdrawCircle(ctx, wh, hh, 4, \"gray\", 1, \"white\");\n\t\tdrawCircle(ctx,  w, hh, 4, \"black\", 1, \"white\");\n\t\tdrawCircle(ctx,  0,  h, 4, \"blue\", 1, \"white\");\n\t\tdrawCircle(ctx, wh,  h, 4, \"cyan\", 1, \"white\");\n\t\tdrawCircle(ctx,  w,  h, 4, \"green\", 1, \"white\");\n\t}\n})();\n\n/**\n * Draws an edge button.\n */\nfunction drawEdgeButton(ctx, x, y, w, h) {\n\tlet halfButtonWidth = w*0.5;\n\tlet buttonHeight = h;\n\tlet cpXScale = w*0.122;\n\tlet beginX = x-halfButtonWidth;\n\tlet beginY = y;\n\tlet topX = x;\n\tlet topY = y-buttonHeight;\n\tlet endX = x+halfButtonWidth;\n\tlet endY = y;\n\tlet aCPX = beginX + cpXScale;\n\tlet aCPY = beginY - cpXScale;\n\tlet bCPX = beginX + cpXScale;\n\tlet bCPY = topY;\n\tlet cCPX = endX - cpXScale;\n\tlet cCPY = topY;\n\tlet dCPX = endX - cpXScale;\n\tlet dCPY = endY - cpXScale;\n\tlet color = \"rgba(255,255,255,0.1)\";\n\n\tctx.beginPath();\n\tctx.moveTo(beginX, beginY);\n\tctx.bezierCurveTo(aCPX, aCPY, bCPX, bCPY, topX, topY);\n\tctx.bezierCurveTo(cCPX, cCPY, dCPX, dCPY, endX, endY);\n\tctx.fillStyle = color;\n\tctx.strokeStyle = color;\n\tctx.lineWidth = 4;\n\tctx.fill();\n\tctx.closePath();\n}\n\n/**\n * Draws necessary text based on game state.\n */\nexport function drawUIText(game) {\n\tlet alpha, delta, color;\n\tlet w = displayProps.width;\n\tlet h = displayProps.height;\n\tlet err = true;\n\tlet size = 90;\n\tlet curTime = Date.now();\n\tif(game.started < 0 || game.started > curTime - 1000) {\n\t\tdelta = game.started > 0?curTime - game.started:0;\n\t\talpha = (1000 - delta)/1000;\n\t\tcolor = \"rgba(255,255,255,\"+alpha+\")\";\n\t\twhile(err) {\n\t\t\ttry {\n\t\t\t\tctx.font = size + \"px RightBankFLF\";\n\t\t\t\tctx.fillStyle = color;\n\t\t\t\twriteCentered(ctx, \"PHOTONOMIX\", w/2, h/2 + size/2);\n\t\t\t\terr = false;\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\terr = true;\n\t\t\t\tsize -= 10;\n\t\t\t}\n\t\t}\n\t\tctx.font = (size / 3) + \"px RightBankFLF\";\n\t\tctx.fillStyle = color;\n\t\twriteCentered(ctx, \"click to start\", w/2, h/2 + size);\n\t}\n}\n\nfunction drawPointer() {\n\tlet move = controls.getCursorPosition();\n\tdrawCircle(ctx, move[0], move[1], 5, \"white\");\n}\n\n/**\n * Draws UI elements.\n */\nexport function draw(game) {\n\tlet w = displayProps.width;\n\tlet h = displayProps.height;\n\tctx.clearRect(0, 0, w, h);\n\tif(DEBUG) drawDebugMarkers();\n\tdrawUIText(game);\n\tdrawPointer();\n}\n\nexport function writeCentered(ctx, text, x, y) {\n\tlet metrics = ctx.measureText(text);\n\tif(metrics.width > displayProps.width) throw new Error(\"text is wider than body\");\n\tctx.fillText(text, x - metrics.width/2, y);\n}\n\n/**\n * Initializes the UI submodule.\n * @param {Object} display pxene display object initialized with a ui buffer\n */\nexport function init(display) {\n\tdisplayProps = display.props;\n\tuiBuffer = display.buffersByLabel.ui;\n\tctx = uiBuffer.context;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/ui.js\n// module id = 50\n// module chunks = 0"],"sourceRoot":""}