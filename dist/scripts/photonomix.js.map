{"version":3,"sources":["webpack:///webpack/bootstrap 7356f034b98a8366c838","webpack:///./src/scripts/photonomix.constants.js","webpack:///./src/scripts/photonomix.util.js","webpack:///./src/scripts/game/index.js","webpack:///../nphyx-pxene/src/pxene.assets.js","webpack:///../nphyx-vectrix/src/vectrix.vectors.js","webpack:///../nphyx-vectrix/src/vectrix.matrices.js","webpack:///./src/scripts/draw/index.js","webpack:///./src/scripts/game/Photon.js","webpack:///../nphyx-pxene/src/pxene.events.js","webpack:///../nphyx-pxene/src/pxene.constants.js","webpack:///./src/scripts/draw/sprites.js","webpack:///./src/scripts/game/Mote.js","webpack:///./src/scripts/game/Void.js","webpack:///./src/scripts/photonomix.controls.js","webpack:///./src/scripts/photonomix.js","webpack:///../nphyx-pxene/src/controls/KeyState.js","webpack:///../nphyx-pxene/src/controls/KeyMap.js","webpack:///../nphyx-pxene/src/graphics/Sprite.js","webpack:///../nphyx-pxene/src/pxene.assets.mimeTypes.js","webpack:///../nphyx-pxene/src/graphics/CompositeSprite.js","webpack:///../nphyx-pxene/src/graphics/Atlas.js","webpack:///../nphyx-vectrix/src/vectrix.js","webpack:///../nphyx-vectrix/src/vectrix.quaternions.js","webpack:///../nphyx-pxene/src/graphics/BitmapFont.js","webpack:///../nphyx-pxene/src/pxene.display.js","webpack:///../nphyx-pxene/src/pxene.display.util.js","webpack:///../nphyx-pxene/src/pxene.display.buffers.js","webpack:///../nphyx-pxene/src/pxene.util.js","webpack:///../nphyx-pxene/src/pxene.BooleanArray.js","webpack:///../nphyx-pxene/src/pxene.CollisionMap.js","webpack:///./src/scripts/draw/bokeh.js","webpack:///./src/scripts/draw/entities.js","webpack:///./src/scripts/game/Emitter.js","webpack:///./src/scripts/game/Marker.js","webpack:///./src/scripts/game/AntiGravitonCluster.js","webpack:///./src/scripts/photonomix.bufferPools.js","webpack:///./src/scripts/draw/ui.js","webpack:///./src/scripts/photonomix.events.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","TARGET_FPS","MAX_MOTES","type","BUFFER_TYPE","SharedArrayBuffer","ArrayBuffer","twiddle","x","posneg","limit","v","min_v","max_v","Infinity","abs","random","ratio","a","b","x0","L","k","pow","E","scale","X","Y","vec2","magnitude","mut_normalize","distance","mut_times","mut_copy","mut_clamp","__WEBPACK_IMPORTED_MODULE_0__nphyx_vectrix__","minus","sqrt","cos","sin","PI","Math","twiddleVec","length","validate","isNaN","Error","dist","dist_diff","limitVecMut","gravitate","g_v","mag","y","p1","p2","strength","out","__WEBPACK_IMPORTED_MODULE_1__photonomix_constants__","e","console","log","fill","accelerate","drag","delta","dragStrength","dragSpeed","vel","avoid","aev","pos","opposite","maxDist","speed","absVec","outOfBounds","rotate","cosr","sinr","rdx","rdy","rvec","rdelta","r","shuffle","j","floor","Game","this","entities","photonBuffer","stats","pop","born","died","target","actions","registerActions","started","__WEBPACK_IMPORTED_MODULE_8__nphyx_vectrix__","marks","Uint16Array","__WEBPACK_IMPORTED_MODULE_9__photonomix_constants__","markpos","mark","start","motePool","__WEBPACK_IMPORTED_MODULE_7__photonomix_bufferPools__","__WEBPACK_IMPORTED_MODULE_0__Mote__","photonPool","__WEBPACK_IMPORTED_MODULE_4__Photon__","push","tick","entity","len","tick_delta","timing","interval","elapsed","frameCount","injured","bleed","dying","killMote","pregnant","split","__WEBPACK_IMPORTED_MODULE_3__Marker__","lifetime","mass","__WEBPACK_IMPORTED_MODULE_6__photonomix_util__","undefined","pool","destroy","splice","emitPhoton","center","p_c","base_vel","ipos","ivel","color","count","max","sum","g","mote","__WEBPACK_IMPORTED_MODULE_2__Emitter__","__WEBPACK_IMPORTED_MODULE_1__Void__","photons","registerAction","callback","bind","player","mouseUp","__WEBPACK_IMPORTED_MODULE_5__AntiGravitonCluster__","moveItem","item","oldList","newList","indexOf","fetchAsset","uri","fetchingURIs","completedURIs","fetching","enqueuedURIs","fetch","globalAssetPrefix","then","response","Promise","resolve","reject","ok","headers","__WEBPACK_IMPORTED_MODULE_0__pxene_assets_mimeTypes__","content","cache","storeAsset","makeProcessFetchResponse","setInterval","clearInterval","requestAsset","enqueueAsset","list","all","map","forEach","prefix","permutations","result","copy","slice","head","rest","next","concat","getAlias","getAliasCombo","factory","combo","asMethod","method","vector","res","apply","Array","arguments","Float32Array","wrap","create","vec3","vec4","lerp_element","t","cubic_step","f0","f1","f2","f3","normalize","mut_lerp","lerp","mut_cubic","cubic","times","min","clamp","toString","strings","toArray","cur","toFixed","join","vec","buffer","params","offset","size","shift","set","flatten","__WEBPACK_IMPORTED_MODULE_0__vectrix_matrices__","homogenous","dot","angle","cross","combos","aliases2d","aliasCombos2d","aliases3d","aliasCombos3d","aliases4d","aliasCombos4d","names","defineAliases","plus","mut_plus","mut_minus","acos","props","alen","blen","scratch","inv","inv2","fs","anorm","bnorm","tmp","a0","a1","a2","b0","b1","b2","minv","maxv","clamp_s","likeMatrices","rows","cols","mut_plus_scalar","plus_scalar","mut_minus_scalar","minus_scalar","values","matrix","vals","multiply_scalar","col","row","__WEBPACK_IMPORTED_MODULE_0__vectrix_vectors__","ar","ac","similar","brow","bcol","bcols","brows","bpos","acols","arows","arow","aroff","apos","opos","padLeft","repeat","colWidth","string","makeStrings","reduce","args","identity","translation","v2","from","v3","rotateX","rotateY","rotateZ","ctx","op","globalCompositeOperation","minDimension","width","height","fillStyle","lineWidth","strokeStyle","beginPath","arc","stroke","closePath","animating","__WEBPACK_IMPORTED_MODULE_0__bokeh__","__WEBPACK_IMPORTED_MODULE_1__entities__","game","__WEBPACK_IMPORTED_MODULE_3__ui__","state","display","controls","Photon","allocate","BUFFER_LENGTH","O_POS","O_VEL","intVals","Uint8ClampedArray","FLOAT_LENGTH","U8_LENGTH","defineProperties","O_COLOR","O_LIFE","O_MASS","__WEBPACK_IMPORTED_MODULE_2__photonomix_constants__","pulse","F32","tmpvec","surrounding","__WEBPACK_IMPORTED_MODULE_1__photonomix_util__","free","Events","queue","on","event","fire","createMoteSprite","index","pixelSize","motePixelSize","w","h","py","px","moteTmpContext","drawImage","moteMaskCanvas","fillRect","moteSpriteSheetContext","moteTmpCanvas","canvas","moteSpriteSheetCanvas","context","sw","sh","sx","sy","scaleSprite","spriteSize","moteSpriteScale","moteSpriteSize","document","createElement","getContext","moteMaskContext","moteSprites","createRadialGradient","addColorStop","colorStrings","MASK_R","MASK_G","MASK_B","moveTo","quadraticCurveTo","lineTo","hps","Mote","_photons","Uint8Array","bSpeed","__WEBPACK_IMPORTED_MODULE_0__photonomix_constants__","bSight","bAgro","bFear","U8_PHO","U8_COL","__WEBPACK_IMPORTED_MODULE_3__Photon__","Int8Array","I8_BYTE_OFFSET","I8_VAL_LENGTH","floatVals","F32_BYTE_OFFSET","FLOAT_VAL_LENGTH","F32_POS","VEC_BYTE_OFFSET","F32_VEL","ratios","F32_RAT","prefs","F32_PREF","color_string","__WEBPACK_IMPORTED_MODULE_2__photonomix_util__","I8_DYING","action","I8_ACT","I8_PREG","I8_INJURED","lastInjury","I8_LAST_INJURY","needsUpdate","I8_UPD","I8_PULSE","lastMeal","I8_MEAL","F32_SIZE","sizeMin","F32_SIZE_MIN","sizeMax","F32_SIZE_MAX","F32_SPEED","sight","F32_SIGHT","agro","F32_AGRO","fear","F32_FEAR","potential","F32_POTENTIAL","resistance","F32_RESISTANCE","F32_MASS","base_speed","base_sight","base_agro","base_fear","updateProperties","ceil","__WEBPACK_IMPORTED_MODULE_1__nphyx_vectrix__","POS_C","I8","U8_VAL_LENGTH","INT_VAL_LENGTH","scratch1","scratch2","runMaintenance","tmpPot","tmpRes","validateTarget","search","highest","deltar","deltag","deltab","mind","maxd","weight","__WEBPACK_IMPORTED_MODULE_4__Void__","discharge","eatPhoton","injure","by","choice","choiceVal","pvel","baby","photon","rpos","rphotons","Void","birthMass","eatTime","scratchVec1","a_dist","consume","__WEBPACK_IMPORTED_MODULE_3__photonomix_constants__","__WEBPACK_IMPORTED_MODULE_2____","updateCursorState","clientX","clientY","env","window","addEventListener","pointer","down","buttons","button","controlEvents","up","move","keys","keyCode","__WEBPACK_IMPORTED_MODULE_1__photonomix_events_js__","startGame","photonomix","displayConfig","container","bufferDescriptions","label","compositeMethod","scaleMethod","__WEBPACK_IMPORTED_MODULE_0__nphyx_pxene__","buffers","SCALE_KEEP_ASPECT","SCALE_NONE","pixelRatio","frameCallback","draw","util","__WEBPACK_IMPORTED_MODULE_4__photonomix_util__","constants","__WEBPACK_IMPORTED_MODULE_2__game__","__WEBPACK_IMPORTED_MODULE_1__draw__","init","__WEBPACK_IMPORTED_MODULE_5__photonomix_controls__","key","lastDown","lastUp","seal","KeyMap","toLowerCase","checkedDown","checkedUp","isDown","onceDown","Date","now","onceUp","Sprite","frameWidth","frameHeight","animations","flippedContext","ready","columns","image","flipped","generateFlipped","dx","dy","setTransform","dest","frame","animation","default","frameNum","startFrame","sprite","getX","getY","fromAsepriteAtlas","__WEBPACK_IMPORTED_MODULE_0__pxene_assets__","asset","aspr","meta","frameTags","anim","to","frames","addHandler","mimeType","cb","mimeHandlers","mimeTypeHandlerImages","blob","img","src","URL","createObjectURL","mimeTypeHandlerText","text","json","sprites","spriteCanvas","Atlas","layers","slices","source","layer","eachSlice","dims","filter","animate","prebake","dataCallback","numLayers","numFrames","layerHeight","layerNames","trim","data","opacity","blendMode","freeze","bounds","f","atlas","vectors","matrices","__WEBPACK_IMPORTED_MODULE_1__vectrix_matrices__","vecNrm","q","z","aliasCombos","slerp","invert","ax","bx","ay","az","bz","aw","bw","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","norm","fromEulerAngles","yawh","pitchh","rollh","c1","s1","c2","s2","c3","s3","c1c2","s1s2","fromAxisAngle","angleh","axis","BitmapFont","write","lw","ls","evenNumber","toggleFullScreen","fullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","events","documentElement","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","fullscreenOff","ev","preventDefault","webkitIsFullScreen","mozIsFullScreen","msIsFullScreen","compositeBuffer","clientWidth","clientHeight","orientation","maxDimension","bufferList","requestAnimationFrame","lastFrame","buffersByLabel","__WEBPACK_IMPORTED_MODULE_1__pxene_display_buffers__","error","config","querySelector","classList","add","bufData","id","initBuffers","AUTO_FULLSCREEN","startTime","__WEBPACK_IMPORTED_MODULE_4__pxene_constants__","aspect","__WEBPACK_IMPORTED_MODULE_2__pxene_events__","SCALE_STRETCH","offsetX","offsetY","appendChild","composite","sourceBuffer","targetContext","dw","dh","sourceBuffers","targetBuffer","displayProps","imageSmoothingEnabled","round","BooleanArray","internalArray","byteLength","Symbol","recycle","CollisionMap","cellWidth","cellHeight","MASK_16","MASK_X","MASK_Y","MASK_TOP","MASK_BOTTOM","MASK_RIGHT","MASK_LEFT","internal_array","CHANNEL_RED","CHANNEL_GREEN","CHANNEL_BLUE","CHANNEL_ALPHA","fromCanvasPixels","threshold","channel","time","timeEnd","pixels","once","getImageData","mx","my","cellBit","cellMask","mask","invertMask","cellIndex","newlen","getCell","checkRect","maskX","maskY","cellY","cellX","intersect","tx","ty","rand","hsla","generateBackground","bokehBuffer","bgCtx","createLinearGradient","colors1","colors2","rad","bgBuffer","bokehBack","bokehFront","bokehCtx","sizeBase","parts","radius","tau","clearRect","shadowBlur","shadowColor","part","__WEBPACK_IMPORTED_MODULE_0__photonomix_util_js__","updateProps","ox","oy","lightBuffer","darkBuffer","tan","tf","lightCtx","darkCtx","voidSprite","emitterSprite","moteCenterSprite","photonSprites","drawPlasmaLine","ra","rb","rax","ray","speeda","ta","tc","rbx","rby","speedb","tb","td","outerColor","innerColor","lineSize","frameOffset","__WEBPACK_IMPORTED_MODULE_3__photonomix_util__","bezierCurveTo","lineCap","drawMote","plasmaSource","plasmaTarget","sc","sch","swh","colorIndex","__WEBPACK_IMPORTED_MODULE_4____","__WEBPACK_IMPORTED_MODULE_1__sprites__","__WEBPACK_IMPORTED_MODULE_6__game_Photon__","__WEBPACK_IMPORTED_MODULE_7__game_Mote__","drawPhoton","ps","drawVoid","drawEmitter","drawAntiGravitonCluster","drawAntiPlasma","pi3rd","entitiesLight","entitiesDark","__WEBPACK_IMPORTED_MODULE_5__game__","Emitter","arms","initialMass","emissionsPerSecond","emissionsPerFrame","targetFrame","radians","mim","__WEBPACK_IMPORTED_MODULE_3____","Marker","AntiGravitonCluster","instability","rot","BufferPool","itemLength","maxItems","MAX_POOL_SIZE","calculatePoolSize","freed","freedLength","Uint32Array","createFreedList","freedPos","popFree","drawEdgeButton","halfButtonWidth","cpXScale","beginX","beginY","topX","topY","endX","endY","aCPX","aCPY","bCPX","bCPY","cCPX","cCPY","dCPX","dCPY","uiBuffer","bh","__WEBPACK_IMPORTED_MODULE_2__photonomix_controls__","__WEBPACK_IMPORTED_MODULE_0____","debugMarkers","ui","wh","hh"],"mappings":"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","file":"scripts/photonomix.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7356f034b98a8366c838","export const TARGET_FPS = 30;\nexport const WEIGHT_PRED_R = 1.3;\nexport const WEIGHT_PRED_G = 0.7;\nexport const WEIGHT_PRED_B = 1;\nexport const START_POP = 20;\nexport const MOTE_BASE_SIZE = 0.015;\nexport const MOTE_BASE_ALPHA = 1;\nexport const MOTE_BASE_SPEED = 0.0005;\nexport const MOTE_BASE_SIGHT = 0.15;\nexport const PREGNANT_THRESHOLD = 172;\nexport const PREGNANT_TIME = 30;\nexport const DEATH_THRESHOLD = 18;\nexport const GRAVITY = 6.67408e-8;\nexport const GLOBAL_DRAG = 0.1;\nexport const PHOTON_BASE_SIZE = 0.015;\nexport const PHOTON_LIFETIME = TARGET_FPS*10;\nexport const MARKER_HIT_LIFETIME = ~~(TARGET_FPS);\nexport const MARKER_HIT_SIZE = 0.1;\nexport const VOID_SIZE = 0.01;\nexport const EMITTER_SIZE = 0.01;\nexport const MAX_MOTES = 300;\nexport const MAX_PHOTONS = ~~(MAX_MOTES * PREGNANT_THRESHOLD)/2;\nexport const MAX_VOIDS = 5;\nexport const MAX_EMITTERS = 5;\nexport const MAX_ENTITIES = MAX_MOTES + MAX_PHOTONS + MAX_VOIDS + MAX_EMITTERS;\nexport const POSITIVE_ENERGY = 0.01; // chance a dead mote will produce an emitter\nexport const NEGATIVE_ENERGY = 0.01; // chance a dead mote will produce a void\n\n// general debug switch\nexport const DEBUG = false;\n// toggles vector validation in various functions that tend to produce\n// infinite or NaN results; when enabled, vectors are checked and if invalid\n// the function is rerun step by step and logged to identify trouble spots\nexport const VALIDATE_VECTORS = DEBUG || true;\n\nlet type;\nif(typeof(SharedArrayBuffer) !== \"undefined\") {\n\t/* global SharedArrayBuffer */\n\ttype = SharedArrayBuffer;\n}\nelse {\n\ttype = ArrayBuffer;\n}\n\nexport const BUFFER_TYPE = type;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.constants.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nimport * as vectrix from \"@nphyx/vectrix\";\nimport {VALIDATE_VECTORS, GRAVITY} from \"./photonomix.constants\";\nconst {vec2, magnitude, mut_normalize, distance, mut_times, mut_copy, mut_clamp} = vectrix.vectors;\nconst {minus} = vectrix.matrices;\nconst {sqrt, abs, E, pow, cos, sin, random, PI} = Math;\nconst X = 0, Y = 1;\nconst MIN_F = 1e-11;\nconst MAX_F = 1e+11;\n\n/**\n * Twiddles a value by a small amount to avoid zeroes\n */\nexport function twiddle(x) {\n\treturn x + (1e-11*posneg());\n}\n\nexport const twiddleVec = (function() {\n\tlet i = 0|0, l = 0|0;\n\treturn function twiddleVec(v) {\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = twiddle(v[i]);\n\t\t}\n\t\treturn v;\n\t}\n})();\n\n\nexport const validate = (function() {\n\tlet i, l;\n\treturn function validate(v) {\n\t\tfor(i = 0, l = v.length; i < l; i++) {\n\t\t\tif(isNaN(v[i])) throw new Error(\"NaN vector\");\n\t\t\tif(v[i] === Infinity) throw new Error(\"Infinite vector\");\n\t\t\tif(v[i] === -Infinity) throw new Error(\"-Infinite vector\");\n\t\t}\n\t}\n})();\n\nexport const dist = (function () {\n\tlet dist_diff = vec2();\n\treturn function dist(a, b) {\n\t\treturn magnitude(minus(a, b, dist_diff));\n\t}\n})();\n\nfunction limit(v, min_v = 0, max_v = Infinity) {\n\tif(abs(v) < abs(min_v)) {\n\t\tif(v < 0) v = -min_v;\n\t\telse v = min_v;\n\t}\n\telse if(abs(v) > abs(max_v)) {\n\t\tif(v < 0) v = -max_v;\n\t\telse v = max_v;\n\t}\n\treturn v;\n}\n\nexport const limitVecMut = (function() {\n\tlet i = 0|0, l = 0|0;\n\t/**\n\t * Limits absolute values of vectors within a range.\n\t */\n\treturn function limitVecMut(v, min_v = 0, max_v = Infinity) {\t\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = limit(v[i], min_v, max_v);\n\t\t}\n\t}\n})();\n\n/**\n * Gravitate toward target.\n */\nexport const gravitate = (function() {\n\tlet g_v = vec2();\n\tlet mag = 0.0, x = 0.0, y = 0.0, scale = 0.0;\n\treturn function gravitate(p1, p2, strength, out) {\n\t\tout = out||g_v;\n\t\tminus(p1, p2, out);\n\t\tmag = magnitude(out);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || mag === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength*GRAVITY/(mag*mag));\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"gravitation error\", e);\n\t\t\t\tconsole.log(strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tlimitVecMut(out, 0.00001, 10); // put a cap on it to avoid infinite acceleration\n\t\t\t\tconsole.log(\"limit\", out);\n\t\t\t\tmag = magnitude(out);\n\t\t\t\tconsole.log(\"magnitude\", mag);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength/(mag*mag));\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Accelerate toward a target.\n */\nexport const accelerate = (function() {\n\tlet v = vec2();\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\treturn function accelerate(p1, p2, strength, out) {\n\t\tout = out||v;\t\n\t\tminus(p1, p2, out);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif(x === 0 && y === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"acceleration error\", e);\n\t\t\t\tconsole.log(\"strength\", strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength);\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n\nexport const drag = (function() {\n\tlet delta = vec2(), dragStrength = 0.0, dragSpeed = 0.0;\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\t/**\n\t * Apply drag.\n\t */\n\treturn function drag(vel, c, out) {\n\t\tout = out||delta;\n\t\tdragSpeed = magnitude(vel);\n\t\t// null small values\n\t\tdragSpeed = limit(dragSpeed, 0, 1e+11); // avoid infinite dragSpeeds\n\t\tdragStrength = mut_clamp(c * dragSpeed * dragSpeed, 1e-11, 1e+11);\n\t\tmut_copy(out, vel);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || dragStrength === 0) return out;\n\t\t// inline normalize for speed, since this happens a lot\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tdragStrength = mut_clamp(dragStrength, MIN_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t// mut_normalize(out)\n\t\tmut_times(out, -1);\n\t\tmut_times(out, dragStrength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"drag error\", e);\n\t\t\t\tconsole.log(c, dragSpeed, dragStrength);\n\t\t\t\tconsole.log(\"magnitude\", magnitude(vel));\n\t\t\t\tmut_copy(out, vel);\n\t\t\t\tconsole.log(\"copied\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalized\", out);\n\t\t\t\tmut_times(out, -1);\n\t\t\t\tconsole.log(\"inverted\", out);\n\t\t\t\tmut_times(out, dragStrength);\n\t\t\t\tconsole.log(\"scaled\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport const avoid = (function() {\n\tlet aev = vec2(), dist = 0.0;\n\treturn function avoid(vel, pos, opposite, maxDist, speed, out) {\n\t\tdist = distance(pos, opposite)*maxDist;\n\t\tout = out||aev;\n\t\tout[0] = 0.0;\n\t\tout[1] = 0.0;\n\t\tif(dist > 1) {\n\t\t\taccelerate(pos, opposite, speed*dist*dist, out);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * absolute value of vector\n */\nexport const absVec = (function() {\n\tlet i = 0|0, l = 0|0;\n\treturn function absVec(v) {\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = abs(v[i]);\n\t\t}\n\t\treturn v;\n\t}\n})();\n\nexport const outOfBounds = (function() {\n\treturn function outOfBounds(v, n) {\n\t\tlet x = v[0];\t\n\t\tlet y = v[1];\t\n\t\tif(x > n || x < -n) return true; \n\t\telse if(y > n || y < -n) return true;\n\t\telse return false;\n\t}\n})();\n\n/**\n * Smoothing using a sigmoid (logistic function) curve.\n * @param {float} x input value\n * @param {float} x0 midpoint of curve\n * @param {float} L limit of curve\n * @param {float} k slope of curve\n */\nexport function logisticSmooth(x, x0, L = x * 2, k = 1) {\n\treturn L / (1 + pow(E, k * x-x0))\n}\n\n/**\n * A random function adjusted to a range of -1 to 1 and multiplied by a\n * scaling value\n */\nexport function adjRand(scale = 1) {\n\treturn ((random()*2)-1)*scale\n}\n\n/**\n * Returns a delta velocity vector of the vector p rotated around center point c by\n * r radians.\n */\nexport const rotate = (function() {\n\tlet cosr = 0.0, sinr = 0.0, rdx = 0.0, rdy = 0.0, rvec = vec2(), rdelta = vec2();\n\treturn function rotate(p, c, r, out) {\n\t\tout = out||rvec;\n\t\tcosr = cos(r*PI);\n\t\tsinr = sin(r*PI);\n\t\tminus(p, c, rdelta);\n\t\trdx = rdelta[X]; \n\t\trdy = rdelta[Y];\n\t\tout[X] = (rdx * cosr - rdy * sinr);\n\t\tout[Y] = (rdx * sinr + rdy * cosr);\n\t\treturn out;\n\t}\n})();\n\nexport function posneg() {\n\treturn random() > 0.5?1:-1;\n}\n/*\nexport function clamp(v, minv, maxv) {\n\treturn max(min(v, maxv), minv);\n}\n*/\n\nexport function ratio(a, b) { return a/(abs(a)+abs(b)) }\nexport function rat_vec2(v) { return ratio(v[X], v[Y]) }\n\n/**\n* Shuffles array in place. ES6 version\n* @param {Array} a items The array containing the items.\n*/\nexport const shuffle = (function() {\n\tlet i = 0|0, j = 0|0;\n\treturn function shuffle(a) {\n\t\tfor (i = a.length; i; i--) {\n\t\t\tj = Math.floor(Math.random() * i);\n\t\t\t[a[i - 1], a[j]] = [a[j], a[i - 1]];\n\t\t}\n\t}\n})();\n\n/**\n * Round to nearest even number.\n */\nexport function evenNumber(n) {\nreturn n >> 1 << 1;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.util.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nimport Mote, {BUFFER_LENGTH as MOTE_BUFFER_LENGTH} from \"./Mote\";\nimport Void from \"./Void\";\nimport Emitter from \"./Emitter\";\nimport Marker from \"./Marker\";\nimport Photon, {BUFFER_LENGTH as PHOTON_BUFFER_LENGTH} from \"./Photon\";\nimport AntiGravitonCluster from \"./AntiGravitonCluster\";\nexport {Mote, Void, Emitter, Marker, Photon, AntiGravitonCluster};\n\nimport {rotate, outOfBounds} from \"../photonomix.util\";\nimport {BufferPool} from \"../photonomix.bufferPools\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {TARGET_FPS, START_POP, MAX_MOTES, MAX_PHOTONS, PREGNANT_TIME, DEATH_THRESHOLD,\n\tPOSITIVE_ENERGY, NEGATIVE_ENERGY} from \"../photonomix.constants\";\nconst {minus} = vectrix.matrices;\nconst {vec2, mut_copy} = vectrix.vectors;\nconst marks = new Uint16Array(MAX_MOTES+MAX_PHOTONS+100);\nlet {random} = Math;\nlet markpos = 0;\nlet mark = 0;\n\nexport function Game() {\n\tthis.entities = [];\n\tthis.photonBuffer = null;\n\tthis.stats = {\n\t\tpop:0,\n\t\tborn:0,\n\t\tdied:0,\n\t\ttarget:0\n\t}\n\tthis.actions = {};\n\tthis.registerActions();\n\tthis.started = false;\n\treturn this;\n}\n\nGame.prototype.start = function() {\n\tthis.motePool = new BufferPool(MOTE_BUFFER_LENGTH, MAX_MOTES);\n\tthis.photonPool = new BufferPool(PHOTON_BUFFER_LENGTH, MAX_PHOTONS);\n\tfor(let i = 0; i < START_POP; ++i) {\n\t\tthis.entities.push(new Mote.random(this.motePool))\n\t}\n\tthis.started = true;\n}\n\nGame.prototype.tick = (function() {\n\tlet entities, entity, i = 0|0, len = 0|0, tick_delta = 0.0;\n\treturn function tick(timing) {\n\t\tlet delta = timing.interval/timing.elapsed;\n\t\tlet frameCount = timing.frameCount;\n\t\tentities = this.entities;\n\t\tthis.stats.target = 0;\n\t\tthis.stats.pop = 0;\n\t\ttick_delta = delta/TARGET_FPS;\n\t\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\t\tentity = entities[i];\n\t\t\tentity.tick(this.entities, tick_delta, frameCount);\n\t\t\t// do mote-specific stuff\n\t\t\tif(entity instanceof Mote) {\n\t\t\t\tthis.stats.pop++;\n\t\t\t\tif(entity.target) this.stats.target++;\n\t\t\t\tif(entity.injured) {\n\t\t\t\t\tif(frameCount % ~~(TARGET_FPS*0.1) === 0) {\n\t\t\t\t\t\tthis.entities.push(entity.bleed(this.photonPool));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// mark dead for removal\n\t\t\t\tif(entity.dying === DEATH_THRESHOLD) {\n\t\t\t\t\tthis.killMote(entity);\n\t\t\t\t\tmarks[markpos] = i;\n\t\t\t\t\tthis.stats.died++;\n\t\t\t\t\tmarkpos++;\n\t\t\t\t}\n\t\t\t\telse if(entity.pregnant === PREGNANT_TIME) {\n\t\t\t\t\tthis.entities.push(entity.split());\n\t\t\t\t\tthis.stats.born++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(entity instanceof Photon || entity instanceof Marker) {\n\t\t\t\tif(entity.lifetime <= 0) {\n\t\t\t\t\tmarks[markpos] = i;\n\t\t\t\t\tmarkpos++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(entity.mass <= 0) {\n\t\t\t\tmarks[markpos] = i;\n\t\t\t\tmarkpos++;\n\t\t\t}\n\t\t\t// physics effects sometimes chuck things way out of bounds\n\t\t\t// just delete them, they ain't comin' back\n\t\t\tif(outOfBounds(entity.pos, 20)) {\n\t\t\t\tmarks[markpos] = i;\n\t\t\t\tmarkpos++;\n\t\t\t}\n\t\t}\n\n\t\t// sweep dead\n\t\twhile(markpos > 0) {\n\t\t\tmarkpos--;\n\t\t\tmark = marks[markpos];\n\t\t\tentity = entities[mark];\n\t\t\tif(entity && (entity.pool !== undefined)) {\n\t\t\t\tentity.destroy();\n\t\t\t}\n\t\t\tentities.splice(mark, 1);\n\t\t\tmarks[markpos] = 0;\n\t\t}\n\n\t\t// shuffling helps action lock issues and reduces first in list advantage\n\t\t//shuffle(entities);\n\t}\n})();\n\nGame.prototype.emitPhoton = (function() {\n\tlet pos = vec2(), vel = vec2(), center = vec2(), p_c = 0, \n\t\tbase_vel = vec2(0.05, 0.05);\n\treturn function emitPhoton(ipos, ivel, color, count = p_c, max = 12) {\n\t\tipos = ipos||[random()*1.8-0.9, random()*1.8-0.9];\n\t\tif(ivel) {\n\t\t\tmut_copy(vel, ivel);\n\t\t}\n\t\telse {\n\t\t\tmut_copy(vel, base_vel);\n\t\t\trotate(vel, center, ((p_c%max)/(max/2)), vel);\n\t\t}\n\t\tcolor = color||~~(random()*3);\n\t\tmut_copy(pos, ipos);\n\t\tthis.entities.push(new Photon(pos, vel, color, this.photonPool));\n\t\tp_c++;\n\t\treturn color;\n\t}\n})();\n\nGame.prototype.killMote = (function() {\n\tlet sum = 0|0, c = 0|0, i = 0|0, pos = vec2(), r = 0|0, g = 0|0, b = 0|0;\n\treturn function killMote(mote) {\n\t\tif(random() < POSITIVE_ENERGY) {\n\t\t\tthis.entities.push(new Emitter(mote.pos, mote.vel, ~~(DEATH_THRESHOLD*10*random()), this.photonPool));\n\t\t}\n\t\tif(random() < NEGATIVE_ENERGY) {\n\t\t\tthis.entities.push(new Void(mote.pos, mote.vel, ~~(DEATH_THRESHOLD*10*random()))); }\n\t\tmut_copy(pos, mote.pos);\n\t\tr = mote.photons[0];\n\t\tg = mote.photons[1];\n\t\tb = mote.photons[2];\n\t\tsum = r+b+g;\n\t\tc = 0;\n\t\tfor(i = 0; i < sum; ++i) {\n\t\t\tif(r === i) c = 1;\n\t\t\tif(r+g === i) c = 2;\n\t\t\tthis.emitPhoton(pos, undefined, c, i, sum);\n\t\t}\n\t}\n})();\n\n/**\n * Actions are callbacks accepting the following parameters:\n * @param {vec2} center center of the click region for the action (i.e. the UI element)\n * @param {float} dist the distance from region center to mouseUp position\n */\nGame.prototype.registerAction = function(name, callback) {\n\tthis.actions[name] = callback.bind(this);\n}\n\nlet delta = vec2();\nGame.prototype.registerActions = function() {\n\tthis.registerAction(\"launchAntiGravitonCluster\", function(center) {\n\t\tminus(this.player.mouseUp, center, delta);\n\t\tthis.entities.push(new AntiGravitonCluster(center, delta, 148));\n\t});\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/index.js\n// module id = 3\n// module chunks = 0","\"use strict\";\nimport * as mimeTypes from \"./pxene.assets.mimeTypes\";\n\n/**\n * @Module pxene.assets\n * Handles loading, pre-processing, and caching of remote assets.\n */\n/** @const {Array} list of deferred asset URIs **/\nconst enqueuedURIs = [];\n/** @const {Array} list of currently fetching URIs **/\nconst fetchingURIs = [];\n/** @const {Array} list of completed URIs which should be in the cache **/\nconst completedURIs = [];\n/** @const {Object} a hash of uri->{@link Asset} **/\nconst cache = {};\n/** @const {Object} a hash of handlers by mime type **/\n\nlet globalAssetPrefix = \"\";\nlet fetching = 0;\n\n/**\n * Safely attempt to move an item from one array to another.\n * @return {bool} true if an item was found or moved, otherwise false\n */\nfunction moveItem(item, oldList, newList) {\n\tlet i = oldList.indexOf(item);\n\tif(i !== -1) {\n\t\tnewList.push(oldList.splice(i, 1));\n\t\treturn true;\n\t}\n\telse return false;\n}\n\n/**\n * An object representing a loaded asset.\n * @property uri the uri originally requested for the object (not including global prefixes, domain names, etc)\n * @property {Object} content the processed response, which may be an Image, a string, an SVG, a decoded JSON object, or any other supported value type\n * @property {String} type\n */\nfunction Asset(uri, content, type) {\n\tthis.uri = uri;\n\tthis.content = content;\n\tthis.type = type;\n\treturn this;\n}\n\n/**\n * Fetches an asset from a remote source.\n * @param {String} uri\n */\nfunction fetchAsset(uri) {\n\tif(fetchingURIs.indexOf(uri) === -1 && completedURIs.indexOf(uri) === -1) {\n\t\tfetching++;\n\t\t// add to the fetching list, moving it from enqueuedURIs if needed\n\t\tif(!moveItem(uri, enqueuedURIs, fetchingURIs)) fetchingURIs.push(uri);\n\t\treturn fetch(globalAssetPrefix+uri).then(makeProcessFetchResponse(uri))\t\n\t}\n\telse if(fetchingURIs.indexOf(uri) >= 0) {\n\t\treturn new Promise((resolve) => {\n\t\t\t// @todo event based implementation of this ridiculous shit right here\n\t\t\tlet count = 0;\n\t\t\tlet interval = setInterval(() => {\n\t\t\t\tif(cache[uri] !== undefined) {\n\t\t\t\t\tresolve(cache[uri]);\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t\t\telse count++;\n\t\t\t\tif(count > 100) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tthrow Error(\"stuck in fetching status way too long\");\n\t\t\t\t}\n\t\t\t}, 250);\n\t\t});\n\t}\n\telse if(completedURIs.indexOf(uri) >= 0) {\n\t\treturn Promise.resolve(cache[uri]);\n\t}\n}\n\n\n/**\n * Makes a processFetchResponse binding to ensure the original uri stays in scope.\n */\nfunction makeProcessFetchResponse(uri) {\n\treturn processFetchResponse.bind(null, uri);\n}\n\n/**\n * Processes a response from a fetch request.\n */\nfunction processFetchResponse(uri, response) {\n\treturn new Promise((resolve, reject) => {\n\t\tif(response.ok) {\n\t\t\tlet type = response.headers.get(\"Content-type\");\n\t\t\treturn mimeTypes.getHandler(type)(response)\n\t\t\t\t.then((content) => storeAsset(uri, content, type, resolve));\n\t\t}\n\t\telse reject(\"failed to fetch asset \"+uri);\n\t});\n}\n\n/**\n * Stores an asset in the cache.\n * @param {String} uri the originally requested URI\n * @param {mixed} content the processed response content\n * @param {String} type the mime type of the response\n * @param {function} resolve promise callback for the original fetch request\n */\nfunction storeAsset(uri, content, type, resolve) {\n\tlet item = new Asset(uri, content, type); \n\tcache[uri] = item;\n\tfetching--;\n\tmoveItem(uri, fetchingURIs, completedURIs);\n\tresolve(item);\n}\n\n/**\n * Gets an asset from the cache if available, or else fetches it from a remote source.\n * Returns a promise which resolves with the {@link Asset} requested.\n * @param {String} uri \n * @return Promise\n */\nexport function requestAsset(uri) {\n\tlet item = cache[uri];\n\tif(item === undefined) return fetchAsset(uri);\n\telse return Promise.resolve(item);\n}\n\nexport function requestAssetList(list) {\n\treturn Promise.all(list.map((item) => requestAsset(item)));\n}\n\n/**\n * Enqueues an asset to be fetched. Enqueued assets are fetched later when processQueue is called.\n */\nexport function enqueueAsset(uri) {\n\tif(enqueuedURIs.indexOf(uri) === -1 && fetchingURIs.indexOf(uri) === -1 && cache[uri] === undefined) enqueuedURIs.push(uri);\n}\n\n/**\n * Enqueues a list of assets to be fetched layer during a processQueue() call.\n * @param {Array} list array of URIs to load\n * @returns {Promise|undefined}\n */\nexport function enqueueAssetList(list) {\n\tlist.forEach(item => enqueueAsset(item)); \n}\n\n/**\n * Process any deferred items in the queue.\n * @return {Promise} a promise that resolves when all the items are fetched with an array of all the fetched items\n */\nexport function processQueue() {\n\treturn Promise.all(enqueuedURIs.map((uri) => fetchAsset(uri)));\n}\n\n/**\n * Sets the globalAssetPrefix, which is prepended to all fetch URIs.\n * @param {string} prefix a string representing a path or filename prefix\n */\nexport function setGlobalAssetPrefix(prefix) {\n\tglobalAssetPrefix = prefix;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.assets.js\n// module id = 4\n// module chunks = 0","/**\nThe vectors module contains functions and objects related to 2d, 3d, and 4d vectors.\n\nVectors are composed from columnar matrices, so they support all the methods that\n[[vectrix.matrices|matrices]] do.\n\nRequire the vector module:\n```javascript\nconst vectors = require(\"vectrix.vectors.js\");\nconst vec2 = vectors.create.vec2;\nconst vec3 = vectors.create.vec3;\nconst vec4 = vectors.create.vec4;\n```\n\n\nYou can construct them with vec2, vec3, and vec4, passing zero, one or N arguments\nwhere N is the vector size. Do whatever is convenient.\n```javascript\nlet first = vec2(); // passing no arguments will give you a vector filled with zeroes\nfirst.toArray(); // [0,0]\nlet second = vec2([3,7]); // you can pass an array-like object\nsecond.toArray(); // [3,7] \nlet third = vec2(17,4); // or just pass the components as arguments\nthird.toArray(); // [14,4] \nlet fourth = vec3(1,2,3); // and so on with 3d and 4d vectors\nfourth.toArray(); // [1,2,3]\n```\n\nVector functions will operate on any array-like object, returning a plain Float32Array when the result is another vector. Creating vector objects is somewhat expensive, so when you're doing a lot of operations and performance really counts, use the functions for calculations and then use the vector factories on your final result.\n```javascript\nconst lerp = vectors.lerp;\nlet res = lerp([0.1, 0.3], [0.3, 0.7], .5); // Float32Array(0.2, 0.5)\ncreate.vec2(res); // vec2(0.2,0.5);\n```\n\nVectors are composed from columnar matrices, so they can do the things that matrices\ndo. \n```javascript\nsecond.add(second).toArray(); // [6,14]\nthird.sub(second).toArray(); // [11,-3]\n\nconst matrices = require(\"vectrix.matrices.js\");\nlet identity = matrices.create(2,2,[1,0, 0,1]);\nidentity.dot(second).toArray(); // [3,7]\nlet scale2x = matrixes.create(2,2,[2,0, 0,2]);\nscale2x.dot(third).toArray(); // [34,8]\n```\n\nVector dot products are a special case. As in vector math, multplying two vectors\nproduces a scalar:\n```javascript\nlet first = vec2(2,2);\nlet second = vec2([2,2]);\nfirst.dot(second); // 8\nlet third = vec2(1,0);\nlet fourth = vec2(0,1);\nthird.dot(fourth); // 0\n```\n\nThey also have some of their own useful properties.\n\nYou can find the cross product of two 3d vectors using `vec.cross()`:\n```javascript\nlet first = vec3(1,2,1);\nlet second = vec3(2,-2,2);\nfirst.cross(second).toArray(); // [6,0,-6]\n```\nCross can be called on 2d vectors, with z implicitly being zero:\n```javascript\nlet first = vec2(2,4);\nlet second = vec2(1,3);\nfirst.cross(second).toArray(); // [0,0,2]\n```\n\nIf you cross a vec2 with a vec3 for whatever reason, vec2.z is implicitly zero:\n```javascript\nlet first = vec3(1,2,1);\nlet second = vec2(1,3);\nfirst.cross(second).toArray(); // [-3,1,1]\n```\n\nMost vector operations are duck typed and make few assumptions internally, so you \ncan just pass in anything array-like of the correct length if you want:\n```javascript\nlet first = vec3(1,2,1);\nfirst.cross([2,-2,2]).toArray(); // [6,0,-6]\n```\nJust beware weird behavior might result if it looks like a duck and quacks like a duck\nbut it's actually a trick-or-treating platypus.\n\nYou can produce a homogenous coordinate for matrix multiplication using `vec.homogenous()`:\n```javascript\nfirst.homogenous().toArray(); // [0,0,1]\n```\n\nWhich lets you do a few useful matrix-vector ops more easily:\n```javascript\nconst matrices = require(\"vectrix.matrices.js\");\nconst vectors = require(\"vectrix.vectors.js\");\nlet myVec = vectors.vec2([22,9]); \nlet translate = matrices.create(3,3,[1,0,5, 0,1,6, 0,0,1]);\ntranslate.dot(myVec.homogenous()).toArray(); // [27,15,1]\n```\nMaking this more intuitive is on the roadmap.\n\nLast but not least, they have a whole bunch of virtual properties that you might\nbe used to in GLSL. Once I used them I couldn't live without.\n```javascript\nlet position = vectors.vec3([0,-0.5,0.5]);\nposition.x; // 0\nposition.y; // -0.5\nposition.z; // 0.5\nposition.xy; // vec2(0,-0.5)\nposition.zx; // vec2(0.5,0)\nposition.yzx; // vec3(-0.5,0.5,0)\nlet color = vectors.vec4(255,128,64,0.1)\ncolor.rgb; // vec3(255,128,64)\ncolor.bgr; // vec3(64,128,255)\n```\n...and so on - all aliases and combinations thereof for the xyzw and rgba sets\nare available. vec2s only support x/y because r/g is not useful.\n@module vectrix/vectors\n*/\n\"use strict\";\nimport * as matrices from \"./vectrix.matrices\";\nexport const {plus, minus, mut_plus, mut_minus} = matrices;\nlet flatten = matrices.flatten;\nlet {sqrt, min, max, acos} = Math;\n\n/*\n * All of the below is a dumb, slow workaround for the fact\n * that TypedArrays can't be used as prototypes. What we're \n * doing here is creating property aliases so that we can use \n * vectors somewhat like GLSL, for example: \n *\n * vec3([0,3,4]).zyx == vec3([4,3,0]); \n * \n * We do this programmatically because doing it be hand would \n * be even more tedious than this was. \n * \n * We precompute all the permutations of all the aliases and\n * their definitions, then throw them in the aliasesXd objects.\n * The individual vector factories then apply them during creation.\n * \n * Hopefully this isn't too slow because I spend a heck of a lot\n * of time making this happen.\n */\n\nexport const aliasCombos2d = [];\nexport const aliasCombos3d = [];\nexport const aliasCombos4d = [];\n\nexport const aliases2d = [\n\t{names:[\"x\"], i:0},\n\t{names:[\"y\"],i:1}\n];\n\nexport const aliases3d = [\n\t{names:[\"x\",\"r\"],i:0},\n\t{names:[\"y\",\"g\"],i:1},\n\t{names:[\"z\",\"b\"],i:2}\n];\n\nexport const aliases4d = [\n\t{names:[\"w\", \"a\"],i:3}\n].concat(aliases3d);\n\npermutations(\"xy\".split(\"\")).forEach((combo) => {\n\taliasCombos2d.push(combo);\n});\n\n[\"xz\",\"yz\",\"xyz\",\"rgb\"].forEach((props) => {\n\tpermutations(props.split(\"\")).forEach((combo) => {\n\t\taliasCombos3d.push(combo);\n\t});\n});\n\n[\"yxw\",\"zxw\",\"yzw\",\"xyzw\",\"rga\",\"rba\",\"gba\",\"rgba\"].forEach((props) => {\n\tpermutations(props.split(\"\")).forEach((combo) => {\n\t\taliasCombos4d.push(combo);\n\t});\n});\n\n/**\n * Util function to help generate permutations of property alias\n * sets\n * @private\n */\nfunction permutations(list) {\n\t// Empty list has one permutation\n\tif (list.length === 0) return [[]];\n\tvar result = [];\n\n\tfor (var i=0; i<list.length; i++) {\n\t\tvar copy = list.slice();\n\t\tvar head = copy.splice(i, 1);\n\t\tvar rest = permutations(copy);\n\t\tfor (var j=0; j<rest.length; j++) {\n\t\t\tvar next = head.concat(rest[j]);\n\t\t\tresult.push(next);\n\t\t}\n\t}\n\treturn result;\n}\t\n\n/**\n * @private\n */\nfunction getAlias(i) {\n\t/* jshint validthis:true */\n\treturn this[i];\n}\n\n/**\n * Generic function wrapper for vector combo aliases (e.g. vector.xy)\n * @private\n */\nfunction getAliasCombo(factory, combo) {\n\tlet vals = combo.map((p) => this[p]);\n\treturn factory(vals);\n}\n\n/**\n * Defines vector aliases for a vector based on its length.\n * @private\n */\nfunction defineAliases(vec) {\n\tlet factory;\n\tlet map;\n\tlet combos;\n\tif(vec.length === 2) {\n\t\tmap = aliases2d;\n\t\tcombos = aliasCombos2d;\n\t}\n\telse if(vec.length === 3) {\n\t\tmap = aliases3d;\n\t\tcombos = aliasCombos2d.concat(aliasCombos3d);\n\t}\n\telse { // it's 4 because nothing else is supported or requested\n\t\tmap = aliases4d;\n\t\tcombos = aliasCombos2d.concat(aliasCombos3d, aliasCombos4d);\n\t}\n\tfor(let i = 0, len = map.length; i < len; ++i) {\n\t\tlet get = getAlias.bind(vec, map[i].i);\n\t\tfor(let n = 0, len = map[i].names.length; n < len; ++n) {\n\t\t\tObject.defineProperty(vec, map[i].names[n], {\n\t\t\t\tget:get\n\t\t\t});\n\t\t}\n\t}\n\tfor(let i = 0, len = combos.length; i < len; ++i) {\n\t\tswitch(combos[i].length) {\n\t\t\tcase 2:factory = create.vec2; break;\n\t\t\tcase 3:factory = create.vec3; break;\n\t\t\tcase 4:factory = create.vec4; break;\n\t\t}\n\t\tObject.defineProperty(vec, combos[i].join(\"\"), {\n\t\t\tget:getAliasCombo.bind(vec, factory, combos[i])\n\t\t});\n\t}\n}\n\n/**\n * Turns a vector function into a method by wrapping its result in a create()\n * statement.\n * @param {function} method\n * @param {vector} vector\n * @private\n */\nfunction asMethod(method, vector) {\n\treturn function() {\n\t\tlet res = method.apply(null, [vector].concat(Array.prototype.slice.apply(arguments)));\n\t\tif(!(res instanceof Float32Array)) return res;\n\t\tswitch(res.length) {\n\t\t\tcase 2: return wrap(create.vec2(res));\n\t\t\tcase 3: return wrap(create.vec3(res));\n\t\t\tcase 4: return wrap(create.vec4(res));\n\t\t\tdefault: return wrap(create(res.length, res));\n\t\t}\n\t}\n}\n\n/*\n * End ugly code for generating aliases.\n */\n\n\n/**\n * @private\n * used in [lerp](#lerp)\n */\nfunction lerp_element(a, b, t) {\n\treturn a+t*(b-a);\n}\n\n/**\n * @private\n * used in [cubic](#cubic)\n */\nfunction cubic_step(a, b, c, d, f0, f1, f2, f3) {\n\treturn a*f0 + b*f1 + c*f2 + d*f3;\n}\n\n/**\n * Copies values from second operand into first.\n * @example\n * let v = vec3(1,2,3);\n * let v2 = vec2(31,6);\n * copy(v, v2); // vec3(31,6,3);\n *\n * @mutates\n * @function mut_copy\n * @param {vector} a vector to copy into\n * @param {vector} b vector to copy from\n * @return {vector} a, with copied values\n */\nexport const mut_copy = (() => {\n\tlet i = 0|0, alen = 0|0, blen = 0|0;\n\treturn function mut_copy(a, b) {\n\t\tfor(i = 0, alen = a.length, blen = b.length;\n\t\t\ti < alen && i < blen; ++i) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t\treturn a;\n\t}\n})();\n\n\n/**\n * Homogenous coordinates for a vector. \n *\n * @function homogenous\n * @param {vector} a input vector\n * @param {vector} out (optional) out parameter of one higher dimension than a\n * @return {matrix}\n */\nexport const homogenous = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function homogenous(a, out = undefined) {\n\t\tlen = a.length;\n\t\tout = out||create(a.length+1);\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tout[i] = a[i];\n\t\t}\n\t\tout[i] = 1.0;\n\t\treturn out;\n\t}\n})();\n\n/**\n * Calculate the magnitude of a vector.\n * @example\n * magnitude(vec3(2,3,6)); // ~6.16\n *\n * @function magnitude\n * @param {vector} a operand\n * @return {float} magnitude of a\n */\nexport const magnitude = (function() {\n\tlet scratch = 0.0, cur = 0.0, i = 0|0, len = 0|0;\n\treturn function magnitude(a) {\n\t\tscratch = 0.0;\n\t\tfor(i = 0, len = a.length; i < len; ++i) {\n\t\t\tcur = a[i];\n\t\t\tscratch = scratch + cur * cur;\t\n\t\t}\n\t\treturn sqrt(scratch);\n\t}\n})();\n\n/**\n * Normalize a vector.\n *\n * @example\n * normalize(vector); // function style\n * vector.normalize(); // method style\n *\n * @function normalize\n * @param {vector} a vector to normalize\n * @param {vector} out (optional) a vector of the same dimensions as a\n * @return {vector}\n */\nexport const normalize = (function() {\n\tlet scale = 0.0, i = 0|0, len = 0|0;\n\treturn function normalize(a, out = undefined) {\n\t\tlen = a.length;\n\t\tout = out||create(len);\n\t\tscale = 1/magnitude(a);\n\t\t/*\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tcur = a[i]; // cut out one reference\n\t\t\tsum = sum+cur*cur;\n\t\t}\n\t\t*/\n\t\tfor(i = 0; i < len; ++i) {\n\t\t\tout[i] = a[i]*scale;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [normalize](#normalize).\n * @function mut_normalize\n * @param {vector} a input vector\n * @return {matrix}\n */\nexport function mut_normalize(a) {\n\treturn normalize(a, a);\n}\n\n/**\n * Perform a linear interpolation between two vectors.\n * @function lerp\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @param {float} t interval\n * @param {vector} out (optional) vector of same dimensions as a & b\n * @return {vector}\n */\nexport const lerp = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function lerp(a, b, t, out) {\n\t\tlen = a.length;\n\t\tout = out||create(len);\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tout[i] = lerp_element(a[i], b[i], t);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [lerp](#lerp).\n * @function lerp\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @param {float} t interval\n * @param {vector} out (optional) vector of same dimensions as a & b\n * @return {vector}\n */\nexport function mut_lerp(a, b, t) {\n\treturn lerp(a, b, t, a);\n}\n\n/**\n * Perform a cubic bezier interpolation.\n * @function cubic\n * @param {vector} a start point\n * @param {vector} b first control point\n * @param {vector} c second control point\n * @param {vector} d end point\n * @param {float} t interval\n * @param {vector} out (optional) vector of same dimensions as start point \n * @return {vector}\n */\nexport const cubic = (function() {\n\tlet i = 0|0, len = 0|0, inv = 0.0, inv2 = 0.0, \n\t\t\tfs = 0.0, f0 = 0.0, f1 = 0.0, f2 = 0.0, f3 = 0.0;\n\treturn function cubic(a, b, c, d, t, out = undefined) {\n\t\tlen = a.length;\n\t\tout = out||create(len);\n\t\t/* parametric cubic bezier, faster than dec */\n\t\tinv = 1-t;\n\t\tinv2 = inv*inv;\n\t\tfs = t*t;\n\t\tf0 = inv2 * inv;\n\t\tf1 = 3 * t * inv2;\n\t\tf2 = 3 * fs * inv;\n\t\tf3 = fs * t;\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\tout[i] = cubic_step(a[i], b[i], c[i], d[i], f0, f1, f2, f3);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [cubic](#cubic).\n * @function mut_cubic\n * @param {vector} a start point\n * @param {vector} b first control point\n * @param {vector} c second control point\n * @param {vector} d end point\n * @param {float} t interval\n * @return {vector} interpolated a\n */\nexport function mut_cubic(a, b, c, d, t) {\n\treturn cubic(a, b, c, d, t, a);\n}\n\n\nexport const dot = (function() {\n\tlet i = 0|0, sum = 0.0;\n\treturn function dot(a, b) {\n\t\tsum = 0.0;\n\t\ti = a.length;\n\t\twhile(i--) {\n\t\t\tsum = sum + a[i] * b[i];\n\t\t}\n\t\treturn sum;\n\t}\n})();\n\n/**\n * Vector product for matching vector types. Accepts vectors or generic arrays, \n * or defaults up to the matrix product if the vectors don't match (which supports\n * vector*matrix and scalar products).\n * @function times\n * @param {vector} a first operand\n * @param {vector|float} b second operand\n * @param {vector} out out vector \n * @return {matrix|float} product of a and b \n */\nexport var times = (function() {\n\tlet i = 0|0;//, len = 0|0;\n\treturn function(a, b, out) {\n\t\ti = a.length-1;\n\t\tif(typeof b === \"number\") {\n\t\t\tout = out||new Float32Array(i+1);\n\t\t\tfor(;i >= 0; --i) {\n\t\t\t\tout[i] = a[i] * b;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\telse return dot(a, b);\n\t}\n})();\n\n/**\n * Mutating version of [times](#times). Note that a is mutated only when a is a vector\n * and b is a scalar.\n *\n * @function times\n * @param {vector} a first operand\n * @param {vector|float} b second operand\n * @return {matrix|float} mutated a, product of a and b \n */\nexport function mut_times(a, b) {\n\treturn times(a, b, a);\n}\n\n\n/**\n * Find the angle between two vectors in radians.\n * @function angle\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @return {vector}\n */\nexport const angle = (function() {\n\tlet anorm, bnorm;\n\treturn function angle(a, b) {\n\t\tanorm = normalize(a);\n\t\tbnorm = normalize(b);\n\t\treturn acos(times(anorm, bnorm));\n\t}\n})();\n\n\n/**\n * Find the distance between two vectors.\n * @function distance\n * @param {vector} a first operand\n * @param {vector} b second operand\n * @return {float} distance\n */\nexport const distance = (function() {\n\tlet i = 0|0, len = 0|0, sum = 0.0, tmp = 0.0;\n\treturn function distance(a, b) {\n\t\tsum = 0.0;\n\t\tlen = a.length;\n\t\tfor(i = 0|0; i < len; ++i) {\n\t\t\ttmp = b[i] - a[i];\n\t\t\tsum = sum + tmp*tmp;\n\t\t}\n\t\treturn sqrt(sum);\n\t}\n})();\n\n\n/**\n * Vector cross products are technically only defined for 3D, but 2D can be\n * crossed with implicit z=0\n * @function cross\n * @param {vector} a first operand\n * @param {vector|float} b second operand\n * @param {vec3} out parameter\n * @return {Float32Array(3)} cross product\n */\nexport const cross = (function() {\n\tlet a0 = 0.0; let a1 = 0.0; let a2 = 0.0;\n\tlet b0 = 0.0; let b1 = 0.0; let b2 = 0.0;\n\treturn function cross(a, b, out) {\n\t\tif(a.length > 3 || b.length > 3 || a.length < 2 || b.length < 2) return undefined;\n\t\tout = out||create(3);\n\t\ta0 = a[0]; a1 = a[1]; a2 = a[2]||0.0;\n\t\tb0 = b[0]; b1 = b[1]; b2 = b[2]||0.0;\n\t\tout[0] = a1*b2 - a2*b1;\n\t\tout[1] = a2*b0 - a0*b2;\n\t\tout[2] = a0*b1 - a1*b0;\n\t\t/*\n\t\tmut_copy(scratcha, a);\n\t\tmut_copy(scratchb, b);\n\t\tif(a.length === 2) scratcha[2] = 0;\n\t\tif(b.length === 2) scratchb[2] = 0;\n\t\tout[0] = scratcha[1]*scratchb[2] - scratcha[2]*scratchb[1];\n\t\tout[1] = scratcha[2]*scratchb[0] - scratcha[0]*scratchb[2];\n\t\tout[2] = scratcha[0]*scratchb[1] - scratcha[1]*scratchb[0];\n\t\t*/\n\t\treturn out;\n\t}\n})();\n\n/**\n * Restricts scalar or vector values to a range.\n * @example\n * let v = vectors.create.vec3([-5,100, -22]); // vec3(-5,100, -22)\n * clamp(v, -10, 10); // vec3(-5, 10, -10);\n * let s = 23.0;\n * clamp(s, 0, 5); // 5\n *\n * @function clamp\n * @param {vector} a vector or scalar to clamp\n * @param {float} minv minimum value\n * @param {float} maxv maximum value\n * @param {vector} out output vector\n * @return {vector} clamped vector\n */\nexport var clamp = (() => {\n\tlet i = 0|0, len = 0|0;\n\tfunction clamp_s(a, minv, maxv) {\n\t\treturn max(min(a, maxv), minv)\n\t}\n\treturn function(a, minv, maxv, out) {\n\t\tif(typeof(a) === \"number\") return clamp_s(a, minv, maxv);\n\t\tout = out||new Float32Array(a.length);\n\t\tfor(i = 0, len = a.length; i < len; ++i) {\n\t\t\tout[i] = clamp(a[i], minv, maxv);\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [clamp](#clamp).\n * @return {vector} the mutated vector\n */\nexport function mut_clamp(a, min, max) {\n\treturn clamp(a, min, max, a);\n}\n\n/**\n * Get a string representation of a vector.\n * @example\n * vectors.create.vec2([23,1]).toString(); // vec2(23.00, 1.00)\n * vectors.toString(vectors.create.vec2([23,1])); // vec2(23.00, 1.00)\n * @param {vector} a input vector\n * @return {string}\n */\nexport function toString(a) {\n\tlet strings = a.toArray().map((cur) => cur.toFixed(2));\n\treturn \"vec\"+a.length+\"(\"+strings.join(\", \")+\")\";\n}\n\n/**  \n * Creates a new vector. Note that vectors created directly with this function\n * will not have convenience aliases, meaning they're initialized faster but...\n * ah, less convenient. Can be supplied with an optional arraybuffer view and optional\n * offset to that view as the last or last two parameters.\n * @example\n * create(2); // vector[0,0]\n * create(2, 3.3, 3.2); // vector[3.3,3.2]\n * create(2, [3.3, 3.2]); // vector[3.3,3.2] from an array\n * create(2, 3.3, 3.2, new ArrayBuffer(2*4)); // vector[3.3,3.2] as view of ArrayBuffer\n * create(2, 3.3, 3.2, new ArrayBuffer(3*4), 4); // vector[3.3,3.2] as view of ArrayBuffer, offset by 4 bytes\n * create(2, [3.3, 3.2], new ArrayBuffer(3*4), 4); // vector[3.3,3.2] as view of ArrayBuffer, offset by 4 bytes, from an array\n *\n * @function create\n * @param {int} len [2...4] vector length\n * @param {mixed} args values in any combination of array-like and scalar values\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {vector}\n */\nexport function create() {\n\tvar len = arguments.length, vec;\n\tif(len === 0) throw new Error(\"vectors.create requires at least one argument\");\n\telse if(len === 1) {\n\t\tvec = new Float32Array(arguments[0]);\n\t}\n\telse {\n\t\tlet params = Array.prototype.slice.apply(arguments), buffer, offset = 0, size = params.shift(), len = params.length;\n\t\tif((len > 0) && params[len-1] instanceof ArrayBuffer) { // supplied buffer, no offset\n\t\t\toffset = 0;\n\t\t\tbuffer = params.pop();\n\t\t}\n\t\telse if((len > 1) && params[len-2] instanceof ArrayBuffer) { // supplied buffer + offset\n\t\t\toffset = params.pop();\n\t\t\tbuffer = params.pop();\n\t\t}\n\t\tif(buffer !== undefined) {\n\t\t\tvec = new Float32Array(buffer, offset, size);\n\t\t}\n\t\telse vec = new Float32Array(size);\n\t\tif(params.length > 0) vec.set(flatten(params));\n\t}\n\treturn vec;\n}\n\n/**\n * Wraps a vector or array-like object with vector functions as methods.\n * @param {array-like} vec the vector to wrap\n * @return {vector} the wrapped vector\n */\nexport function wrap(vec) {\n\t// define vector-specific methods\n\tmatrices.wrap(vec, vec.length, 1);\n\tvec.toString = asMethod(toString, vec);\n\tvec.homogenous = asMethod(homogenous, vec);\n\tvec.times = asMethod(times, vec);\n\tvec.lerp = asMethod(lerp, vec);\n\tvec.cubic = asMethod(cubic, vec);\n\tvec.dot = asMethod(dot, vec);\n\tvec.clamp = asMethod(clamp, vec);\n\tvec.angle = angle.bind(null, vec);\n\tvec.magnitude = magnitude.bind(null, vec);\n\tvec.distance = distance.bind(null, vec);\n\tvec.normalize = asMethod(normalize, vec);\n\tvec.mut_normalize = asMethod(mut_normalize, vec);\n\tvec.mut_times = asMethod(mut_times, vec);\n\tvec.mut_lerp = asMethod(mut_lerp, vec);\n\tvec.mut_cubic = asMethod(mut_cubic, vec);\n\tvec.mut_clamp = asMethod(mut_clamp, vec);\n\tvec.mut_copy = asMethod(mut_copy, vec);\n\tif(vec.length === 2 || vec.length === 3) vec.cross = asMethod(cross, vec);\n\tdefineAliases(vec);\n\treturn vec;\n}\n\n/**\n * Creates a 2d vector. Curried version of [create](#create) with first argument presupplied.\n * @function create.vec2\n * @return {vector}\n */\nexport const vec2 = create.vec2 = create.bind(null, 2);\n/** \n * Creates a 3d vector. Curried version of [create](#create) with first argument presupplied.\n * @function create.vec3\n * @return {vector}\n */\nexport const vec3 = create.vec3 = create.bind(null, 3);\n/** \n * Creates a 4d vector. Curried version of [create](#create) with first argument presupplied.\n * @function create.vec4\n * @return {vector}\n */\nexport const vec4 = create.vec4 = create.bind(null, 4);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.vectors.js\n// module id = 5\n// module chunks = 0","/**\nRequire the module:\n```javascript\nconst matrices = require(\"vectrix.matrices.js\");\n```\n\nCreate a 2x2 matrix using `create(rows, columns, values)`:\n```javascript\nlet mat = matrices.create(2,2,[0,1, 2,3]);\n```\n\nAdd two matrices using `a.plus(b)`:\n```javascript\nlet first =  matrices.create(2,2,[1,2, 3,4]);\nlet second = matrices.create(2,2,[3,4, 5,6]);\nlet sum = first.plus(second);\n```\n\nSubtract two matrices with `a.minus(b)`:\n```javascript\nlet diff = second.minus(first);\n```\n\nGet the dot product of two matrices via `a.dot(b)`:\n```javascript\nlet prod = first.dot(second);\n```\n\nDot can also multiply a matrix by a scalar:\n```javascript\nlet scalarProd = first.dot(3);\n```\n\nAll matrix and vector methods produce a new object from their operands, creating and\nreturning a new object as a result.\n```javascript\nsum.toArray(); // [4,6,8,10]\ndiff.toArray(); // [2,2,2,2]\nproduct.toArray(); // [13,16,29,26]\nfirst.toArray(); // [1,2,3,4]\nsecond.toArray(); // [3,4,5,6]\nscalarProd; // [3,6,9,12]\n```\n\nThis means matrix operations are composable in an intuitive left-to-right fashion:\n```javascript\nfirst.sub(second).dot(diff).toArray(); // [8,8,8,8]\n```\n\nBut keep in mind that you must follow matrix operation rules! Operating on two\nincompatible matrices returns undefined:\n```javascript\nlet third = matrices.create(1,2,[0,1]);\nfirst.add(third); // undefined\n```\n\nIt turned out to be useful to get a single row or column from a matrix, so you can\ndo that too using `mat.row(N)` and `mat.col(N)`:\n```javascript\nfirst.row(0); // matrix(2,1,[1,2])\nfirst.col(1); // matrix(1,2,[2,4])\n```\n@module vectrix/matrices\n*/\n\n\"use strict\";\n// set the max size for certain matrix operations, used in creating scratch memory\n//const MBF = 20;\nconst {cos, sin} = Math;\nimport * as vectors from \"./vectrix.vectors\";\nconst vec = vectors.create;\n\n/**\n * Flattens an array. Used for flattening arguments passed to factories. \n * @function flatten\n * @param {mixed} a an array, array-like, or object that can be flattened\n * @return {mixed} flat version of input\n */\nexport function flatten(a) {\n\t// cheap array-like check, may not always be reliable\n\tif(a instanceof Object && typeof a.length == \"number\") {\n\t\tlet i = 0, len = a.length, out = [];\n\t\tfor(;i < len; ++i) {\n\t\t\tout = out.concat(flatten(a[i]));\n\t\t}\n\t\treturn out;\n\t}\n\telse return a;\n}\n\n/**\n * Tests whether two unknown objects are like matrices (same rows and columns) or\n * a compatible set of matrix and vector.\n * @param {Matrix|Vector} a \n * @param {Matrix|Vector} b \n * @return {bool}\n */\nexport function likeMatrices(a, b) {\n\treturn (\n\t\t// matrices\n\t\t(a.rows ===  b.rows) && (a.cols === b.cols) ||\n\t\t// vectors\n\t\t((a.rows === undefined && b.rows === undefined) &&\n\t\t\ta.length === b.length) ||\n\t\t// matrix / vector\n\t\t(b.cols === 1 && b.cols === undefined && a.rows === b.length) ||\n\t\t// vector / matrix\n\t\t(a.rows === 1 && b.rows === undefined && a.cols === b.length)\n\t);\n}\n\n/**\n * Add two matrices together.\n * @example\n * plus(matrix, anotherMatrix); // function\n * matrix.plus(anotherMatrix); // method\n * @function plus\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out out value (optional)\n * @return {matrix}\n */\nexport const plus = (function() {\n\tlet i = 0|0, l = 0|0, ar = 0|0, ac = 0|0;\n\treturn function plus(a, b, out) {\n\t\tif(!likeMatrices(a, b)) return undefined;\n\t\tl = a.length;//-1;\n\t\tar = a.rows;\n\t\tac = a.cols;\n\t\tout = out||create.similar(a);\n\t\tfor(i = 0|0; i < l; ++i) {\n\t\t\tout[i] = a[i] + b[i]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [plus](#plus).\n *\n * @function mut_plus\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out out value (optional)\n * @return {matrix}\n */\nexport function mut_plus(a, b) {\n\treturn plus(a, b, a);\n}\n\n/**\n * Add a scalar to a matrix.\n * plus_scalar(matrix, anotherMatrix); // function\n * matrix.plus_scalar(anotherMatrix); // method\n * @function plus\n * @param {matrix} a first matrix\n * @param {matrix} s scalar\n * @param {matrix} out (optional) out value\n * @return {matrix}\n */\nexport const plus_scalar = (function() {\n\tlet i = 0|0;\n\treturn function plus_scalar(a, s, out) {\n\t\tout = out||create(a.rows, a.cols);\n\t\ts = +s;\n\t\ti = a.length;//-1;\n\t\twhile(i--) {\n\t\t\tout[i] = a[i] + s;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [plus](#plus).\n * @function mut_plus\n * @param {matrix} a first matrix\n * @param {matrix} s second matrix\n * @return {matrix}\n */\nexport function mut_plus_scalar(a, s) {\n\treturn plus_scalar(a, s, a);\n}\n\n/**\n * Subtract matrices.\n * @example\n * minus(matrix, anotherMatrix); // function\n * matrix.minus(anotherMatrix); // method\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @return {matrix}\n */\nexport const minus = (function() {\n\tlet i = 0|0, ac = 0|0, ar = 0|0;\n\treturn function minus(a, b, out) {\n\t\tif(!likeMatrices(a, b)) return undefined;\n\t\ti = a.length;//-1;\n\t\tar = a.rows || 0;\n\t\tac = a.cols || i;\n\t\tout = out||create.similar(a);\n\t\twhile(i--) {\n\t\t\tout[i] = a[i] - b[i]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [minus](#minus).\n *\n * @function mut_minus\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out out value (optional)\n * @return {matrix}\n */\nexport function mut_minus(a, b) {\n\treturn minus(a, b, a);\n}\n\n/**\n * subtract a scalar to a matrix.\n * minus_scalar(matrix, anotherMatrix); // function\n * matrix.minus_scalar(anotherMatrix); // method\n * @function minus\n * @param {matrix} a first matrix\n * @param {matrix} s scalar\n * @param {matrix} out (optional) out value\n * @return {matrix}\n */\nexport const minus_scalar = (function() {\n\tlet i = 0|0;\n\treturn function minus_scalar(a, s, out) {\n\t\tout = out||create(a.rows, a.cols);\n\t\ts = +s;\n\t\ti = a.length;//-1;\n\t\twhile(i--) {\n\t\t\tout[i] = a[i] - s;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Mutating version of [minus](#minus).\n * @function mut_minus\n * @param {matrix} a first matrix\n * @param {matrix} s second matrix\n * @return {matrix}\n */\nexport function mut_minus_scalar(a, s) {\n\treturn minus_scalar(a, s, a);\n}\n\n/**\n * Get a single column from a matrix.\n * @example\n * col(matrix, 2); // function\n * matrix.col(2); // method\n * @param {matrix} a source matrix\n * @param {n} column number (zero indexed)\n * @param {matrix} out (optional) out parameter, same rows, 1 column\n * @return {matrix} a single column from the source matrix\n */\nexport const col = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function col(a, n, out) {\n\t\tout = out||create(a.rows, 1);\n\t\tlet cols = a.cols;\n\t\tfor(i = 0, len = a.rows; i < len; ++i) {\n\t\t\tout[i] = a[i*cols+n]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Get a single row from a matrix.\n * @example\n * row(matrix, 2); // function\n * matrix.row(2); // method\n * @param {matrix} a source matrix\n * @param {n} row number (zero indexed)\n * @param {matrix} out (optional) out parameter with rows = a.cols, cols = 1 \n * @return {matrix} a single row from the source matrix\n */\nexport const row = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function row(a, n, out) {\n\t\tout = out||create(1, a.cols);\n\t\tlet cols = a.cols;\n\t\tfor(i = 0, len = a.cols; i < len; ++i) {\n\t\t\tout[i] = a[cols*n+i]\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport const multiply_scalar = (function() {\n\tlet i = 0|0, len = 0|0;\n\treturn function multiply_scalar(a, s, out) {\n\t\tout = out||create(a.rows, a.cols);\n\t\tfor(i = 0, len = a.length; i < len; ++i) {\n\t\t\tout[i] = a[i] * s;\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport function mut_multiply_scalar(a, s) {\n\treturn multiply_scalar(a, s, a);\n}\n\n/**\n * Multiply matrices or vectors.\n * @example\n * dot(matrix, anotherMatrix); // function \n * matrix.dot(anotherMatrix); // method\n * @param {matrix} a first matrix\n * @param {matrix} b second matrix\n * @param {matrix} out (optional) out parameter \n * @return {matrix}\n */\nexport const dot = (function() {\n\tlet blen = 0|0, brow = 0|0, bcol = 0|0, bcols = 0|0, brows = 0|0, bpos = 0|0;\n\tlet acols = 0|0, arows = 0|0, arow = 0|0, aroff = 0|0, apos = 0|0;\n\tlet opos = 0|0;\n\treturn function dot(a, b, out) {\n\t\tacols = (a.cols !== undefined)?a.cols:a.length;\n\t\tbrows = (b.rows !== undefined)?b.rows:b.length;\n\t\tif(acols === brows) {\n\t\t\tarows = (a.rows !== undefined)?a.rows:1;\n\t\t\tbcols = (b.cols !== undefined)?b.cols:1;\n\t\t\tblen = b.length;\n\t\t\tout = out||create(arows, bcols);\n\t\t\t//out.fill(0.0);\n\t\t\topos = 0;\n\t\t\tfor(arow = 0; arow < arows; ++arow) { \n\t\t\t\taroff = arow * acols;\n\t\t\t\tfor(bpos = 0|0; bpos < blen; ++bpos) {\n\t\t\t\t\tbcol = bpos % bcols;\n\t\t\t\t\tbrow = (bpos / bcols)|0; // bitwise floor is safe here and faster\n\t\t\t\t\topos = (bcols * arow) + bcol;\n\t\t\t\t\tapos = (aroff + brow);\n\t\t\t\t\tout[opos] = out[opos] + b[bpos] * a[apos];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\telse return undefined;\n\t}\n})();\n\n\n/**\n * Get the basic array representation of a matrix.\n * @example\n * toArray(matrix); // function\n * matrix.toArray(); // method\n * @param {matrix} a\n * @return {array} values as flat array\n */\nexport function toArray(a) {\n\treturn Array.prototype.slice.apply(a);\n}\n\n/**\n * Get a nicely formatted string representation of a matrix.\n * @example\n * matToString(matrix); // function\n * matrix.toString(); // method\n * @param {matrix} a\n * @return {string}\n */\nexport const toString = (function() {\n\tlet label = \"matrix(\", string = \"\", c = 0|0, r = 0|0, i = 0|0, len = 0|0,\n\t\tstrings, colWidth, row;\n\tfunction padLeft(l,s) {\n\t\treturn ((\" \").repeat(l)+s).slice(-l);\n\t}\n\tfunction makeStrings(a) {\n\t\treturn toArray(a).map((cur) => cur.toFixed(2));\n\t}\n\treturn function toString(a) {\n\t\tc = a.cols|0;\n\t\tr = a.rows|0;\n\t\tstring = label;\n\t\tstrings = makeStrings(a);\n\t\tcolWidth = strings.reduce((a, b) => Math.max(a, b.length), 0);\n\t\tfor(i = 0; i < r; ++i) {\n\t\t\trow = strings.slice(i*c, 2*(i+1)*c);\n\t\t}\n\t\tfor(i = 0, len = strings.length; i < len; ++i) {\n\t\t\tstrings[i] = padLeft(colWidth, strings[i]);\n\t\t\tif(i > 0) {\n\t\t\t\tif(i % c === 0) string += \"\\n       \";\n\t\t\t\telse string += \", \";\n\t\t\t}\n\t\t\tstring += strings[i];\n\t\t}\n\t\treturn string + \")\";\n\t}\n})();\n\n/*\n * Matrix factories\n */\n\n/**\n * Factory for creating generic matrices.\n * @function create\n * @param {int} rows matrix rows\n * @param {int} cols matrix columns\n * @param {mixed} values (optional) matrix values as an array-like object\n * @param {ArrayBuffer} buffer (optional) pre-supplied ArrayBuffer\n * @param {int} offset (optional) offset for buffer\n * @return {matrix}\n */\nexport function create(rows, cols, values = [], buffer = undefined, offset = 0) {\n\tvar matrix;\n\tif(buffer) {\n\t\tmatrix = new Float32Array(buffer, offset, cols * rows);\n\t}\n\telse {\n\t\tmatrix = new Float32Array(cols * rows);\n\t}\n\tvar vals = flatten(values);\n\tmatrix.rows = rows;\n\tmatrix.cols = cols;\n\tif(vals.length) matrix.set(vals);\n\telse matrix.fill(0.0); // just in case it was a previously used buffer\n\treturn matrix;\n}\n\n/**\n * Creates a matrix or vector similar to the one given.\n */\ncreate.similar = function(a, ...args) {\n\tif(a.rows && a.cols) return create.apply(null, [a.rows, a.cols].concat(args));\n\telse return vec.apply(null, [a.length].concat(args));\n}\n\n/**\n * Wraps an matrix (created by [create](#create)) with matrix methods.\n * @param {array-like} matrix a matrix, Array, or Float32Array to wrap as a matrix\n * @param {int} rows (required for non-matrices) number of rows the matrix should have\n * @param {int} cols (required for non-matrices) number of columns the matrix should have\n * @return {matrix} a wrapped matrix\n */\nexport function wrap(matrix, rows, cols) {\n\tmatrix.rows = rows||matrix.rows;\n\tmatrix.cols = cols||matrix.cols;\n\tmatrix.toArray = toArray.bind(null, matrix);\n\tmatrix.toString = toString.bind(null, matrix);\n\tmatrix.col = col.bind(null, matrix);\n\tmatrix.row = row.bind(null, matrix);\n\tmatrix.plus = plus.bind(null, matrix);\n\tmatrix.plus_scalar = plus_scalar.bind(null, matrix);\n\tmatrix.minus = minus.bind(null, matrix);\n\tmatrix.minus_scalar = minus_scalar.bind(null, matrix);\n\tmatrix.dot = dot.bind(null, matrix);\n\tmatrix.multiply_scalar = multiply_scalar.bind(null, matrix);\n\tmatrix.mut_plus = mut_plus.bind(null, matrix);\n\tmatrix.mut_plus_scalar = mut_plus_scalar.bind(null, matrix);\n\tmatrix.mut_minus = mut_minus.bind(null, matrix);\n\tmatrix.mut_minus_scalar = mut_minus_scalar.bind(null, matrix);\n\treturn matrix;\n}\n\n/**\n * Creates an identity matrix of arbitrary dimensions.\n * @example\n * matrices.create.identity(4); // a 4x4 identity matrix\n * @param {int} n dimensions of the matrix\n * @param {ArrayBuffer} buffer (optional) pre-supplied ArrayBuffer\n * @param {int} offset (optional) offset for buffer\n * @return {matrix} identity matrix \n */\ncreate.identity = (function() {\n\tlet i = 0|0, len = 0|0, j = 0|0;\n\treturn function identity(n, buffer = undefined, offset = 0) {\n\t\tn = n|0;\n\t\tlet m = create(n, n, undefined, buffer, offset);\n\t\tfor(i = 0|0, len = n*n, j = n+1|0; i < len; i+=j) m[i] = 1.0;\n\t\treturn m;\n\t}\n})();\n\n/**\n * Creates a translation matrix for a homogenous coordinate in 2D or 3D space. \n * @example\n * let vec = vectors.create.vec3(3,4,5).toHomogenous();\n * matrices.create.identity(vec); // translates by 3x, 4y, 5z\n * @param {vector} v vector representing the distance to translate \n * @return {matrix} 3x3 or 4x4 matrix\n */\ncreate.translation = (function() {\n\tlet v2 = Float32Array.from([1.0,0.0,0.0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,1.0,0.0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,0.0,1.0]); \n\tlet v3 = Float32Array.from([1.0,0.0,0.0,0.0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  0.0,1.0,0.0,0.0, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,0.0,1.0,0.0, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0.0,0.0,0.0,1.0]);\n\treturn function translation(v, buffer = undefined, offset = 0) {\n\t\tswitch(v.length) {\n\t\t\tcase 2: \n\t\t\t\tv2[2] = v[0];\n\t\t\t\tv2[5] = v[1];\n\t\t\t\treturn create(3, 3, v2, buffer, offset);\n\t\t\tcase 3: \n\t\t\t\tv3[3]  = v[0];\n\t\t\t\tv3[7]  = v[1];\n\t\t\t\tv3[11] = v[2];\n\t\t\t\treturn create(4, 4, v3, buffer, offset);\n\t\t\tdefault: return undefined;\n\t\t}\n\t}\n})();\n\n/**\n * Creates a rotation matrix around absolute X axis of angle r.\n * @example\n * matrices.create.rotateX(1.5708); // 90 degree rotation around X axis\n * @param {radian} r angle as a radian\n * @return {matrix} 3x3 matrix\n */\ncreate.rotateX = (function() {\n\tlet cosr = 0.0, sinr = 0.0, scratch = Float32Array.from([\n\t\t1.0,0.0,0.0,\n\t\t0.0,1.0,0.0,\n\t\t0.0,0.0,1.0\n\t]);\n\treturn function rotateX(r, buffer = undefined, offset = 0) {\n\t\tcosr = cos(r);\n\t\tsinr = sin(r);\n\t\tscratch[4] = cosr;\n\t\tscratch[5] = -sinr;\n\t\tscratch[7] = sinr;\n\t\tscratch[8] = cosr;\n\t\treturn create(3, 3, scratch, buffer, offset);\n\t}\n})();\n\n/**\n * Creates a rotation matrix around absolute Y axis of angle r.\n * @example\n * matrices.create.rotateY(1.5708); // 90 degree rotation around Y axis\n * @param {radian} r angle as a radian\n * @return {matrix} 3x3 matrix\n */\ncreate.rotateY = (function() {\n\tlet cosr = 0.0, sinr = 0.0, scratch = Float32Array.from([\n\t\t1.0,0.0,0.0,\n\t\t0.0,1.0,0.0,\n\t\t0.0,0.0,1.0\n\t]);\n\treturn function rotateY(r, buffer = undefined, offset = 0) {\n\t\tcosr = cos(r);\n\t\tsinr = sin(r);\n\t\tscratch[0] = cosr;\n\t\tscratch[2] = sinr;\n\t\tscratch[6] = -sinr;\n\t\tscratch[8] = cosr;\n\t\treturn create(3, 3, scratch, buffer, offset);\n\t}\n})();\n\n/**\n * Creates a rotation matrix around absolute Z axis of angle r.\n * @example\n * matrices.create.rotateZ(1.5708); // 90 degree rotation around Z axis\n * @param {radian} r angle as a radian\n * @return {matrix} 3x3 matrix\n */\ncreate.rotateZ = (function() {\n\tlet cosr = 0.0, sinr = 0.0, scratch = Float32Array.from([\n\t\t1.0,0.0,0.0,\n\t\t0.0,1.0,0.0,\n\t\t0.0,0.0,1.0\n\t]);\n\treturn function rotateZ(r, buffer = undefined, offset = 0) {\n\t\tcosr = cos(r);\n\t\tsinr = sin(r);\n\t\tscratch[0] = cosr;\n\t\tscratch[1] = -sinr;\n\t\tscratch[3] = sinr;\n\t\tscratch[4] = cosr;\n\t\treturn create(3, 3, scratch, buffer, offset);\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.matrices.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nimport * as bokeh from \"./bokeh\";\nimport * as entities from \"./entities\";\nimport * as sprites from \"./sprites\";\nimport * as ui from \"./ui\";\nexport {bokeh, entities, sprites, ui};\n\nlet animating = false; // whether the game is currently running animation loop\nlet game; // game environment object\nlet controls; // control state object\nlet props; // display properties\n\n/**\n * Using this checks and avoids altering the canvas context state machine if unnecessary,\n * which theoretically saves a little time.\n */\nexport function updateCompositeOperation(ctx, op) {\n\tif(ctx.globalCompositeOperation !== op) ctx.globalCompositeOperation = op;\n}\n\n/**\n * Calculates the screenspace pixel offset of a coordinate from the [-1,1] coordinate\n * range used in game position vectors.\n */\nexport function screenSpace(x) {\n\treturn ((x+1)/2) * props.minDimension;\n}\n\n/**\n * Finds the screen space equivalent of the game space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\n\nexport function screenSpaceVec(v, out) {\n\tout[0] = (((v[0]+1)/2)*props.minDimension);\n\tout[1] = (((v[1]+1)/2)*props.minDimension);\n\treturn out;\n}\n\n/**\n * Finds the game space equivalent of the sceen space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\nexport function gameSpaceVec(v, out) {\n\tout[0] = 2*((v[0])/props.minDimension)-1;\n\tout[1] = 2*((v[1])/props.minDimension)-1;\n}\n\n/**\n * Checks if entity is out of screen space by more than 50%.\n */\nexport function offscreen(x, y) {\n\treturn (\n\t\tx < (props.width  * -0.5) || x >props.width   * 1.5 ||\n\t\ty < (props.height * -0.5) || y > props.height * 1.5\n\t)\n}\n\n/**\n * Draws a colored circle.\n */\nexport function drawCircle(ctx, x, y, size, fillStyle, lineWidth = 0, strokeStyle = undefined) {\n\tctx.globalCompositeOperation = \"source-over\";\n\tctx.beginPath();\n\tctx.arc(x, y, size, 2 * Math.PI, false);\n\tctx.fillStyle = fillStyle;\n\tctx.fill();\n\tif(strokeStyle) {\n\t\tctx.strokeStyle = strokeStyle;\n\t\tctx.lineWidth = lineWidth;\n\t\tctx.stroke();\n\t}\n\tctx.closePath();\n}\n\n\n/**\n * Main animation loop.\n */\nexport function tick() {\n\tif(!animating) animating = true;\n\tbokeh.draw();\n\tentities.draw(game);\n\tui.draw();\n}\n\n/**\n * Initializes game environment.\n */\nexport function init(state, display) {\n\tgame = state.game;\n\tprops = display.props;\n\tcontrols = state.controls;\n\tbokeh.init(display);\n\tentities.init(display);\n\tui.init(display);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/index.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nimport * as vectrix from \"@nphyx/vectrix\";\nimport {drag} from \"../photonomix.util\";\nimport {TARGET_FPS, GLOBAL_DRAG, PHOTON_LIFETIME, PHOTON_BASE_SIZE} from \"../photonomix.constants\";\nlet {vec2, times} = vectrix.vectors;\nlet {mut_plus} = vectrix.matrices;\nconst {random} = Math;\n\nconst I8 = 1;\nconst F32 = 4;\nconst O_POS = 0;\nconst O_VEL = F32*2;\nconst FLOAT_LENGTH = O_VEL + F32*2;\nconst O_COLOR = 0;\nconst O_LIFE = O_COLOR + I8;\nconst O_MASS = O_LIFE + I8;\nconst U8_LENGTH = O_MASS + I8;\nexport const BUFFER_LENGTH = (FLOAT_LENGTH + U8_LENGTH) + (F32 - (FLOAT_LENGTH + U8_LENGTH)%F32);\n\nexport const COLOR_R = 0, COLOR_G = 1, COLOR_B = 2;\nexport default function Photon(ipos, ivel, color, pool = undefined) {\n\tlet buffer;\n\tthis.pool = pool;\n\tif(pool) {\n\t\tbuffer = pool.buffer;\n\t\tthis.offset = pool.allocate();\n\t}\n \telse {\n\t\tbuffer = new ArrayBuffer(BUFFER_LENGTH);\n\t\tthis.offset = 0;\n\t}\n\tthis.pos = vec2(ipos[0], ipos[1], buffer, O_POS+this.offset);\n\tthis.vel = vec2(ivel[0], ivel[1], buffer, O_VEL+this.offset);\n\tthis.intVals = new Uint8ClampedArray(buffer, FLOAT_LENGTH+this.offset, U8_LENGTH);\n\n\tObject.defineProperties(this, {\n\t\t\"color\": {get:() => this.intVals[O_COLOR], set:(x) => this.intVals[O_COLOR] = x},\n\t\t\"lifetime\": {get:() => this.intVals[O_LIFE], set:(x) => this.intVals[O_LIFE] = x},\n\t\t\"mass\": {get:() => this.intVals[O_MASS], set:(x) => this.intVals[O_MASS] = x}\n\t});\n\tthis.color = color;\n\tthis.lifetime = PHOTON_LIFETIME;\n\tthis.size = PHOTON_BASE_SIZE;\n\tthis.mass = 1;\n\tthis.pulse = ~~(TARGET_FPS*random());\n}\n\nlet tmpvec = vec2(), pos, vel;\nPhoton.prototype.tick = function(surrounding, delta) {\n\tif(this.lifetime > 0) this.lifetime--;\n\tpos = this.pos; vel = this.vel;\t\n\tmut_plus(pos, times(vel, delta, tmpvec));\n\tmut_plus(vel, drag(vel, GLOBAL_DRAG));\n}\n\nPhoton.prototype.destroy = function() {\n\tif(this.pool) this.pool.free(this.offset);\n\telse throw new Error(\"called photon.destroy, but photon has no pool\");\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Photon.js\n// module id = 8\n// module chunks = 0","\"use strict\";\n\n/**\n * *Very* simple event object.\n */\nexport function Events() {\n\tthis.queue = {};\n\treturn this;\n}\n\nEvents.prototype.on = function(event, callback) {\n\tif(this.queue[event] === undefined) this.queue[event] = [];\n\tthis.queue[event].push(callback);\n}\n\nEvents.prototype.fire = (function() {\n\tlet i, len;\n\treturn function(event, params) {\n\t\tif(this.queue[event] === undefined) return;\n\t\tfor(i = 0, len = this.queue[event].length; i < len; ++i) {\n\t\t\tthis.queue[event][i].call(params);\n\t\t}\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.events.js\n// module id = 9\n// module chunks = 0","export const TARGET_FPS = 30;\nexport const GRAVITY = 6.67408e-8;\nexport const GLOBAL_DRAG = 0.1;\n\n// general debug switch\nexport const DEBUG = true;\n// toggles vector validation in various functions that tend to produce\n// infinite or NaN results; when enabled, vectors are checked and if invalid\n// the function is rerun step by step and logged to identify trouble spots\nexport const VALIDATE_VECTORS = DEBUG || true;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.constants.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nexport const colorStrings = Array(4096);\nexport var moteSpriteSheetCanvas;\nconst MASK_R = 0xf00;\nconst MASK_G = 0x0f0;\nconst MASK_B = 0x00f;\n\nvar moteSprites;\nvar moteMaskCanvas;\nvar moteSpriteSheetContext;\nvar moteMaskContext;\nvar moteSpriteScale = 0;\nvar moteSpriteSize = 0;\nvar motePixelSize = 0;\nvar moteTmpCanvas;\nvar moteTmpContext;\n\nexport function initMoteSpriteSheet(scale, size) {\n\tmoteSpriteScale = scale;\n\tmoteSpriteSize = size;\n\tmotePixelSize = scaleSprite(moteSpriteScale, moteSpriteSize);\n\n\tmoteTmpCanvas = document.createElement(\"canvas\");\n\tmoteTmpCanvas.width = moteTmpCanvas.height = motePixelSize;\n\tmoteTmpContext = moteTmpCanvas.getContext(\"2d\");\n\n\tmoteSpriteSheetCanvas = document.createElement(\"canvas\");\n\tmoteSpriteSheetCanvas.width = moteSpriteSheetCanvas.height = motePixelSize*64;\n\tmoteSpriteSheetContext = moteSpriteSheetCanvas.getContext(\"2d\");\t\n\n\tmoteMaskCanvas = document.createElement(\"canvas\");\n\tmoteMaskCanvas.width = moteMaskCanvas.height = motePixelSize;\n\tmoteMaskContext = moteMaskCanvas.getContext(\"2d\");\t\n\n\tmoteSprites = Array(4096);\n\tlet g = moteMaskContext.createRadialGradient(\n\t\tmotePixelSize/2, motePixelSize/2, motePixelSize/2,\n\t\tmotePixelSize/2, motePixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(255,255,255,1.0\");\n\tg.addColorStop(0.7, \"rgba(255,255,255,0.5)\");\n\tg.addColorStop(0.1, \"rgba(255,255,255,0.0)\");\n\tmoteMaskContext.fillStyle = g;\n\tmoteMaskContext.fillRect(0, 0, motePixelSize, motePixelSize);\n\tfor(let i = 0; i < 4096; ++i) {\n\t\tcolorStrings[i] = \"rgb(\" +((i & MASK_R) >> 4)+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\",\"+(i  & MASK_G)+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\",\"+((i & MASK_B) << 4)+\")\";\t\n\t\tmoteSprites[i] = createMoteSprite(i, colorStrings[i]);\n\t}\n}\n\nexport function createMoteCenterSprite() {\n\tlet pixelSize = motePixelSize;\n\tlet w = motePixelSize;\n\tlet h = motePixelSize;\n\tlet px = 0;\n\tlet py = 0;\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = w;\n\tcanvas.height = h;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.globalCompositeOperation = \"copy\";\n\tcontext.drawImage(moteMaskCanvas, 0, 0, w, h);\n\tcontext.globalCompositeOperation = \"source-in\";\n\tcontext.fillStyle = \"rgba(255,255,255,0.25)\";\n\tcontext.fillRect(0, 0, w, h);\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:context,\n\t\tpixelSize:pixelSize,\n\t\tsw:pixelSize,\n\t\tsh:pixelSize,\n\t\tsx:px,\n\t\tsy:py\n\t}\n\n}\n\n\nexport function getMoteSprite(index) {\n\treturn moteSprites[index];\n}\n\nexport function getColorString(index) {\n\treturn colorStrings[index];\n}\n\nexport function colorIndex(r, g, b) {\n\treturn (r >> 4 << 8) + (g >> 4 << 4) + (b >> 4);\n}\n\nexport function createMoteSprite(index, color) {\n\tlet pixelSize = motePixelSize;\n\tlet w = motePixelSize;\n\tlet h = motePixelSize;\n\tlet y = (index%64);\n\tlet x = (index-y)/64;\n\tlet py = y*motePixelSize;\n\tlet px = x*motePixelSize;\n\tmoteTmpContext.globalCompositeOperation = \"copy\";\n\tmoteTmpContext.drawImage(moteMaskCanvas, 0, 0, w, h);\n\tmoteTmpContext.globalCompositeOperation = \"source-in\";\n\tmoteTmpContext.fillStyle = color;\n\tmoteTmpContext.fillRect(0, 0, w, h);\n\tmoteSpriteSheetContext.drawImage(moteTmpCanvas, px, py, w, h);\n\treturn {\n\t\tcanvas:moteSpriteSheetCanvas,\n\t\tcontext:moteSpriteSheetContext,\n\t\tpixelSize:pixelSize,\n\t\tsw:pixelSize,\n\t\tsh:pixelSize,\n\t\tsx:px,\n\t\tsy:py\n\t}\n}\n\nfunction scaleSprite(scale, spriteSize) {\n\treturn ~~(scale*spriteSize);\n}\n\n/**\n * Creates a photon sprite.\n */\nexport function createPhotonSprite(scale, spriteSize, color) {\n\tlet pixelSize = 17; //scaleSprite(scale, spriteSize);\n\tlet hps = ~~(pixelSize/2);\n\tlet qps = ~~(pixelSize/4);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet context = canvas.getContext(\"2d\");\n\tlet g;\n\t/*\n\tlet mask = document.createElement(\"canvas\");\n\tmask.width = mask.height = pixelSize; \n\tlet maskCtx = mask.getContext(\"2d\");\n\t*/\n\t/*\n\tg = maskCtx.createRadialGradient(hps, hps, hps, hps, hps, 0);\n\tg.addColorStop(0.0, \"rgba(255,255,255,0.0)\");\n\tg.addColorStop(0.09, \"rgba(255,255,255,1.0)\");\n\tmaskCtx.fillStyle = g;\n\tmaskCtx.fillRect(0, 0, pixelSize, pixelSize);\n\tcontext.drawImage(mask, -hps, -hps, pixelSize, pixelSize);\n\tcontext.drawImage(mask, hps, hps, pixelSize, pixelSize);\n\tcontext.drawImage(mask, hps, -hps, pixelSize, pixelSize);\n\tcontext.drawImage(mask, -hps, hps, pixelSize, pixelSize);\n\t*/\n\tg = context.createRadialGradient(hps, hps, hps, hps, hps, 0);\n\tg.addColorStop(0.7, color);\n\tg.addColorStop(1.0, \"white\");\n\tcontext.globalCompositeOperation = \"source-over\";\n\tcontext.beginPath();\n\tcontext.moveTo(hps, 0);\n\tcontext.quadraticCurveTo(hps, hps, 0, hps);\n\tcontext.quadraticCurveTo(hps, hps, hps, pixelSize);\n\tcontext.quadraticCurveTo(hps, hps, pixelSize, hps);\n\tcontext.quadraticCurveTo(hps, hps, hps, 0);\n\tcontext.fillStyle = g;\n\tcontext.fill();\n\tcontext.closePath();\n\tcontext.beginPath();\n\tcontext.moveTo(hps, qps);\n\tcontext.lineTo(hps, pixelSize-qps);\n\tcontext.moveTo(qps, hps);\n\tcontext.lineTo(pixelSize-qps, hps);\n\tcontext.strokeStyle = \"white\";\n\tcontext.lineWidth = 1;\n\tcontext.stroke();\n\tcontext.closePath();\n\t//context.fillRect(0, 0, pixelSize, pixelSize);\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:context,\n\t\tpixelSize:pixelSize,\n\t\tw:pixelSize,\n\t\th:pixelSize\n\t}\n}\n\n/**\n * Creates a hit marker sprite.\n */\nexport function createMarkerHitSprite(scale, spriteSize) {\n\tlet pixelSize = scaleSprite(scale, spriteSize);\n\tlet hps = ~~(pixelSize/2);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet context = canvas.getContext(\"2d\");\n\tlet g = context.createRadialGradient(hps, hps, hps, hps, hps, 0);\n\tg.addColorStop(0.0, \"rgba(255,255,255,0.0)\");\n\tg.addColorStop(0.05, \"rgba(255,255,255,0.4)\");\n\tg.addColorStop(0.09, \"rgba(255,255,255,0.35)\");\n\tg.addColorStop(0.55, \"rgba(255,255,255,0.0)\");\n\tcontext.fillStyle = g;\n\tcontext.fillRect(0, 0, pixelSize, pixelSize);\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:context,\n\t\tpixelSize:pixelSize,\n\t\tw:pixelSize,\n\t\th:pixelSize\n\t}\n}\n\n/**\n * Creates a void sprite.\n */\nexport function createVoidSprite(scale, spriteSize) {\n\tlet pixelSize = scaleSprite(scale, spriteSize);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet ctx = canvas.getContext(\"2d\");\t\n\tlet g = ctx.createRadialGradient(\n\t\tpixelSize/2, pixelSize/2, pixelSize/2,\n\t\tpixelSize/2, pixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(0,0,0,1.0)\");\n\tg.addColorStop(0.50, \"rgba(0,0,0,1.0)\");\n\tg.addColorStop(0.479, \"rgba(0,0,0,0.99)\");\n\tg.addColorStop(0.442, \"rgba(0,0,0,0.98)\");\n\tg.addColorStop(0.44, \"rgba(255,255,255,0.95)\");\n\tg.addColorStop(0.43, \"rgba(255,255,255,0.95)\");\n\tg.addColorStop(0.41, \"rgba(255,255,255,0.39)\");\n\tg.addColorStop(0.37, \"rgba(255,255,255,0.29)\");\n\tg.addColorStop(0.36, \"rgba(255,255,255,0.32)\");\n\tg.addColorStop(0.34, \"rgba(255,255,255,0.31)\");\n\tg.addColorStop(0.30, \"rgba(255,255,255,0.35)\");\n\tg.addColorStop(0.28, \"rgba(255,255,255,0.39)\");\n\tg.addColorStop(0.26, \"rgba(255,255,255,0.35)\");\n\tg.addColorStop(0.23, \"rgba(255,255,255,0.30)\");\n\tg.addColorStop(0.21, \"rgba(255,255,255,0.26)\");\n\tg.addColorStop(0.20, \"rgba(255,255,255,0.31)\");\n\tg.addColorStop(0.19, \"rgba(255,255,255,0.34)\");\n\tg.addColorStop(0.17, \"rgba(255,255,255,0.29)\");\n\tg.addColorStop(0.16, \"rgba(255,255,255,0.21)\");\n\tg.addColorStop(0.15, \"rgba(255,255,255,0.19)\");\n\tg.addColorStop(0.14, \"rgba(255,255,255,0.15)\");\n\tg.addColorStop(0.10, \"rgba(255,255,255,0.09)\");\n\tg.addColorStop(0.09, \"rgba(255,255,255,0.15)\");\n\tg.addColorStop(0.07, \"rgba(255,255,255,0.12)\");\n\tg.addColorStop(0.05, \"rgba(255,255,255,0.09)\");\n\t/*\n\tg.addColorStop(0.43, \"rgba(128,128,128,0.4)\");\n\tg.addColorStop(0.41, \"rgba(192,192,192,0.6)\");\n\tg.addColorStop(0.4, \"rgba(192,192,192,0.4)\");\n\tg.addColorStop(0.37, \"rgba(192,192,192,0.3)\");\n\tg.addColorStop(0.15, \"rgba(0,0,0,0.2)\");\n\t*/\n\tg.addColorStop(0.0, \"rgba(0,0,0,0.0)\");\n\tctx.fillStyle = g;\n\tctx.fillRect(0, 0, pixelSize, pixelSize);\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:ctx,\n\t\tw:pixelSize,\n\t\th:pixelSize,\n\t\tpixelSize:pixelSize\n\t}\n}\n\n/**\n * Creates an emitter sprite.\n */\nexport function createEmitterSprite(scale, spriteSize) {\n\tlet pixelSize = scaleSprite(scale, spriteSize);\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet ctx = canvas.getContext(\"2d\");\t\n\tlet g = ctx.createRadialGradient(\n\t\tpixelSize/2, pixelSize/2, pixelSize/2,\n\t\tpixelSize/2, pixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(255,255,255,0.3)\");\n\tg.addColorStop(0.78, \"rgba(255,255,255,0.3)\");\n\tg.addColorStop(0.58, \"rgba(255,255,255,0.22)\");\n\tg.addColorStop(0.48, \"rgba(255,255,255,0.17)\");\n\tg.addColorStop(0.44, \"rgba(255,255,255,0.22)\");\n\tg.addColorStop(0.40, \"rgba(255,255,255,0.19)\");\n\tg.addColorStop(0.2, \"rgba(255,255,255,0.09)\");\n\tg.addColorStop(0.1, \"rgba(255,255,255,0.0)\");\n\tctx.fillStyle = g;\n\tctx.fillRect(0, 0, pixelSize, pixelSize);\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:ctx,\n\t\tw:pixelSize,\n\t\th:pixelSize,\n\t\tpixelSize:pixelSize\n\t}\n}\n\nexport function createGameSpaceMask() {\n\tlet pixelSize = 1000;\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = canvas.height = pixelSize;\n\tlet ctx = canvas.getContext(\"2d\");\t\n\tlet g = ctx.createRadialGradient(\n\t\tpixelSize/2, pixelSize/2, pixelSize/2,\n\t\tpixelSize/2, pixelSize/2, 0\n\t);\n\tg.addColorStop(1, \"rgba(0,0,0,0.0)\");\n\tg.addColorStop(0.05, \"rgba(0,0,0,0.0)\");\n\tg.addColorStop(0.0, \"rgba(255,255,255,1.0)\");\n\tctx.fillStyle = g;\n\tctx.fillRect(0, 0, pixelSize, pixelSize);\n\treturn {\n\t\tcanvas:canvas,\n\t\tcontext:ctx,\n\t\tw:pixelSize,\n\t\th:pixelSize,\n\t\tpixelSize:pixelSize\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/sprites.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nlet {random, max, min, floor, ceil, sin} = Math;\nimport {TARGET_FPS, MOTE_BASE_SPEED, MOTE_BASE_SIZE, MOTE_BASE_SIGHT, PREGNANT_THRESHOLD, \n\t\t\t\tDEATH_THRESHOLD, GLOBAL_DRAG, PREGNANT_TIME, DEBUG} from \"../photonomix.constants\";\nimport * as vectrix from \"@nphyx/vectrix\";\nimport {avoid, accelerate, drag, twiddleVec, ratio, adjRand, posneg, outOfBounds, rotate} from \"../photonomix.util\";\nconst {vec2, times, mut_clamp, magnitude, distance, mut_copy, mut_times} = vectrix.vectors;\nconst {plus, mut_plus} = vectrix.matrices;\nimport Photon, {COLOR_R, COLOR_G, COLOR_B} from \"./Photon\";\nimport Void from \"./Void\";\nconst clamp = mut_clamp;\n// Center of the playfield is at 0,0 (ranging from -1 to 1 on X and Y axis)\nconst POS_C  = vec2(0.0, 0.0);\n// activity type constants\nexport const ACT_IDLE   = 0;\nexport const ACT_SEARCH = 1;\nexport const ACT_CHASE  = 2;\nexport const ACT_AVOID  = 3;\nexport const ACT_ATTACK = 4;\nexport const ACT_LINK   = 5;\n\n// twiddle to slightly offset the values, avoids divide by zero and other errors\n// inherent to acceleration, friction, drag and gravity equations\ntwiddleVec(POS_C);\n// relative color values derived from a Mote's photons, used to produce color string\n// for rendering\n\n// various consts below are indexes and byte counts for mote data\n// byte length of these value types\nconst I8 = 1;\nconst F32 = 4;\n\n// uint8 values = photons[3]\nconst U8_PHO  = 0,\n\t\t\tU8_COL  = U8_PHO        + I8*3, \n\t\t\tU8_VAL_LENGTH = U8_COL  + I8*3,\n\t\t\tI8_BYTE_OFFSET = U8_VAL_LENGTH;\n// int8 values =  dying, pregnant, injured, lastMeal, pulse\nconst\tI8_DYING       = 0,\n\t\t\tI8_PREG        = I8_DYING       + I8,\n\t\t\tI8_INJURED     = I8_PREG        + I8,\n\t\t\tI8_LAST_INJURY = I8_INJURED     + I8,\n\t\t\tI8_MEAL        = I8_LAST_INJURY + I8,\n\t\t\tI8_UPD         = I8_MEAL        + I8,\n\t\t\tI8_PULSE       = I8_UPD         + I8,\n\t\t\tI8_ACT         = I8_PULSE       + I8,\n\t\t\tI8_VAL_LENGTH  = I8_ACT         + I8,\n\t\t\tINT_VAL_LENGTH = U8_VAL_LENGTH  + I8_VAL_LENGTH;\n\n// float32 values = p[3], v[3], color[4], size, sizeMin, sizeMax, speed, sight, agro, fear, potential, resistance\n// from here on, increments of value * 4\n// vectors\nconst VEC_BYTE_OFFSET = INT_VAL_LENGTH + (F32-(INT_VAL_LENGTH % F32)), // float32 offsets must be multiples of 4\n\t\t\tF32_POS  = 0,\n\t\t\tF32_VEL  = F32_POS + 2,\n\t\t\tF32_RAT  = F32_VEL + 2,\n\t\t\tF32_PREF = F32_RAT + 3,\n\t\t\tVEC_VAL_LENGTH = F32_PREF + 3;\n\nconst F32_BYTE_OFFSET = VEC_BYTE_OFFSET + (VEC_VAL_LENGTH*F32),\n\t\t\t// scalars\n\t\t\tF32_SIZE         = 0,\n\t\t\tF32_SIZE_MIN     = F32_SIZE       + 1,\n\t\t\tF32_SIZE_MAX     = F32_SIZE_MIN   + 1,\n\t\t\tF32_SPEED        = F32_SIZE_MAX   + 1,\n\t\t\tF32_SIGHT        = F32_SPEED      + 1,\n\t\t\tF32_AGRO         = F32_SIGHT      + 1,\n\t\t\tF32_FEAR         = F32_AGRO       + 1,\n\t\t\tF32_POTENTIAL    = F32_FEAR       + 1,\n\t\t\tF32_RESISTANCE   = F32_POTENTIAL  + 1,\n\t\t\tF32_MASS         = F32_RESISTANCE + 1,\n\t\t\tFLOAT_VAL_LENGTH = F32_MASS       + 1;\n\nexport const BUFFER_LENGTH = F32_BYTE_OFFSET + (FLOAT_VAL_LENGTH*F32);\n\n// scratch vectors used in various functions\nconst scratch1 = vec2(), scratch2 = vec2();\n\n\n/**\n * Constructor for Motes.\n * @param {Float32Array(3)} photons initial photons (0-255, R, G, B)\n * @param {vec2} pos initial position\n * @param {Float} bSpeed (optional) base acceleration: inheritance and predesigned motes \n * @param {Float} bSight (optional) base vision radius: inheritance and predesigned motes \n * @param {Float} bAgro (optional) base aggressiveness: inheritance and predesigned motes \n * @param {Float} bFear (optional) base fearfulness: inheritance and predesigned motes \n * @param {BufferPool} pool (optional) buffer pool to build the mote on\n * @property {vec2} pos position vector\n * @property {vec2} vel velocity vector\n * @property {Uint8} r red photon value (setter updates values and derived props)\n * @property {Uint8} g green photon value (setter updates value and derived props)\n * @property {Uint8} b blue photon value (setter updates value and derived props)\n * @property {string} color_string rgba color string, used for drawing in 2d\n * @property {Int8} dying counter from 1 to DEATH_THRESHOLD when a mote is dying\n * @property {Int8} pregnant coundown from PREGNANT_DURATION when a mote is pregnant\n * @property {Int8} injured injury counter, counts down in mote.bleed\n * @property {Int8} lastInjury strength of most recent injury taken\n * @property {Int8} pulse frame offset for pulse animation\n * @property {Int8} lastMeal color value for last meal (see R, G, B constants)\n * @property {Int8} action action choice in relation to target \n * @property {Float32} speed derived acceleration speed based on Mote properties\n * @property {Float32} sight derived vision radius based on Mote properties \n * @property {Float32} agro derived aggression factor based on Mote properties \n * @property {Float32} fear derived fearfulness factor based on Mote properties \n * @property {Float32} potential accumulated charge potential\n * @property {Float32} resistance accumulated resistance to charge\n * @property {Float32} size derived size radius as fraction of screen size\n * @property {Float32} sizeMin minimum size the mote can reach as it shrinks\n * @property {Float32} sizeMax maximum size the mote can reach as it grows\n * @property {UintClamped8Array} photons current photon values (R, G, B)\n * @property {UintClamped8Array} color current mote color (R, G, B)\n * @property {Int8Array} intVals direct access to integer value array (for debug)\n * @property {Float32Array} ratios current photon ratios (R, G, B)\n * @property {Float32Array} prefs preferred photon ratios\n * @property {Float32Array} floatVals direct access to float value array (for debug)\n * @return {Mote}\n */\nexport default function Mote(_photons = new Uint8Array(3), pos = new Float32Array(2), pool = undefined, bSpeed = MOTE_BASE_SPEED, bSight = MOTE_BASE_SIGHT, bAgro = 1.0, bFear = 1.0) {\n\tlet buffer, offset = 0|0;\n\tif(pool) {\n\t\tbuffer = pool.buffer;\n\t\toffset = pool.allocate();\n\t}\n \telse {\n\t\tbuffer = new ArrayBuffer(BUFFER_LENGTH);\n\t\toffset = 0;\n\t}\n\n\t// \"private\" properties\n\t// use a single buffer for properties so that they're guaranteed to be contiguous\n\t// in memory and typed\n\tlet photons = new Uint8ClampedArray(buffer, U8_PHO+offset, 3);\n\tlet color = new Uint8ClampedArray(buffer, U8_COL+offset, 3);\n\tphotons[COLOR_R] = _photons[COLOR_R];\n\tphotons[COLOR_G] = _photons[COLOR_G];\n\tphotons[COLOR_B] = _photons[COLOR_B];\n\tlet intVals = new Int8Array(buffer, I8_BYTE_OFFSET+offset, I8_VAL_LENGTH - U8_PHO);\n\tlet floatVals = new Float32Array(buffer, F32_BYTE_OFFSET+offset, FLOAT_VAL_LENGTH);\n\tthis.pos = vec2(pos, buffer, F32_POS*F32+VEC_BYTE_OFFSET+offset);\n\tthis.vel = vec2(0.0, 0.0, buffer, F32_VEL*F32+VEC_BYTE_OFFSET+offset);\n\tlet ratios  = new Float32Array(buffer, F32_RAT*F32+VEC_BYTE_OFFSET+offset, 3);\n\tlet prefs   = new Float32Array(buffer, F32_PREF*F32+VEC_BYTE_OFFSET+offset, 3);\n\tthis.target = undefined;\n\tthis.color_string = \"\";\n\tbSpeed = bSpeed+adjRand(0.0005);\n\tbSight = bSight+adjRand(0.001); // vision distance\n\tbAgro = bAgro+adjRand(0.001);\n\tbFear = bFear+adjRand(0.001);\n\n\tObject.defineProperties(this, {\n\t\t\"photons\":{get: () => photons},\n\t\t\"color\":{get: () => color},\n\t\t\"dying\":{get: () => intVals[I8_DYING], set: (v) => intVals[I8_DYING] = v},\n\t\t\"action\":{get: () => intVals[I8_ACT], set: (v) => intVals[I8_ACT] = v},\n\t\t\"pregnant\":{get: () => intVals[I8_PREG], set: (v) => intVals[I8_PREG] = v},\n\t\t\"injured\":{get: () => intVals[I8_INJURED], set: (v) => intVals[I8_INJURED] = v},\n\t\t\"lastInjury\":{get: () => intVals[I8_LAST_INJURY], set: (v) => intVals[I8_LAST_INJURY] = v},\n\t\t\"needsUpdate\":{get: () => intVals[I8_UPD], set: (v) => intVals[I8_UPD] = v},\n\t\t\"pulse\":{get: () => intVals[I8_PULSE], set: (v) => intVals[I8_PULSE] = v},\n\t\t\"lastMeal\":{get: () => intVals[I8_MEAL], set: (v) => intVals[I8_MEAL] = v},\n\t\t\"size\":{get: () => floatVals[F32_SIZE], set: (v) => floatVals[F32_SIZE] = v},\n\t\t\"sizeMin\":{get: () => floatVals[F32_SIZE_MIN], set: (v) => floatVals[F32_SIZE_MIN] = v},\n\t\t\"sizeMax\":{get: () => floatVals[F32_SIZE_MAX], set: (v) => floatVals[F32_SIZE_MAX] = v},\n\t\t\"speed\":{get: () => floatVals[F32_SPEED], set: (v) => floatVals[F32_SPEED] = v},\n\t\t\"sight\":{get: () => floatVals[F32_SIGHT], set: (v) => floatVals[F32_SIGHT] = v},\n\t\t\"agro\":{get: () => floatVals[F32_AGRO], set: (v) => floatVals[F32_AGRO] = v},\n\t\t\"fear\":{get: () => floatVals[F32_FEAR], set: (v) => floatVals[F32_FEAR] = v},\n\t\t\"potential\":{get: () => floatVals[F32_POTENTIAL], set: (v) => floatVals[F32_POTENTIAL] = v},\n\t\t\"resistance\":{get: () => floatVals[F32_RESISTANCE], set: (v) => floatVals[F32_RESISTANCE] = v},\n\t\t\"mass\":{get: () => floatVals[F32_MASS], set: (v) => floatVals[F32_MASS] = v},\n\t\t\"base_speed\":{get: () => bSpeed},\n\t\t\"base_sight\":{get: () => bSight},\n\t\t\"base_agro\":{get: () => bAgro},\n\t\t\"base_fear\":{get: () => bFear},\n\t\t\"pool\":{get: () => pool},\n\t\t\"offset\":{get: () => offset},\n\t\t\"ratios\":{get: () => ratios},\n\t\t\"prefs\":{get: () => prefs}\n\t});\n\n\t/*\n\t * Debug access only.\n\t */\n\tif(DEBUG) Object.defineProperties(this, {\n\t\t\"intVals\":{get: () => intVals},\n\t\t\"floatVals\":{get: () => floatVals},\n\t});\n\n\t// initialize values, important to do since buffer may be reused\n\tthis.dying = 0;\n\tthis.pregnant = 0;\n\tthis.injured = 0;\n\tthis.lastInjury = 0;\n\tthis.speed = bSpeed;\n\tthis.sight = bSight;\n\tthis.agro = bAgro;\n\tthis.fear = bFear;\n\tthis.potential = this.agro*2;\n\tthis.resistance = this.fear*2;\n\tthis.lastMeal = ~~(random()*3);\n\tthis.pulse = ~~(TARGET_FPS*random());\n\tthis.size = MOTE_BASE_SIZE;\n\tthis.sizeMin = MOTE_BASE_SIZE*0.5;\n\tthis.sizeMax = MOTE_BASE_SIZE*3;\n\n\tthis.updateProperties();\n\tthis.prefs[COLOR_R] = this.ratios[COLOR_R];\n\tthis.prefs[COLOR_G] = this.ratios[COLOR_G];\n\tthis.prefs[COLOR_B] = this.ratios[COLOR_B];\n\treturn this;\n}\n\n/**\n * Updates derived properties for mote.\n */\nMote.prototype.updateProperties = (function() {\n\tlet  r = 0|0, g = 0|0, b = 0|0, photons, color, ratios;\n\treturn function updateProperties() {\n\t\t({photons, ratios, color} = this);\n\t\tr = photons[COLOR_R];\n\t\tg = photons[COLOR_G];\n\t\tb = photons[COLOR_B];\n\t\tthis.mass = r + g + b;\n\t\tif(this.mass > 0) { // otherwise skip this stuff since the mote is dead anyway\n\t\tthis.size = clamp(this.mass/(PREGNANT_THRESHOLD/3)*MOTE_BASE_SIZE, this.sizeMin, this.sizeMax);\n\t\t\tratios[COLOR_R] = ratio(r, g+b);\n\t\t\tratios[COLOR_G] = ratio(g, r+b);\n\t\t\tratios[COLOR_B] = ratio(b, g+r);\n\t\t\tthis.speed = this.base_speed*(1-this.size)*(1+ratios[COLOR_B]);\n\t\t\tthis.sight = this.base_sight+(this.size*0.5); // see from edge onward\n\t\t\tthis.agro = this.base_agro*(1+ratios[COLOR_R]);\n\t\t\tthis.fear = this.base_fear*(1+ratios[COLOR_G]);\n\t\t\tif(DEBUG) {\n\t\t\t\tif(isNaN(this.speed)) throw new Error(\"Mote.updateProperties: NaN speed\");\n\t\t\t\tif(isNaN(this.sight)) throw new Error(\"Mote.updateProperties: NaN sight\");\n\t\t\t\tif(isNaN(this.size)) throw new Error(\"Mote.updateProperties: NaN size\");\n\t\t\t\tif(isNaN(this.agro)) throw new Error(\"Mote.updateProperties: NaN agro\");\n\t\t\t\tif(isNaN(this.fear)) throw new Error(\"Mote.updateProperties: NaN fear\");\n\t\t\t}\n\t\t} // end of stuff to do only if sum > 0\n\n\t\tif((this.mass > PREGNANT_THRESHOLD) && this.pregnant === 0) this.pregnant = PREGNANT_TIME;\n\t\tif((this.mass < DEATH_THRESHOLD) && this.dying === 0) this.dying = 1;\n\n\t\tcolor[COLOR_R] = ~~(r/this.mass*255);\n\t\tcolor[COLOR_G] = ~~(g/this.mass*255);\n\t\tcolor[COLOR_B] = ~~(b/this.mass*255);\n\t\tthis.needsUpdate = 0;\n\t}\n})();\n\n/**\n * Maintenance tasks to be done each tick\n */\nMote.prototype.runMaintenance = (function() {\n\tlet pregnant = 0|0, dying = 0|0, tmpPot = 0.0, tmpRes = 0.0,\n\t\t\tagro = 0.0, fear = 0.0, size = 0.0, speed = 0.0, sight = 0.0,\n\t\t\tpos, vel, target;\n\treturn function runMaintenance(delta) {\n\t\t({pos, vel, pregnant, dying, agro, fear, size, speed, sight, target} = this);\n\t\tif(pregnant > 0) this.pregnant = pregnant - 1;\n\t\tif(dying > 0) this.dying = dying + 1; // start counting up\n\t\tif(this.needsUpdate) this.updateProperties();\n\t\t// build potential and resistance each tick\n\t\ttmpPot = agro * (size*100);\n\t\ttmpRes = fear * (size*100);\n\t\tthis.potential = clamp(this.potential + agro*delta, -tmpPot, tmpPot);\n\t\tthis.resistance = clamp(this.resistance + fear*delta, -tmpRes, tmpRes);\n\n\t\t// last turn's move, has to happen first to avoid prediction inaccuracy\n\t\t// during chases\n\t\tmut_plus(pos, times(vel, delta, scratch1));\n\n\t\t// don't go off the screen\n\t\tmut_plus(vel, avoid(vel, pos, POS_C, 1.3, speed, scratch1)); \n\t\t// apply drag\n\t\tmut_plus(vel, drag(vel, GLOBAL_DRAG));\n\t}\n})();\n\n/**\n * Checks if a target is valid.\n * @param {Object} entity any game object that can be targeted\n * @return {float} distance if valid, otherwise -1\n */\nMote.prototype.validateTarget = (function() {\n\tlet dist = 0.0, sight = 0.0, pos;\n\treturn function(entity) {\n\t\t({pos, sight} = this);\n\t\tdist = distance(pos, entity.pos);\n\t\t// these targets are invalid\n\t\tif(entity === this) return -1;\n\t\tif(entity.dying) return -1;\n\t\tif(entity.lifetime && entity.lifetime < 3) return -1;\n\t\tif(entity.mass < 1) return -1;\n\t\tif(dist > (sight+entity.size*0.5)) return -1;\n\t\tif(outOfBounds(entity, 0.7)) return -1;\n\t\treturn dist;\n\t}\n})();\n\n/**\n * Search for a target and decide how to act toward it.\n */\nMote.prototype.search = (function() {\n\tlet i = 0|0, len = 0|0, sight = 0.0, cur = 0.0, pos, vel, highest, dist, entity,\n\t\t\tdeltar = 0.0, deltag = 0.0, deltab = 0.0, mind = 0.0, maxd = 0.0, weight = 0.0;\n\treturn function search(entities) {\n\t\t({pos, vel, sight} = this);\n\t\thighest = -Infinity;\n\t\tdist = 0;\n\t\tif(this.pregnant || this.dying) {\n\t\t\tthis.action = ACT_IDLE;\n\t\t\thighest = Infinity;\n\t\t}\n\n\t\tfor(i = 0, len = entities.length; (i < len) && (highest < Infinity); ++i) {\n\t\t\tentity = entities[i];\n\t\t\tlet dist = this.validateTarget(entity);\n\t\t\tif(dist === -1) continue;\n\t\t\t// ignore things outside sight range\n\t\t\tif(entity instanceof Mote) {\n\t\t\t\tcur = 3*(1/dist);\n\t\t\t\tif(cur > highest) {\n\t\t\t\t\tthis.target = entity;\n\t\t\t\t\tif(entity.target === this || dist < (this.size+entity.size)*0.5) {\n\t\t\t\t\t\tthis.action = ACT_AVOID;\n\t\t\t\t\t}\n\t\t\t\t\telse this.action = ACT_CHASE;\n\t\t\t\t\thighest = cur;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(entity instanceof Void) {\n\t\t\t\tthis.target = entity;\n\t\t\t\tthis.action = ACT_AVOID;\n\t\t\t\thighest = Infinity;\n\t\t\t}\n\t\t\telse if(entity instanceof Photon && entity.lifetime > 3) {\n\t\t\t\tdeltar = (this.prefs[COLOR_R] - this.ratios[COLOR_R]);\t\n\t\t\t\tdeltag = (this.prefs[COLOR_G] - this.ratios[COLOR_G]);\t\n\t\t\t\tdeltab = (this.prefs[COLOR_B] - this.ratios[COLOR_B]);\t\n\t\t\t\tmaxd = max(deltar, deltag, deltab);\n\t\t\t\tmind = min(deltar, deltag, deltab);\n\t\t\t\tif((maxd == deltar && entity.color == COLOR_R) ||\n\t\t\t\t\t\t(maxd == deltag && entity.color == COLOR_G) ||\n\t\t\t\t\t\t(maxd == deltab && entity.color == COLOR_B)) weight = 30;\n\t\t\t\tif((mind == deltar && entity.color == COLOR_R) ||\n\t\t\t\t\t\t(mind == deltag && entity.color == COLOR_G) ||\n\t\t\t\t\t\t(mind == deltab && entity.color == COLOR_B)) weight = 10;\n\t\t\t\telse weight = 20;\n\t\t\t\tcur = weight*(1/dist);\n\t\t\t\tif(cur > highest) {\n\t\t\t\t\tthis.target = entity;\n\t\t\t\t\tthis.action = ACT_CHASE;\n\t\t\t\t\thighest = cur;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(highest < 0) return false;\n\t\treturn true;\n\t}\n})();\n\n/**\n * Decide how to act each tick based on nearby objects.\n * @param Array surrounding array of nearby objects to consider in movement\n * @param Float delta time delta\n */\nMote.prototype.tick = (function() {\n\tlet pos, vel, size, sight, speed, agro, fear, resistance, potential, target, dist;\n\treturn function tick(entities, delta, frameCount) {\n\t\t({pos, vel, size, sight, speed, agro, fear, resistance, potential, target} = this);\n\t\tthis.runMaintenance(delta);\n\n\t\t// validate current target \n\t\tif(target && (dist = this.validateTarget(target)) === -1) {\n\t\t\tthis.action = ACT_IDLE;\n\t\t}\n\n\t\tswitch(this.action) {\n\t\t\tcase ACT_IDLE: // lost target, gave up, or completed task\n\t\t\t\tthis.target = undefined;\n\t\t\t\tif(magnitude(vel) < 0.001) { // not going anywhere, so pick a random direction\n\t\t\t\t\tscratch1[0] = random()*2-1;\n\t\t\t\t\tscratch1[1] = random()*2-1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmut_copy(scratch1, pos);\n\t\t\t\t\tmut_plus(scratch1, times(vel, delta, scratch2));\n\t\t\t\t\tmut_plus(scratch1, rotate(scratch1, pos, sin((frameCount+this.pulse)*speed), scratch2));\n\t\t\t\t}\n\t\t\t\tmut_plus(vel, accelerate(pos, scratch1, speed, scratch2));\n\t\t\t\tthis.action = ACT_SEARCH;\n\t\t\tbreak;\n\t\t\tcase ACT_CHASE: // chasing a target\n\t\t\t\t// predict target's next move\n\t\t\t\tplus(target.pos, times(target.vel, delta, scratch1), scratch2);\n\t\t\t\tmut_plus(vel, accelerate(pos, scratch2, speed, scratch1));\n\t\t\t\tif(dist < sight) {\n\t\t\t\t\tif(target instanceof Mote && this.potential > this.agro*3) \n\t\t\t\t\t\tthis.action = ACT_ATTACK;\n\t\t\t\t\telse this.action = ACT_ATTACK;\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase ACT_AVOID: // avoiding a target\n\t\t\t\t// predict target's next move\n\t\t\t\tplus(target.pos, times(target.vel, delta, scratch1), scratch2);\n\t\t\t\tmut_plus(vel, accelerate(scratch2, pos, speed, scratch1));\n\t\t\t\tif(this.resistance > fear*3) this.action = ACT_IDLE;\n\t\t\tbreak;\n\t\t\tcase ACT_ATTACK: // attacking a target\n\t\t\t\tif(target instanceof Mote) this.discharge(target);\n\t\t\t\telse if(target instanceof Photon) this.eatPhoton(target);\n\t\t\tbreak;\n\t\t\tcase ACT_LINK: // linking with a target\n\t\t\tbreak;\n\t\t\tcase ACT_SEARCH:\n\t\t\t\tif(!this.search(entities)) this.action = ACT_IDLE;\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n})();\n\n\nlet delta = 0.0;\nMote.prototype.discharge = function(target) {\n\tdelta = this.potential - target.resistance;\n\ttarget.resistance -= max(this.agro, delta*this.agro);\n\tthis.potential -= max(this.fear, delta*this.fear);\n\ttarget.injure(this, max(0, ~~(delta)));\n\tif(this.potential < 0) this.action = ACT_IDLE;\n}\n\nMote.prototype.injure = function(by, strength) {\n\tthis.injured += strength;\n\tthis.lastInjury = this.injured;\n\tif(this.resistance < (this.agro*3) ||\n\t\tthis.injured < this.fear\n\t) this.target = by;\n}\n\nMote.prototype.bleed = (function() {\n\tlet choice = 0|0, choiceVal = 0|0, pvel = vec2(), photons;\n\treturn function bleed(photonPool) {\n\t\tphotons = this.photons;\n\t\tdo {\n\t\t\tchoice = ~~(random()*3);\n\t\t\tswitch(choice) {\n\t\t\t\tcase COLOR_R: choiceVal = photons[COLOR_R]; break;\n\t\t\t\tcase COLOR_G: choiceVal = photons[COLOR_G]; break;\n\t\t\t\tcase COLOR_B: choiceVal = photons[COLOR_B]; break;\n\t\t\t}\n\t\t} while (choiceVal === 0);\n\t\tswitch(choice) {\n\t\t\tcase COLOR_R: photons[COLOR_R] = photons[COLOR_R] - 1; break;\n\t\t\tcase COLOR_G: photons[COLOR_G] = photons[COLOR_G] - 1; break;\n\t\t\tcase COLOR_B: photons[COLOR_B] = photons[COLOR_B] - 1; break;\n\t\t}\n\t\tthis.injured--;\n\t\tmut_times(this.vel, 1+this.speed);\n\t\tmut_copy(pvel, this.vel);\n\t\tmut_times(pvel, -1);\n\t\tthis.needsUpdate = 1;\n\t\treturn new Photon(this.pos, pvel, choice, photonPool);\n\t\t//return choice;\n\t}\n})();\n\nMote.prototype.split = (function() {\n\tlet baby, photons;\n\treturn function() {\n\t\tphotons = this.photons;\n\t\tbaby = new Mote(\n\t\t\t[floor(photons[COLOR_R]/2), floor(photons[COLOR_G]/2), floor(photons[COLOR_B]/2)],\n\t\t\tthis.pos, this.pool, this.base_speed, this.base_sight, this.base_agro, \n\t\t\tthis.base_fear);\n\t\tphotons[COLOR_R] = ceil(photons[COLOR_R]/2);\n\t\tphotons[COLOR_G] = ceil(photons[COLOR_G]/2);\n\t\tphotons[COLOR_B] = ceil(photons[COLOR_B]/2);\n\t\tthis.pregnant = PREGNANT_TIME-1;\n\t\tbaby.pregnant = PREGNANT_TIME-1;\n\t\tthis.target = baby;\n\t\tbaby.target = this;\n\t\tbaby.needsUpdate = 1;\n\t\tthis.needsUpdate = 1;\n\t\treturn baby;\n\t}\n})();\n\nMote.prototype.eatPhoton = (function() {\n\tlet photons;\n\treturn function eatPhotons(photon) {\n\t\tif(photon.lifetime > 2 && distance(this.pos, photon.pos) < this.sight) {\n\t\t\tphotons = this.photons;\n\t\t\tphoton.lifetime = 2;\n\t\t\tswitch(photon.color) {\n\t\t\t\tcase COLOR_R: photons[COLOR_R]+=1; break;\n\t\t\t\tcase COLOR_G: photons[COLOR_G]+=1; break;\n\t\t\t\tcase COLOR_B: photons[COLOR_B]+=1; break;\n\t\t\t}\n\t\t\tthis.lastMeal = photon.color;\n\t\t\tthis.potential -= this.agro*0.5;\n\t\t\tthis.resistance -= this.fear*0.5;\n\t\t\tthis.needsUpdate = 1;\n\t\t}\n\t\tthis.action = ACT_IDLE;\n\t}\n})();\n\nconst rpos = new Float32Array(2);\nconst rphotons = new Uint8ClampedArray(3);\n/**\n * Generates mote with randomized position and photon values.\n * @param {BufferPool} pool storage pool\n * @return {Mote}\n */\nMote.random = function(pool) {\n\tdo {\n\t\trpos[0] = random()*posneg();\n\t\trpos[1] = random()*posneg();\n\t}\n\twhile(magnitude(rpos) > 0.8); \n\trphotons[0] = ~~(random()*64);\n\trphotons[1] = ~~(random()*64);\n\trphotons[2] = ~~(random()*64);\n\treturn new Mote(rphotons, rpos, pool);\n}\n\nMote.prototype.destroy = function() {\n\tthis.pool.free(this.offset);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Mote.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {gravitate, drag, outOfBounds, limitVecMut, avoid} from  \"../photonomix.util\";\nimport {Mote, Photon, Emitter, AntiGravitonCluster} from \"./\";\nconst {vec2, times, mut_times, distance} = vectrix.vectors;\nconst {mut_plus} = vectrix.matrices;\nimport {VOID_SIZE, GLOBAL_DRAG} from \"../photonomix.constants\";\nconst {random, sqrt, PI, ceil, min} = Math;\nconst POS_C = vec2(0,0);\n\nexport default function Void(ipos = vec2(), ivel = vec2(), mass = 1) {\n\tthis.pos = vec2(ipos);\n\tthis.vel = vec2(ivel);\n\tthis.size = 0;\n\tthis.birthMass = mass;\n\tthis.mass = 1;\n\tthis.lastMeal = -1;\n\tthis.eatTime = 0;\n\treturn this;\n}\n\nlet scratchVec1 = vec2(), entity, i = 0|0, len = 0|0, a_dist = 0.0, consume = 0|0;\nVoid.prototype.tick = function(entities, delta) {\n\tif(this.birthMass > 0) {\n\t\tconsume = min(this.birthMass, ceil(this.mass/100));\n\t\tthis.birthMass -= consume;\n\t\tthis.mass += consume;\n\t}\n\tif(this.eatTime > 30) this.eatTime--;\n\telse this.lastMeal = -1;\n\tif(outOfBounds(this.pos, 1.3)) {\n\t\tthis.mass = this.mass - 1;\n\t}\n\tthis.size = sqrt(this.mass/PI) * VOID_SIZE;\n\t// last turn's move, has to happen first\n\tmut_plus(this.pos, times(this.vel, delta, scratchVec1));\n\n\t// apply basic forces\n\t// don't go off the screen\n\tmut_plus(this.vel, avoid(this.vel, this.pos, POS_C, 1.3, 0.01, scratchVec1));\n\t// apply drag\n\tmut_plus(this.vel, drag(this.vel, GLOBAL_DRAG));\n\tlimitVecMut(this.vel, 0, 1);\n\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\ta_dist = distance(this.pos, entity.pos);\n\n\t\tif(entity instanceof Photon && a_dist < this.size) {\n\t\t\tentity.lifetime = entity.lifetime - 1;\n\t\t\tif(entity.lifetime === 0 || a_dist < this.size*0.6) {\n\t\t\t\tthis.mass = this.mass + 1;\n\t\t\t\tthis.lastMeal = entity.color;\n\t\t\t\tthis.eatTime = 15;\n\t\t\t\tentity.lifetime = 0;\n\t\t\t}\n\t\t}\n\t\tif(entity instanceof Mote && a_dist < this.size*0.6) {\n\t\t\t// probablistic injury, so they don't get shredded instantly\n\t\t\tif((random()*30*a_dist) < 1) entity.injured = entity.injured + 1;\n\t\t}\n\t\tif(entity instanceof Void) {\n\t\t\tif(a_dist < (entity.size+this.size)*0.44) { // bigger ones eat smaller ones\n\t\t\t\tif(this.mass > entity.mass) {\n\t\t\t\t\tconsume = min(entity.mass, ceil(this.birthMass + this.mass / 100));\n\t\t\t\t\tthis.birthMass += consume;\n\t\t\t\t\tentity.mass -= consume;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!entity.mass) continue; // zero mass means gravity bugs\n\t\t// apply gravity\n\t\tif(entity instanceof Emitter) { // emitters have negative & repelling mass\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, (this.mass/entity.mass), scratchVec1),\n\t\t\t\t(1/entity.mass))\n\t\t\t);\n\t\t}\n\t\telse if(!(entity instanceof AntiGravitonCluster)) {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, entity.mass*this.mass, scratchVec1), \n\t\t\t\t(1/entity.mass))\n\t\t\t);\n\t\t}\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Void.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {Events} from \"./photonomix.events.js\";\nconst {vec2} = vectrix.vectors;\n\nlet game; // game state\nlet controlEvents = new Events();\n//let clickRegions = [];\n\nexport const pointer = {\n\tdown:vec2(),\n\tup:vec2(),\n\tmove:vec2(),\n}\nexport const keys = Array(256);\nexport const buttons = Array(5);\n\nfunction updateCursorState(event, v) {\n\tv[0] = event.clientX;\n\tv[1] = event.clientY;\n}\n\n/*\nfunction registerClickRegion(center, radius, callback) {\n\tclickRegions.push({center:vec2(center), radius:radius, callback:callback});\n}\n*/\n\nexport function init(env) {\n\tgame = env;\n\twindow.addEventListener(\"mousedown\", function mouseDown(event) {\n\t\tupdateCursorState(event, pointer.down);\n\t\tbuttons[event.button] = 1;\n\t\tcontrolEvents.fire(\"mousedown\");\n\t});\n\twindow.addEventListener(\"mouseup\", function mouseUp(event) {\n\t\tupdateCursorState(event, pointer.up);\n\t\tbuttons[event.button] = 0;\n\t\tcontrolEvents.fire(\"mouseup\");\n\t});\n\twindow.addEventListener(\"mousemove\", function mouseMove(event) {\n\t\tupdateCursorState(event, pointer.move);\n\t});\n\twindow.addEventListener(\"keydown\", function keyDown(event) {\n\t\tkeys[event.keyCode] = 1;\n\t});\n\twindow.addEventListener(\"keyup\", function keyDown(event) {\n\t\tkeys[event.keyCode] = 0;\n\t});\n\n\t/*\n\tcontrolEvents.on(\"mouseup\", function(position) {\n\t\tdist = distance(position, game.player.mouseDown);\n\t\tif(dist < region.radius) region.callback(region.center, dist);\n\t});\n\n\tcontrolEvents.on(\"mousedown\", function() {\n\t});\n\n\tcontrolEvents.on(\"mousemove\", function() {\n\t});\n\t*/\n\n\t//registerClickRegion([0.0, 0.95], 0.1, game.actions.launchAntiGravitonCluster);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.controls.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nimport {display} from \"@nphyx/pxene\";\nimport * as draw from \"./draw\";\nimport * as game from \"./game\";\nimport * as constants from \"./photonomix.constants\";\nimport * as util from \"./photonomix.util\";\nimport * as controls from \"./photonomix.controls\";\n\nconst displayConfig = {\n\tcontainer:\"body\",\n\tbufferDescriptions:[\n\t\t{label:\"bokehBack\", compositeMethod:\"source-over\", scaleMethod:display.buffers.SCALE_KEEP_ASPECT},\n\t\t{label:\"bokehFront\", compositeMethod:\"lighter\", scaleMethod:display.buffers.SCALE_NONE},\n\t\t{label:\"entitiesLight\", compositeMethod:\"lighter\", scaleMethod:display.buffers.SCALE_NONE},\n\t\t{label:\"entitiesDark\", compositeMethod:\"hard-light\", scaleMethod:display.buffers.SCALE_NONE},\n\t\t{label:\"ui\", compositeMethod:\"source-over\", scaleMethod:display.buffers.SCALE_NONE}\n\n\t],\n\tpixelRatio:1,\n\tframeCallback:main\n}\n\nvar photonomix = {\n\tutil:util,\n\tconstants:constants,\n\tdisplay:display,\n\tgame:game,\n\tdraw:draw,\n\tstate:{}\n}\n\nwindow.photonomix = photonomix;\n\nwindow.addEventListener(\"load\", function() {\n\tphotonomix.state.game = new game.Game();\n\tdisplay.init(displayConfig);\n\tdraw.init(photonomix.state, display);\n\tcontrols.init(photonomix.state);\n\tphotonomix.state.controls = controls.state;\n\tstartGame();\n});\n\nfunction main() {\n\t//let tickSpeed = display.timing.interval/display.timing.elapsed;\n\tif(photonomix.state.game.started) photonomix.state.game.tick(display.timing);\n\tphotonomix.draw.tick();\n}\n\n/**\n * Starts up the game.\n */\nexport function startGame() {\n\tphotonomix.state.game.start();\n\t/*\n\tbody.removeEventListener(\"click\", startGame);\n\tbody.classList.remove(\"start\");\n\tif(AUTO_FULLSCREEN) toggleFullScreen();\n\t*/\n\tconsole.log(\"game started\");\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.js\n// module id = 15\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.controls.KeyState\n * contains the KeyState prototype.\n */\n\n/**\n * Data type for tracking the state of a single key.\n * @param {string} key key name, as defined in [KeyboardEvent.key]{@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values}\n * @return {KeyState}\n */\nexport default function KeyState(key) {\n\tthis.key = key;\n\tthis.down = false;\n\tthis.lastDown = 0;\n\tthis.lastUp = 0;\n\treturn Object.seal(this);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/controls/KeyState.js\n// module id = 18\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.controls.KeyMap\n * contains the KeyMap prototype.\n */\n\n/**\n * Data type for handling mappings of keys to control labels.\n * @example\n * ```javascript\n * let jump = pxene.controls.map(\"jump\", \"space\");\n * jump.down(); // true or false depending on whether the spacebar is down\n * pxene.controls.map(\"jump\", \"esc\");\n * jump.isDown(); // true if either space or esc are down \n * jump.lastDown(); // most recent time either space or esc were pressed down\n * jump.LastUp(); // most recent time either space or esc were released\n * jump.unmap(\"esc\"); // now jump only pays attention to spacebar\n *\n * // The controls module keeps track of your control mappings, so you don't\n * // have to worry about losing them. Once you've created the \"jump\" label\n * // above you can always look it up later:\n * let jump = pxene.controls.lookupMap(\"jump\");\n * ```\n * @param {String} label the label for the mapping\n * @return KeyMap object\n */\nexport default function KeyMap(label) {\n\tlabel = label.toLowerCase();\n\tthis.label = label;\n\tthis.keys = [];\n\tthis.checkedDown = 0;\n\tthis.checkedUp = 0;\n\treturn Object.seal(this);\n}\n\nKeyMap.prototype.lastDown = function lastDown() {\n\treturn this.keys.reduce((p, c) => p = (p > c.lastDown?p:c.lastDown), 0);\n}\n\nKeyMap.prototype.lastUp = function lastUp() {\n\treturn this.keys.reduce((p, c) => p = (p > c.lastDown?p:c.lastDown), 0);\n}\n\nKeyMap.prototype.isDown = function isDown() {\n\treturn this.keys.reduce((p, c) => p = p || c.down, false);\n}\n\nKeyMap.prototype.onceDown = function onceDown() {\n\tif(this.lastUp() >= this.checkedDown && this.isDown()) {\n\t\tthis.checkedDown = Date.now();\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nKeyMap.prototype.onceUp = function onceUp() {\n\tif(this.lastDown() >= this.checkedUp && !this.isDown()) {\n\t\tthis.checkedUp = Date.now();\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/controls/KeyMap.js\n// module id = 19\n// module chunks = 0","\"use strict\";\nimport * as assets from \"../pxene.assets\";\n/**\n * @module pxene.graphics.Sprite\n *\n * Contains the Sprite prototype, as well as the internally managed sprite cache.\n */\n/** a cache of already processed Sprites **/\nlet cache = [];\n\n/**\n * An image subdivided into individual cells suitable for character animations. The\n * Sprite object manages data related to the location of individual animations, and\n * drawing of individual cells to an external canvas.\n */\nexport default function Sprite(frameCount, frameWidth, frameHeight, animations) {\n\tthis.frameCount = frameCount;\n\tthis.frameWidth = frameWidth;\n\tthis.frameHeight = frameHeight;\n\tthis.animations = animations;\n\tthis.context = undefined;\n\tthis.flippedContext = undefined;\n\tthis.ready = false;\n\t// below calculated during generateComposite\n\tthis.width = 0; \n\tthis.height = 0;\n\tthis.rows = 0;\n\tthis.columns = 0;\n\treturn Object.seal(this);\n}\n\n/**\n * Initializes the sprite with an image, copying it to the sprite's internal\n * canvas.\n * @param {Image} image a loaded Image element\n * @param {bool} flipped whether to generate a horizontally flipped version (default: true)\n */\nSprite.prototype.init = function init(image, flipped = true) {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.width = image.width;\n\tcanvas.height = this.height = image.height;\n\tthis.columns = canvas.width / this.frameWidth;\n\tthis.rows = canvas.height / this.frameHeight;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.drawImage(image, 0, 0);\n\tthis.context = context;\n\tif(flipped) this.generateFlipped();\n\tthis.ready = true;\n}\n\n\n/**\n * Generates a horizontally flipped version of the sprite with all the cells\n * at the same indexes. Normally run during {@link init} but can be called\n * manually if init was instructed not to create the flipped version.\n */\nSprite.prototype.generateFlipped = function generateFlipped() {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.width;\n\tcanvas.height = this.height;\n\tlet context = canvas.getContext(\"2d\");\n\tlet row, col, sx, sy, dx, dy;\n\tlet rows = this.rows;\n\tlet cols = this.cols;\n\tlet w = this.frameWidth;\n\tlet h = this.frameHeight;\n\n\tcontext.scale(-1, 1);\n\tfor(row = 0, rows = this.rows; row < rows; ++row) {\n\t\tfor(col = 0, cols = this.columns; col < cols; ++col) {\n\t\t\tsx = col * w;\n\t\t\tdx = sx; //((cols - col) * w) - w;\n\t\t\tsy = dy = row * h;\n\t\t\tcontext.drawImage(this.context.canvas, sx, sy, w, h, -sx-w, dy, w, h);\n\t\t}\n\t}\n\tcontext.setTransform(1, 0, 0, 1, 0, 0);\n\tthis.flippedContext = context;\n}\n\n/**\n * Draws a sprite frame from a given animation set, or the default animation\n * if the specified animation is incorrect.\n * @param {CanvasRenderingContext2D} dest the destination context\n * @param {string} name the name of the animation to draw\n * @param {int} frame the frame number to draw\n * @param {vec2} pos the top left corner from which to start drawing\n * @param {bool} flip horizontal flip toggle (to reverse facing of sprite)\n */\nSprite.prototype.draw = function draw(dest, name, frame, pos, flipped = false) {\n\tlet animation = (\n\t\t\tthis.animations[name]?\n\t\t\tthis.animations[name]:\n\t\t\tthis.animations.default);\n\tlet frameNum = animation.startFrame + (frame % animation.length);\n\tlet {frameWidth, frameHeight} = this;\n\tlet canvas = flipped?this.flippedContext.canvas:this.context.canvas; \n\tdest.drawImage(\n\t\tcanvas,\n\t\tgetX(this, frameNum), getY(this, frameNum),\n\t\tframeWidth, frameHeight,\n\t\tpos[0], pos[1], \n\t\tframeWidth, frameHeight);\n}\n\n/**\n * Figures out the x offset for a frame based on the frame number and the sprite's parameters.\n */\nfunction getX(sprite, frameNum) {\n\treturn (frameNum % sprite.columns) * sprite.frameWidth;\n}\n\n/**\n * Figures out the x offset for a frame based on the frame number and the sprite's parameters.\n */\nfunction getY(sprite, frameNum) {\n\treturn Math.floor(frameNum / sprite.columns) * sprite.frameHeight;\n}\n\n/**\n * Create a new Sprite from an imported AsepriteAtlas. Returns a promise\n * which resolves with a sprite once it's ready to use.\n *\n * @param {string} uri a URI for an atlas JSON file\n * @return {Promise}\n */\nSprite.fromAsepriteAtlas = function fromAsepriteAtlas(uri) {\n\treturn new Promise((resolve) => {\n\t\tif(cache[uri] !== undefined && cache[uri] instanceof Sprite) {\n\t\t\tresolve(cache[uri]);\n\t\t}\n\t\telse {\n\t\t\tconsole.log(assets);\n\t\t\tassets.requestAsset(uri).then((asset) => {\n\t\t\t\tlet aspr = asset.content;\n\t\t\t\tlet animations = {\n\t\t\t\t\tdefault:{\n\t\t\t\t\tlabel:\"default\",\n\t\t\t\t\tstartFrame:0,\n\t\t\t\t\tlength:1\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(aspr.meta.frameTags) aspr.meta.frameTags.forEach((anim) => {\n\t\t\t\t\tanimations[anim.name.toLowerCase()] = {\n\t\t\t\t\t\tlabel:anim.name.toLowerCase(),\n\t\t\t\t\t\tstartFrame:anim.from,\n\t\t\t\t\t\tlength:(anim.to - anim.from) + 1\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tassets.requestAsset(aspr.meta.image).then((image) => {\n\t\t\t\t\tlet sprite = new Sprite(\n\t\t\t\t\t\taspr.frames.length,\n\t\t\t\t\t\taspr.frames[0].frame.w,\n\t\t\t\t\t\taspr.frames[0].frame.h,\n\t\t\t\t\t\tanimations\n\t\t\t\t\t);\n\t\t\t\t\tsprite.init(image.content);\n\t\t\t\t\tcache[uri] = sprite;\n\t\t\t\t\tresolve(sprite);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/Sprite.js\n// module id = 21\n// module chunks = 0","/**\n * @module pxene.assets.mimeTypes\n * Manages the collection of mime type handlers used by the {@link pxene.assets} module to process\n * fetched assets.\n */\nconst mimeHandlers = {\n\t\"default\":(response) => new Promise(resolve => response.blob().then(blob => resolve(blob)))\n};\n\n/**\n * Adds a specialized handler for a given mime type. Can be used as a plugin system or to handle\n * specialized asset types. See {@link mimeTimeHandler} for information about the callback.\n *\n * @Example\n * ```javascript\n * addMimeHandler(\"some-type/subtype\", fn(originalUrl, response, resolve) {\n*   res.text().then(text => resolve(text, originalUrl, type));\n * });\n * @param {string} mimeType\n * @param {mimeTypeHandler} cb callback\n */\nexport function addHandler(mimeType, cb) {\n\tif(mimeHandlers[mimeType] === undefined) mimeHandlers[mimeType] = cb;\n\telse throw new Error(\"tried to add a mimeType but there's already a handler for it\");\n}\n\n/**\n * Looks up a mime type handler, returning the default handler if none is found.\n */\nexport function getHandler(mimeType) {\n\tif(typeof mimeHandlers[mimeType] === \"function\") return mimeHandlers[mimeType];\n\telse return mimeHandlers.default;\n}\n\n/**\n * A mime type handler callback function. This is a sort of middleware that does some preprocessing\n * on certain asset types before passing them on to the storage system.\n * @callback mimeTypeHandler\n * @param {Response} the Response object returned from a fetch()\n * @return {Promise} which resolves() with the final form of the asset to be stored\n */\n\n/**\n * A mime handler for image types.\n */\nfunction mimeTypeHandlerImages(response) {\n\treturn new Promise((resolve) => {\n\t\tresponse.blob().then((blob) => {\n\t\t\tlet img = document.createElement(\"img\");\n\t\t\timg.addEventListener(\"load\", () => resolve(img));\n\t\t\timg.src = URL.createObjectURL(blob);\n\t\t});\n\t});\n}\n\n/**\n * A mime type handler for plain text.\n */\nfunction mimeTypeHandlerText(response) {\n\treturn new Promise((resolve) => response.text().then(text => resolve(text)));\n}\n\n/**\n * A mime type handler for json objects.\n */\nfunction mimeTypeHandlerJSON(response) {\n\treturn new Promise((resolve) => response.json().then(json => resolve(json)));\n}\n\naddHandler(\"image/jpeg\", mimeTypeHandlerImages);\naddHandler(\"image/gif\",  mimeTypeHandlerImages);\naddHandler(\"image/png\",  mimeTypeHandlerImages);\naddHandler(\"text/html\", mimeTypeHandlerText);\naddHandler(\"text/plain\", mimeTypeHandlerText);\naddHandler(\"application/json\", mimeTypeHandlerJSON);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.assets.mimeTypes.js\n// module id = 22\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.graphics.CompositeSprite\n *\n * Contains the CompositeSprite prototype.\n */\nexport default function CompositeSprite() {\n\treturn this;\n}\n\n/**\n * Generates a composite sprite from the image list the sprite was loaded with.\n */\nCompositeSprite.prototype.init = function init(sprites) {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.width = sprites[0].width;\n\tcanvas.height = this.height = sprites[0].height;\n\tthis.columns = canvas.width / this.frameWidth;\n\tthis.rows = canvas.height / this.frameHeight;\n\tlet context = canvas.getContext(\"2d\");\n\tfor(let i = 0, len = sprites.length; i < len; ++i) {\n\t\tcontext.drawImage(sprites[i], 0, 0);\n\t}\n\tthis.ready = true;\n\tthis.spriteCanvas = canvas;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/CompositeSprite.js\n// module id = 23\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.graphics.Atlas\n *\n * Contains the Atlas prototype.\n */\nimport * as assets from \"../pxene.assets\";\nimport {vectors} from \"@nphyx/vectrix\";\n\n/** a cache of already processed Atlases **/\nconst cache = [];\n/**\n * Much like a sprite, an atlas is a collection of smaller images on a single sheet.\n * An atlas may have non-uniform cell sizes, and is more suitable for static graphics.\n *\n * @todo Implement me\n */\nexport default function Atlas(layers, animations, slices) {\n\tthis.layers = layers;\n\tthis.animations = animations;\n\tthis.slices = slices;\n\tthis.source = undefined;\n\tthis.context = undefined;\n\tthis.flippedContext = undefined;\n\tthis.ready = false;\n\treturn Object.seal(this);\n}\n\n/**\n * Initializes the sprite with an image, copying it to the sprite's internal\n * canvas.\n * @param {Image} image a loaded Image element\n * @param {bool} flipped whether to generate a horizontally flipped version (default: true)\n */\nAtlas.prototype.init = function init(image, flipped = true) {\n\tthis.source = image;\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = image.width;\n\tcanvas.height = image.height;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.drawImage(image, 0, 0);\n\tthis.context = context;\n\tif(flipped) this.generateFlipped();\n\tthis.ready = true;\n}\n\n/**\n * Generates a horizontally flipped version of the sprite with all the cells\n * at the same indexes. Normally run during {@link init} but can be called\n * manually if init was instructed not to create the flipped version.\n */\nAtlas.prototype.generateFlipped = function generateFlipped() {\n\tlet canvas = document.createElement(\"canvas\");\n\tcanvas.width = this.context.canvas.width;\n\tcanvas.height = this.context.canvas.height;\n\tlet context = canvas.getContext(\"2d\");\n\tcontext.scale(-1, 1);\n\tlet i, len, layer;\n\t// let's not create functions within loops\n\tlet eachSlice = (key) => {\n\t\tlet slice = this.slices[key];\t\n\t\tlet source = vectors.vec2(slice.pos);\n\t\tvectors.mut_plus(source, layer.frames[i].pos);\n\t\tcontext.drawImage(\n\t\t\tthis.context.canvas,\n\t\t\tsource[0], source[1],\n\t\t\tslice.dims[0], slice.dims[1],\n\t\t\t-source[0]-slice.dims[0], source[1],\n\t\t\tslice.dims[0], slice.dims[1]\n\t\t);\n\n\t}\n\n\tlet eachLayer = (key) => {\n\t\tlayer = this.layers[key];\n\t\tfor(i = 0, len = layer.frames.length; i < len; ++i) {\n\t\t\tObject.keys(this.slices).filter(key => key !== \"default\").forEach(eachSlice);\n\t\t}\n\t}\n\n\tObject.keys(this.layers).forEach(eachLayer); \n\n\tcontext.setTransform(1, 0, 0, 1, 0, 0);\n\tthis.flippedContext = context;\n}\n\n/**\n * Draw a slice from the atlas to the given context.\n * @param {CanvasContext2d} dest the destination context\n * @param {string} name the name of the slice to draw\n * @param {vec2} pos the top left corner to start drawing at\n * @param {bool} flipped horizontal flip toggle (to reverse facing of image)\n * @param {Array} layers list of layers by name to draw\n */\nAtlas.prototype.draw = function(dest, label, pos, flipped = false, layers = undefined) {\n\tlet slice = (\n\t\t\tthis.slices[label]?\n\t\t\tthis.slices[label]:\n\t\t\tthis.slices.default);\n\tlet canvas = flipped?this.flippedContext.canvas:this.context.canvas;\n\n\t// draw all layers if a layer list isn't specified\n\tif(layers === undefined) layers = Object.keys(this.layers);\n\tlayers.forEach(layer => {\n\t\tlet source = vectors.vec2(slice.pos);\n\t\t//vectors.mut_plus(source, this.layers[layer].pos);\n\t\tvectors.mut_plus(source, this.layers[layer].frames[0].pos);\n\t\tdest.drawImage(\n\t\t\tcanvas,\n\t\t\tsource[0], source[1],\n\t\t\tslice.dims[0], slice.dims[1],\n\t\t\tpos[0], pos[1],\n\t\t\tslice.dims[0], slice.dims[1]\n\t\t);\n\t});\n}\n\n/**\n * Draws a sprite frame from a given animation set, or the default animation\n * if the specified animation is incorrect.\n * @param {CanvasRenderingContext2D} dest the destination context\n * @param {string} label the name of the animation to draw\n * @param {vec2} pos the top left corner from which to start drawing\n * @param {int} frame the frame number to draw\n * @param {bool} flip horizontal flip toggle (to reverse facing of sprite)\n * @param {Array} layers list of layers by name to draw\n */\nAtlas.prototype.animate = function animate(dest, label, pos, frame, flipped = false, layers = undefined) {\n\t// draw all layers if a layer list isn't specified\n\tif(layers === undefined) layers = Object.keys(this.layers);\n\n\tlet animation = (\n\t\t\tthis.animations[label]?\n\t\t\tthis.animations[label]:\n\t\t\tthis.animations.default);\n\n\tlet frameNum = animation.start + (frame % animation.length);\n\tlet canvas = flipped?this.flippedContext.canvas:this.context.canvas; \n\tlayers.forEach(layer => {\n\t\tlet frame = this.layers[layer].frames[frameNum];\n\t\tdest.drawImage(\n\t\t\tcanvas,\n\t\t\tframe.pos[0], frame.pos[1],\n\t\t\tframe.dims[0], frame.dims[1],\n\t\t\tpos[0], pos[1], \n\t\t\tframe.dims[0], frame.dims[1])\n\t});\n}\n\n/**\n * Creates a new Atlas by combining into a single layer the listed layers, \n * in the order supplied.\n * @param {Array} layers list of layers by label\n * @return {Atlas}\n *\n * @todo implement me\n */\nAtlas.prototype.prebake = function prebake() {\n\tthrow new Error(\"unimplemented\");\n}\n\n/**\n * Create a new Atlas from an imported AsepriteAtlas. Returns a promise\n * which resolves with an atlas once it's ready to use. Accepts a callback for\n * processing the data property on layers and slices, which defaults to treating\n * it as a string.\n *\n * @todo a gulp module that exports with the correct options to make this work\n *\n * @param {string} uri a URI for an atlas JSON file\n * @param {function} dataCallback custom function for transforming the \"data\" parameter\n * @return {Promise}\n */\nAtlas.fromAsepriteAtlas = function fromAsepriteAtlas(uri, dataCallback) {\n\tdataCallback = dataCallback || function(a) {return a};\n\t/**\n\t * uniq used below to filter unique tags, due to aseprite bug\n\t * which creates duplicate entries\n\t */\n\t//const uniq = (v, i, self) => self.indexOf(v) === i;\n\treturn new Promise((resolve) => {\n\t\tif(cache[uri] !== undefined && cache[uri] instanceof Atlas) {\n\t\t\tresolve(cache[uri]);\n\t\t}\n\t\telse {\n\t\t\tconsole.log(assets);\n\t\t\tassets.requestAsset(uri).then((asset) => {\n\t\t\t\tlet aspr = asset.content;\n\t\t\t\tlet width = aspr.meta.size.w;\n\t\t\t\tlet height = aspr.meta.size.h;\n\t\t\t\tlet numLayers = aspr.meta.layers.length;\n\t\t\t\tlet numFrames = aspr.frames.length / numLayers;\n\t\t\t\tlet layerHeight = height / numLayers;\n\n\t\t\t\t// Hash of layers by name to be added to the Atlas\n\t\t\t\tlet layers = {}, layer;\n\t\t\t\tlet layerNames = [];\n\n\t\t\t\taspr.meta.layers.forEach((l, i) => {\n\t\t\t\t\tlayerNames.push(l.name);\n\t\t\t\t\tif(layers[l.name] === undefined) {\n\t\t\t\t\t\tlayer = {\n\t\t\t\t\t\t\tlabel:l.name.trim(),\n\t\t\t\t\t\t\tdata:dataCallback(l.data?l.data:\"\"),\n\t\t\t\t\t\t\topacity:l.opacity,\n\t\t\t\t\t\t\tblendMode:l.blendMode,\n\t\t\t\t\t\t\tpos:vectors.vec2(0, i * layerHeight),\n\t\t\t\t\t\t\tframes:[]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlayers[layer.label] = Object.freeze(layer);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Hash of animations by name to be added to the Atlas\n\t\t\t\tlet slices = {\n\t\t\t\t\tdefault:{\n\t\t\t\t\t\tlabel:\"default\",\n\t\t\t\t\t\tdata:dataCallback(\"\"),\n\t\t\t\t\t\tpos:vectors.vec2(0, 0),\n\t\t\t\t\t\tdims:vectors.vec2(width, height)\n\t\t\t\t\t}\n\t\t\t\t}, slice;\n\n\t\t\t\taspr.meta.slices.forEach(s => {\n\t\t\t\t\t// as of v1.2.2, aseprite duplicates frame tags once per\n\t\t\t\t\t// layer but the data is always the same\n\t\t\t\t\tif(slices[s.name] === undefined) {\n\t\t\t\t\t\tslice = {\n\t\t\t\t\t\t\tlabel:s.name.trim(),\n\t\t\t\t\t\t\tdata:dataCallback(s.data?s.data:\"\"),\n\t\t\t\t\t\t\tpos:vectors.vec2(s.keys[0].bounds.x, s.keys[0].bounds.y),\n\t\t\t\t\t\t\tdims:vectors.vec2(s.keys[0].bounds.w, s.keys[0].bounds.h)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tslices[slice.label] = Object.freeze(slice);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Hash of animations by name to be added to the Atlas\n\t\t\t\tlet animations = {}, animation;\n\n\t\t\t\taspr.meta.frameTags.forEach(f => {\n\t\t\t\t\t// as of v1.2.2, aseprite duplicates frame tags once per\n\t\t\t\t\t// layer but the data is always the same\n\t\t\t\t\tif(animations[f.name] === undefined) {\n\t\t\t\t\t\t animation = {\n\t\t\t\t\t\t\tlabel:f.name.trim(),\n\t\t\t\t\t\t\tstart:f.from,\n\t\t\t\t\t\t\tlength:(f.to - f.from) + 1\n\t\t\t\t\t\t}\n\t\t\t\t\t\tanimations[animation.label] = Object.freeze(animation);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\taspr.frames.forEach((f, i) => {\n\t\t\t\t\tlet layer = layers[layerNames[~~(i / numFrames)]];\n\t\t\t\t\tlet frame = {\n\t\t\t\t\t\t//label:f.name.trim(),\n\t\t\t\t\t\tpos:vectors.vec2(f.frame.x, f.frame.y),\n\t\t\t\t\t\tdims:vectors.vec2(f.frame.w, f.frame.h)\n\t\t\t\t\t}\n\t\t\t\t\tlayer.frames.push(Object.freeze(frame));\n\t\t\t\t});\n\n\t\t\t\tassets.requestAsset(aspr.meta.image).then((image) => {\n\t\t\t\t\tlet atlas = new Atlas(\n\t\t\t\t\t\tObject.seal(layers),\n\t\t\t\t\t\tObject.seal(animations),\n\t\t\t\t\t\tObject.seal(slices)\n\t\t\t\t\t);\n\t\t\t\t\tatlas.init(image.content);\n\t\t\t\t\tcache[uri] = atlas;\n\t\t\t\t\tresolve(atlas);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/Atlas.js\n// module id = 24\n// module chunks = 0","/**\nMaster module for vectrix. See individual modules for documentation.\n@module vectrix\n */\n\"use strict\";\nimport * as _v from \"./vectrix.vectors\";\nimport * as _m from \"./vectrix.matrices\";\nimport * as _q from \"./vectrix.quaternions\";\n\nexport const vectors = _v;\nexport const matrices = _m;\nexport const quaternions = _q;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.js\n// module id = 25\n// module chunks = 0","\"use strict\";\n/**\nThe quaternions module focuses on quaternion operations that are useful for performing 3-dimensional rotations. Quaternions inherit from [[vectrix.vectors#vec4|4d-vectors]], which in turn inherit from [[vectrix.matrices|matrices]], so most of the operations supported by vec4 and generic matrices are supported by quats (TODO: remove the ones that don't make sense for quaternions)\n\nNote that in the examples quaternions outputs are displayed as they would be by quaternion.toString(), which rounds to the nearest 2 decimal points for brevity. Actual values will be accurate to at least 1.0e-7 (the minimum accuracy required by the unit tests).\n\nVectrix quaternions store their scalar component in the last place, so all quaternion functions that accept an array as a parameter expect it as [x,y,z,w] rather than [w,x,y,z]. This for consistency with the vectors module.\n\n```javascript\nconst quaternions = require(\"vectrix.quaternions\");\nlet q = quaternion.create([0.4, 1.0, 2.1, 1.0]); // quaternion(0.40, 1.00, 2.10, 1.0);\n```\nQuaternion values are aliased to x, y, z, and w, and can be accessed in any combination\nas with GLSL:\n```javascript\nq.xy; // [0.4, 1.0]\nq.zyx; // [2.1, 1.0, 0.4]\nq.zw; // [2.1, 1.0]\n// etc\n```\n@module vectrix/quaternions\n*/\n\nimport * as vectors from \"./vectrix.vectors\";\nimport * as matrices from \"./vectrix.matrices\";\nconst vecNrm = vectors.normalize;\nconst {abs, sin, cos, acos, sqrt} = Math;\n\n/**\n * @private\n */\nlet aliasCombos = [];\n\t\n[\"xyzw\", \"xyz\", \"xzw\", \"xyw\", \"yzw\", \"xy\", \"xw\", \"xz\", \"yz\", \"yw\", \"zw\"].forEach((props) => {\n\tpermutations(props.split(\"\")).forEach((combo) => {\n\t\taliasCombos.push(combo);\n\t});\n});\n\n/**\n * Util function to help generate permutations of property alias sets\n * @private\n */\nfunction permutations(list) {\n\t// Empty list has one permutation\n\tif (list.length === 0) return [[]];\n\tvar result = [];\n\tfor (var i=0; i<list.length; i++) {\n\t\tvar copy = list.slice();\n\t\tvar head = copy.splice(i, 1);\n\t\tvar rest = permutations(copy);\n\t\tfor (var j=0; j<rest.length; j++) {\n\t\t\tvar next = head.concat(rest[j]);\n\t\t\tresult.push(next);\n\t\t}\n\t}\n\treturn result;\n}\n/**\n * @private\n */\nfunction getAliasCombo(combo) {\n\treturn combo.map((p) => this[p]);\n}\n\n/**\n * Adds x,y,z,w aliases to a quaternion.\n * @private\n */\nfunction defineAliases(q) {\n\tObject.defineProperties(q, {\n\t\tx:{get:function() {return this[0]}},\n\t\ty:{get:function() {return this[1]}},\n\t\tz:{get:function() {return this[2]}},\n\t\tw:{get:function() {return this[3]}}\n\t});\n\tfor(let i = 0, len = aliasCombos.length; i < len; ++i) {\n\t\tObject.defineProperty(q, aliasCombos[i].join(\"\"), {\n\t\t\tget:getAliasCombo.bind(q, aliasCombos[i])\n\t\t});\n\t}\n}\n\n/**\n * Create a string representation of a quaternion.\n * @example\n * // functional style\n * quaternions.quatToString(quaternions.create()); // quaternion(0.00, 0.00, 0.00, 1.00)\n * // OO style\n * quaternions.create().toString(); // quaternion(0.00, 0.00, 0.00, 1.00)\n * @param {quaternion} a quaternion to stringify\n * @return {string}\n */\nexport function toString(a) {\n\tlet strings = matrices.toArray(a).map((cur) => cur.toFixed(2));\n\treturn \"quaternion(\"+strings.join(\", \")+\")\";\n}\n\n/**\n * Performs a spherical linear interpolation between a and b.\n * @example\n * let q1 = quaternions.create([0.3,-0.6,-0.4,0.2]);\n * let q2 = quaternions.create([0.6,0.8,0.5,0.7]);\n * slerp(q1, q2, 0.4); // quaternion(0.75, 0.01, -0.02, 0.72);\n * @param {quaternion|array(4)} a origin quaternion\n * @param {quaternion|array(4)} b destination quaternion\n * @param {float} t interval [0...1]\n * @return {quaternion}\n */ \nexport const slerp = (function() {\n\tlet ax = 0.0, bx = 0.0, ay = 0.0, by = 0.0,\n\t\t  az = 0.0, bz = 0.0, aw = 0.0, bw = 0.0,\n\t\t\tcosHalfTheta = 0.0, sinHalfTheta = 0.0,\n\t\t\thalfTheta = 0.0,\n\t\t\tratioA = 0.0, ratioB = 0.0;\n\treturn function slerp(a, b, t, out = undefined) {\n\t\tax = a[0];\n\t\tbx = b[0];\n\t\tay = a[1];\n\t\tby = b[1];\n\t\taz = a[2];\n\t\tbz = b[2];\n\t\taw = a[3];\n\t\tbw = b[3];\n\t\tcosHalfTheta = ax * bx + ay * by + az * bz + aw * bw;\n\t\tout = out||create();\n\t\tif (abs(cosHalfTheta) >= 1.0) {\n\t\t\tout[0] = ax;\n\t\t\tout[1] = ay;\n\t\t\tout[2] = az;\n\t\t\tout[3] = aw;\n\t\t\treturn out;\n\t\t}\n\t\thalfTheta = acos(cosHalfTheta);\n\t\tsinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\t\tratioA = sin((1 - t) * halfTheta) / sinHalfTheta;\n\t\tratioB = sin(t * halfTheta) / sinHalfTheta;\n\n\t\tout[0] = ax * ratioA + bx * ratioB;\n\t\tout[1] = ay * ratioA + by * ratioB;\n\t\tout[2] = az * ratioA + bz * ratioB;\n\t\tout[3] = aw * ratioA + bw * ratioB;\n\t\treturn out;\n\t}\n})();\n\n/**\n * Normalize a quaternion.\n * @example\n * // functional style\n * quaternions.normalize([4.0, 10.0, 3.0, 1.0]).toString(); // quaternion(0.36, 0.89, 0.27, 0.09);\n * // OO style\n * quaternions.create([4.0, 10.0, 3.0, 1.0]).normalize(); // quaternion(0.36, 0.89, 0.27, 0.09);\n * @param {quaternion|array(4)} a quaternion to normalize\n * @param {quaternion} out (optional) out parameter\n * @return {quaternion}\n */\nexport function normalize(a, out = undefined) {\n\t// this function only exists to override the out parameter, so pass down\n\t// to the vector version of normalize afterward\n\tout = out||create();\n\tlet out2 = vecNrm(a, out);\n\treturn out2;\n}\n\n/**\n * Finds the inverse of a quaternion by normalizing then inverting the quat. Normalization\n * can be skipped by setting normalize = false if the quat is known to be normal already.\n * Be careful, since floating point errors will often de-normalize your quats!\n * @example\n * // functional\n * quaternions.invert([4.0,7.0,5.0,1.0]); // quaternion(-0.36, -0.89, -0.27, 0.09)\n * // OO\n * quaternions.create([4.0,7.0,5.0,1.0]).invert(); // quaternion(-0.36, -0.89, -0.27, 0.09)\n * @param {quaternion|array(4)} a the input quaternion\n * @param {quaternion} (optional) out out parameter\n * @param {bool} norm (default true) whether to normalize the quaternion before inverting\n * @return {quaternion}\n */\nexport const invert = (function() {\n\treturn function invert(a, norm = true, out = undefined) {\n\t\tout = out||create();\n\t\tif(norm) normalize(a, out);\n\t\telse out.set(a);\n\t\tout[0] = -out[0];\n\t\tout[1] = -out[1];\n\t\tout[2] = -out[2];\n\t\treturn out;\n\t}\n})();\n\n/**\n * Factory for creating quaternions. Quaternions are represented as 4 member arrays\n * of (x,y,z,w) where x,y,z are the vector component and w is the scalar component.\n * @example\n * quaternions.create([0.4, 32.1, 9.0, 1.0]); // quaternion(0.40, 32.10, 9.00, 1.00)\n * @param {array(4)} vals [x,y,z,w] (default [0,0,0,1] = identity quaternion)\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n\n * @return {quaternion}\n */\nexport function create() {\n\tlet identity = [0,0,0,1];\n\tlet params = Array.prototype.slice.apply(arguments), len = params.length;\n\tif(len === 0) { // just create an identity quaternion \n\t\tparams = identity;\n\t}\n\telse {\n\t\tif(params[len-1] instanceof ArrayBuffer) { // supplied buffer, no offset\n\t\t\tif(len === 1) params = identity.concat(params).concat([0]);\n\t\t\telse params = params.concat([0]);\n\t\t}\n\t\telse if(params[len-2] instanceof ArrayBuffer) { // supplied buffer + offset\n\t\t\tif(len === 2) params = identity.concat(params);\n\t\t}\n\t}\n\tlet q = vectors.create.apply(null, [4].concat(params));\n\treturn q;\n}\n\n/**\n * Wraps a quaternion with aliases and quaternion functions as methods.\n * @param {quaternion} q quaternion to wrap\n * @return {quaternion} wrapped quaternion\n */\nexport function wrap(q) {\n\tdefineAliases(q);\n\tmatrices.wrap(q);\n\tq.slerp = asMethod(slerp, q);\n\tq.normalize = asMethod(normalize, q);\n\tq.invert = asMethod(invert, q);\n\tq.toString = toString.bind(null, q);\n\tq.times = asMethod(vectors.times, q);\n\tq.clamp = asMethod(vectors.clamp, q);\n\tq.normalize = asMethod(vectors.normalize, q);\n\tq.mut_normalize = asMethod(vectors.mut_normalize, q);\n\tq.mut_times = asMethod(vectors.mut_times, q);\n\tq.mut_clamp = asMethod(vectors.mut_clamp, q);\n\tq.mut_copy = asMethod(vectors.mut_copy, q);\n\treturn q;\n}\n\n/**\n * Turns a quaternion function into a method by wrapping its result.\n * @param {function} method\n * @param {quaternion} q \n * @private\n */\nfunction asMethod(method, q) {\n\treturn function() {\n\t\tlet res = method.apply(null, [q].concat(Array.prototype.slice.apply(arguments)));\n\t\treturn wrap(create(res));\n\t}\n}\n\n/**\n * Creates an identity quaternion [0,0,0,1].\n * @example \n * quaternions.create.identity(); // quaternion(0.00, 0.00, 0.00, 1.00)\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {quaternion}\n */\ncreate.identity = function() {\n\treturn create();\n}\n\n/**\n * Creates a quaternion from Euler angles (in radians).\n * @example\n * quaternions.create.fromEulerAngles([75*Math.PI/180, 65*Math.PI/180, 15*Math.PI/180]); // quaternion(0.412, 0.56, 0.36, 0.62)\n * @param {array(3)} a [yaw,pitch,roll] in radians \n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {quaternion}\n */\ncreate.fromEulerAngles = (function() {\n\tlet yawh = 0.0, pitchh = 0.0, rollh = 0.0, c1 = 0.0, s1 = 0.0,\n\t\tc2 = 0.0, s2 = 0.0, c3 = 0.0, s3 = 0.0, c1c2 = 0.0, s1s2 = 0.0;\n\treturn function(a, buffer = undefined, offset = undefined) {\n\t\tlet out = create(buffer, offset);\n\t\tyawh = a[0]/2;\n\t\tpitchh = a[1]/2;\n\t\trollh = a[2]/2;\n\t\tc1 = cos(yawh);\n\t\ts1 = sin(yawh);\n\t\tc2 = cos(pitchh);\n\t\ts2 = sin(pitchh);\n\t\tc3 = cos(rollh);\n\t\ts3 = sin(rollh);\n\t\tc1c2 = c1*c2;\n\t\ts1s2 = s1*s2;\n\t\tout[0] = c1c2*s3 + s1s2*c3;\n\t\tout[1] = s1*c2*c3 + c1*s2*s3;\n\t\tout[2] = c1*s2*c3 - s1*c2*s3;\n\t\tout[3] = c1c2*c3 - s1s2*s3;\n\t\treturn out;\n\t}\n})();\n\n/**\n * Creates a quaternion from an axis-angle rotation.\n * @example\n * quaternions.create.fromAxisAngle([1,0,0],90*Math.PI/180); // quaternion(0.70, 0.00, 0.00, 0.70)\n * @param {array(3)} axis of rotation\n * @param {float} angle of rotation as radian\n * @param {ArrayBuffer} buffer (optional) an array buffer to create the vector on \n * @param {offset} offset (optional) offset for the buffer, ignored if buffer is not supplied \n * @return {quaternion}\n */\ncreate.fromAxisAngle = (function() {\n\tlet a = 0.0, angleh = 0.0;\n\treturn function fromAxisAngle(axis, angle, buffer = undefined, offset = undefined) {\n\t\tlet out = create(buffer, offset);\n\t\ta = vecNrm(axis);\n\t\tangleh = angle/2;\n\t\tout[0] = a[0] * sin(angleh);\n\t\tout[1] = a[1] * sin(angleh);\n\t\tout[2] = a[2] * sin(angleh);\n\t\tout[3] = cos(angleh);\n\t\treturn out;\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-vectrix/src/vectrix.quaternions.js\n// module id = 26\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.graphics.BitmapFont\n *\n * Contains the BitmapFont prototype.\n */\n\n/**\n * A bitmap font is a fixed-size font contained in a single bitmap image, \n * similar to a Sprite or Atlas. The BitmapFont object manages loading the font\n * and writing text to a canvas using the font.\n * @todo implement me\n */\nexport default function BitmapFont() {\n\treturn this;\n}\n\n/**\n * Initializes the font with an image.\n * @param {Image} image a loaded Image element\n */\nBitmapFont.prototype.init = function(image) {\n}\n\n/**\n * Draws text to canvas.\n * @param {string} text text contents to write\n * @param {CanvasContext2d} target canvas context to write to\n * @param {int} sx start x-coordinate\n * @param {int} sy start y-coordinate\n * @param {int} wl wrap length in pixels\n * @param {int} lh space between lines in pixels (optional, default 1)\n * @param {int}\tls letter spacing in pixels (optional, default 1) \n */\nBitmapFont.prototype.write = function(text, target, sx, sy, lw, ls = 1) {\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/graphics/BitmapFont.js\n// module id = 27\n// module chunks = 0","\"use strict\";\nimport * as util from \"./pxene.display.util.js\";\nimport * as buffers from \"./pxene.display.buffers\";\nimport * as events from \"./pxene.events\";\nimport * as ui from \"./pxene.display.ui\";\nexport {buffers, ui, util};\nimport * as constants from \"./pxene.constants\";\n//import {evenNumber} from \"./pxene.util\";\nlet {min, max} = Math;\nlet AUTO_FULLSCREEN = false;\n\nlet startTime; // time game started\nlet interval = 0;\nlet elapsed = 0;\nlet frameCount = 0; // running total of drawn frames\nlet animating = false; // whether the game is currently running animation loop\nlet container; // display container \nlet fullscreen = false; // whether the game is in fullscreen mode\nlet lastFrame = 0;\nlet frameCallback;\nconst bufferList = [];\nexport const buffersByLabel = {};\nlet compositeBuffer;\n\n/**\n * Round to nearest even number.\n */\nexport function evenNumber(n) {\nreturn n >> 1 << 1;\n}\n\nexport const props = {\n\twidth:0,\n\theight:0,\n\tpixelRatio:1,\n\torientation:0,\n\taspect:0,\n\tminDimension:0,\n\tmaxDimension:0,\n\tevents:new events.Events()\n}\n\nexport const timing = {\n\tget frameCount() {return frameCount},\n\tget startTime() {return startTime},\n\tget lastFrame() {return lastFrame},\n\tget elapsed() {return elapsed},\n\tget interval() {return interval}\n}\n\n/**\n * Using this checks and avoids altering the canvas context state machine if unnecessary,\n * which theoretically saves a little time.\n */\nexport function updateCompositeOperation(ctx, op) {\n\tif(ctx.globalCompositeOperation !== op) ctx.globalCompositeOperation = op;\n}\n\n/**\n * Toggles fullscreen on.\n * Code from Mozilla Developer Network.\n */\nfunction toggleFullScreen() {\n\tif(fullscreen) return;\n\tfullscreen = true;\n  if(!document.fullscreenElement &&    // alternative standard method\n      !document.mozFullScreenElement && \n\t\t\t!document.webkitFullscreenElement && \n\t\t\t!document.msFullscreenElement) {  // current working methods\n    if(document.documentElement.requestFullscreen)\n\t\t\tdocument.documentElement.requestFullscreen();\n    else if (document.documentElement.msRequestFullscreen)\n      document.documentElement.msRequestFullscreen();\n    else if (document.documentElement.mozRequestFullScreen)\n      document.documentElement.mozRequestFullScreen();\n    else if (document.documentElement.webkitRequestFullscreen)\n      document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n\t\tprops.events.fire(\"fullscreen-on\");\n  } \n\telse {\n    if (document.exitFullscreen) document.exitFullscreen();\n    else if (document.msExitFullscreen) document.msExitFullscreen();\n    else if (document.mozCancelFullScreen) document.mozCancelFullScreen();\n    else if (document.webkitExitFullscreen) document.webkitExitFullscreen();\n\t\tprops.events.fire(\"fullscreen-off\");\n  }\n}\n\n/**\n * Turns fullscreen off.\n */\nfunction fullscreenOff(ev) {\n\tev.preventDefault();\n\tif(document.webkitIsFullScreen || \n\t   document.mozIsFullScreen || \n\t\t document.msIsFullScreen) fullscreen = true;\n\telse fullscreen = false;\n\treturn false;\n}\n\n/**\n * Updates screen ratio.\n */\nfunction updateProperties() {\n\tcompositeBuffer.width  = props.width  = evenNumber(container.clientWidth);\n\tcompositeBuffer.height = props.height = evenNumber(container.clientHeight);\n\tprops.orientation = props.width > props.height?0:1;\n\tprops.minDimension = min(props.width, props.height);\n\tprops.maxDimension = max(props.width, props.height);\n\t// @todo review this, it probably needs better handling\n\tbufferList.forEach(buffer => {\n\t\tbuffer.width = ~~(props.width/props.pixelRatio);\n\t\tbuffer.height = ~~(props.height/props.pixelRatio);\n\t});\n\tprops.events.fire(\"resize\");\n}\n\n\n/**\n * Main animation loop.\n */\nfunction animate() {\n\trequestAnimationFrame(animate);\n\ttry {\n\t\tlet now = Date.now();\n\t\t\telapsed = now - lastFrame;\n\t\t\tif(elapsed > interval) {\n\t\t\t\tlastFrame = now - (elapsed % interval);\n\t\t\t\tframeCount++;\n\t\t\t\tframeCallback(buffersByLabel);\n\t\t\t\tbuffers.composite(bufferList, compositeBuffer, props);\n\t\t\t}\n\t\t}\n\tcatch(e) {\n\t\tconsole.error(\"Crappy uncaught error in animation loop is crappy\");\n\t}\n}\n\nfunction initBuffers(bufferDescriptions) {\n\tfor(let i = 0, len = bufferDescriptions.length; i < len; ++i) {\n\t\tlet bufData = bufferDescriptions[i];\n\t\tlet buffer = new buffers.DrawBuffer(bufData.compositeMethod, bufData.scaleMethod);\n\t\tbuffer.id = bufData.label;\n\t\tbufferList.push(buffer);\n\t\tbuffersByLabel[bufData.label] = buffer;\n\t}\n}\n\n/**\n * Initializes game environment.\n */\nexport function init(config) {\n\tprops.pixelRatio = config.pixelRatio || props.pixelRatio;\n\tcontainer = document.querySelector(config.container);\n\tcontainer.classList.add(\"2d\");\n\tcompositeBuffer = new buffers.CompositeBuffer(container);\n\tcontainer.width = compositeBuffer.width  = evenNumber(container.clientWidth);\n\tcontainer.height = compositeBuffer.height = evenNumber(container.clientHeight);\n\tinitBuffers(config.bufferDescriptions);\n\tupdateProperties();\n\tframeCallback = config.frameCallback;\n\twindow.addEventListener(\"resize\", updateProperties);\n\tAUTO_FULLSCREEN = config.fullscreen;\n\tif(AUTO_FULLSCREEN) {\n\t\tcontainer.addEventListener(\"click\", toggleFullScreen);\n\t\tdocument.addEventListener(\"fullscreenchange\", fullscreenOff);\n\t\tdocument.addEventListener(\"mozfullscreenchange\", fullscreenOff);\n\t\tdocument.addEventListener(\"msfullscreenchange\", fullscreenOff);\n\t\tdocument.addEventListener(\"webkitfullscreenchange\", fullscreenOff);\n\t}\n\tstartTime = Date.now();\n\tlastFrame = startTime;\n\tinterval = 1000 / constants.TARGET_FPS;\n\tif(!animating) requestAnimationFrame(animate);\n\tanimating = true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.display.js\n// module id = 28\n// module chunks = 0","\"use strict\";\n\n\n/**\n * Draws a colored circle.\n */\nexport function drawCircle(ctx, x, y, size, fillStyle, lineWidth = 0, strokeStyle = undefined) {\n\tctx.globalCompositeOperation = \"source-over\";\n\tctx.beginPath();\n\tctx.arc(x, y, size, 2 * Math.PI, false);\n\tctx.fillStyle = fillStyle;\n\tctx.fill();\n\tif(strokeStyle) {\n\t\tctx.strokeStyle = strokeStyle;\n\t\tctx.lineWidth = lineWidth;\n\t\tctx.stroke();\n\t}\n\tctx.closePath();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.display.util.js\n// module id = 29\n// module chunks = 0","\"use strict\";\n/**\n * An offscreen draw buffer, which will be drawn to a composite buffer for display\n * onscreen.\n * @param {string} compositeMethod globalCompositeMethod to use when compositing\n * @param {bool} scaleMethod method for scaling (see SCALE_* constants)\n * @param {string} context [2d|webGL]\n * @return {DrawBuffer}\n */\nconst {min} = Math;\nexport const SCALE_STRETCH = 0;\nexport const SCALE_KEEP_ASPECT = 1;\nexport const SCALE_NONE = 2;\nexport const SCALE_CROP = 3;\nexport function DrawBuffer(compositeMethod = \"source-over\", scaleMethod = SCALE_STRETCH, context = \"2d\") {\n\tthis.canvas = document.createElement(\"canvas\");\n\tthis.context = this.canvas.getContext(context);\n\tthis.offsetX = 0;\n\tthis.offsetY = 0;\n\tthis.compositeMethod = compositeMethod;\n\tthis.scaleMethod = scaleMethod;\n\tObject.defineProperties(this, {\n\t\twidth:{get:() => this.canvas.width, set:(v) => this.canvas.width = v},\n\t\theight:{get:() => this.canvas.height, set:(v) => this.canvas.height = v},\n\t});\n\treturn this;\n}\n\n/**\n * A canvas to draw a BufferGroup into.\n * @param {HTMLElement} container the containing element for the canvas\n * @return {CompositeBuffer}\n */\nexport function CompositeBuffer(container) {\n\tthis.canvas = document.createElement(\"canvas\");\n\tthis.context = this.canvas.getContext(\"2d\");\n\tthis.container = container;\n\tthis.container.appendChild(this.canvas);\n\tObject.defineProperties(this, {\n\t\twidth:{get:() => this.canvas.width, set:(v) => this.canvas.width = v},\n\t\theight:{get:() => this.canvas.height, set:(v) => this.canvas.height = v},\n\t});\n\treturn this;\n}\n\nexport const composite = (function() {\n\tlet i, len, sourceBuffer, targetContext;\n\tlet sw, sh, sx, sy, dw, dh, dx, dy;\n\treturn function composite(sourceBuffers, targetBuffer, displayProps) {\n\t\ttargetContext = targetBuffer.context;\n\t\t// if using a pixel ratio, assume it's for pixel art and don't screw it up\n\t\tif(displayProps.pixelRatio !== 1) targetContext.imageSmoothingEnabled = false;\n\t\tfor(i = 0, len = sourceBuffers.length; i < len; ++i) {\n\t\t\tsourceBuffer = sourceBuffers[i];\n\t\t\tif(targetContext.globalCompositeOperation !== sourceBuffer.compositeMethod)\n\t\t\t\ttargetContext.globalCompositeOperation = sourceBuffer.compositeMethod;\n\t\t\tswitch(sourceBuffer.scaleMethod) {\n\t\t\t\tcase SCALE_STRETCH:\n\t\t\t\t\tsx = 0; sy = 0; sw = sourceBuffer.width; sh = sourceBuffer.height;\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = targetBuffer.width; dh = targetBuffer.height;\n\t\t\t\tbreak;\n\t\t\t\tcase SCALE_KEEP_ASPECT:\n\t\t\t\t\tsx = 0; sy = 0; sw = sourceBuffer.width; sh = sourceBuffer.height;\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = targetBuffer.width; dh = targetBuffer.height;\n\t\t\t\t\tif(displayProps.orientation) {\n\t\t\t\t\t\tsw = targetBuffer.width;\n\t\t\t\t\t\tsh = min(targetBuffer.height, sourceBuffer.height);\n\t\t\t\t\t\tdw = min(targetBuffer.width, sourceBuffer.width);\n\t\t\t\t\t\tdh = targetBuffer.height;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsw = min(targetBuffer.width, sourceBuffer.width);\n\t\t\t\t\t\tsh = targetBuffer.height;\n\t\t\t\t\t\tdw = targetBuffer.width;\n\t\t\t\t\t\tdh = min(targetBuffer.height, sourceBuffer.height);\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\tcase SCALE_CROP:\n\t\t\t\t\tsx = 0; sy = 0; \n\t\t\t\t\tsw = min(targetBuffer.width - sourceBuffer.offsetX, sourceBuffer.width);\n\t\t\t\t\tsh = min(targetBuffer.height - sourceBuffer.offsetY, sourceBuffer.height);\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = min(targetBuffer.width - sourceBuffer.offsetX, sourceBuffer.width);\n\t\t\t\t\tdh = min(targetBuffer.height - sourceBuffer.offsetY, sourceBuffer.height);\n\t\t\t\tbreak;\n\t\t\t\tdefault: // SCALE_NONE\n\t\t\t\t\tsx = 0; sy = 0; sw = sourceBuffer.width; sh = sourceBuffer.height;\n\t\t\t\t\tdx = sourceBuffer.offsetX; dy = sourceBuffer.offsetY; \n\t\t\t\t\tdw = sourceBuffer.width*displayProps.pixelRatio; dh = sourceBuffer.height*displayProps.pixelRatio;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttargetContext.drawImage(sourceBuffer.canvas, sx, sy, sw, sh, dx, dy, dw, dh); \n\t\t}\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.display.buffers.js\n// module id = 30\n// module chunks = 0","\"use strict\";\nimport {VALIDATE_VECTORS, GRAVITY} from \"./pxene.constants\";\nimport {vectors} from \"@nphyx/vectrix\";\nconst {minus,mut_clamp,mut_copy,mut_times,normalize,mut_normalize,magnitude,vec2} = vectors;\nconst {sqrt, abs, floor, ceil, round} = Math;\nconst MIN_F = 1e-11;\nconst MAX_F = 1e+11;\n\n/**\n * Round to nearest even number.\n */\nexport function evenNumber(n) {\nreturn n >> 1 << 1;\n}\n\nexport function tan_vec(v, out) {\n\tlet tmpx = 0;\n\tnormalize(v, out);\n\ttmpx = out[0];\n\tout[0] = -out[1];\n\tout[1] = tmpx;\n\treturn out;\n}\n\nexport function perpdot(a, b) {\n\treturn a[0]*b[1] - b[0]*a[1];\n}\n\nexport function floor_vec(v, out) {\n\tlet len = v.length;\n\tout = out || vectors.create(len);\n\tfor(let i = 0; i < len; ++i) {\n\t\tout[i] = floor(v[i]);\n\t}\n\treturn out;\n}\n\nexport function mut_floor_vec(v) {\n\treturn floor_vec(v, v);\n}\n\nexport function ceil_vec(v, out) {\n\tlet len = v.length;\n\tout = out || vectors.create(len);\n\tfor(let i = 0; i < len; ++i) {\n\t\tout[i] = ceil(v[i]);\n\t}\n\treturn out;\n}\n\nexport function mut_ceil_vec(v) {\n\treturn ceil_vec(v, v);\n}\n\nexport function round_vec(v, out) {\n\tlet len = v.length;\n\tout = out || vectors.create(len);\n\tfor(let i = 0; i < len; ++i) {\n\t\tout[i] = round(v[i]);\n\t}\n\treturn out;\n}\n\nexport function mut_round_vec(v) {\n\treturn round_vec(v, v);\n}\n\n/**\n * Clamp the absolute value of a number, keeping its sign.\n */\nfunction limit(v, min_v = 0, max_v = Infinity) {\n\tif(abs(v) < abs(min_v)) {\n\t\tif(v < 0) v = -min_v;\n\t\telse v = min_v;\n\t}\n\telse if(abs(v) > abs(max_v)) {\n\t\tif(v < 0) v = -max_v;\n\t\telse v = max_v;\n\t}\n\treturn v;\n}\n\n/**\n * Limits absolute values of vectors within a range.\n */\nexport const limitVecMut = (function() {\n\tlet i = 0|0, l = 0|0;\n\treturn function limitVecMut(v, min_v = 0, max_v = Infinity) {\t\n\t\tfor(i = 0, l = v.length; i < l; ++i) {\n\t\t\tv[i] = limit(v[i], min_v, max_v);\n\t\t}\n\t}\n})();\n\n/**\n * Validates a vector. For debugging purposes.\n */\nexport const validate = (function() {\n\tlet i, l;\n\treturn function validate(v) {\n\t\tfor(i = 0, l = v.length; i < l; i++) {\n\t\t\tif(isNaN(v[i])) throw new Error(\"NaN vector\");\n\t\t\tif(v[i] === Infinity) throw new Error(\"Infinite vector\");\n\t\t\tif(v[i] === -Infinity) throw new Error(\"-Infinite vector\");\n\t\t}\n\t}\n})();\n\n/**\n * Gravitate toward target.\n */\nexport const gravitate = (function() {\n\tlet g_v = vec2();\n\tlet mag = 0.0, x = 0.0, y = 0.0, scale = 0.0;\n\treturn function gravitate(p1, p2, strength, out) {\n\t\tout = out||g_v;\n\t\tminus(p1, p2, out);\n\t\tmag = magnitude(out);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || mag === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength*GRAVITY/(mag*mag));\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"gravitation error\", e);\n\t\t\t\tconsole.log(strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tlimitVecMut(out, 0.00001, 10); // put a cap on it to avoid infinite acceleration\n\t\t\t\tconsole.log(\"limit\", out);\n\t\t\t\tmag = magnitude(out);\n\t\t\t\tconsole.log(\"magnitude\", mag);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength/(mag*mag));\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n/**\n * Accelerate toward a target.\n */\nexport const accelerate = (function() {\n\tlet v = vec2();\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\treturn function accelerate(p1, p2, strength, out) {\n\t\tout = out||v;\t\n\t\tminus(p1, p2, out);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif(x === 0 && y === 0) return out;\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tstrength = mut_clamp(strength, -MAX_F, MAX_F);\n\t\t// inline normalize for speed, since this happens a lot\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t//mut_normalize(out);\n\t\tmut_times(out, -strength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"acceleration error\", e);\n\t\t\t\tconsole.log(\"strength\", strength);\n\t\t\t\tminus(p1, p2, out);\n\t\t\t\tconsole.log(\"minus\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalize\", out);\n\t\t\t\tmut_times(out, -strength);\n\t\t\t\tconsole.log(\"scale\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\nexport const drag = (function() {\n\tlet delta = vec2(), dragStrength = 0.0, dragSpeed = 0.0;\n\tlet scale = 0.0, x = 0.0, y = 0.0;\n\t/**\n\t * Apply drag.\n\t */\n\treturn function drag(vel, c, out) {\n\t\tout = out||delta;\n\t\tdragSpeed = magnitude(vel);\n\t\t// null small values\n\t\tdragSpeed = limit(dragSpeed, 0, 1e+11); // avoid infinite dragSpeeds\n\t\tdragStrength = mut_clamp(c * dragSpeed * dragSpeed, 1e-11, 1e+11);\n\t\tmut_copy(out, vel);\n\t\tx = out[0];\n\t\ty = out[1];\n\t\tif((x === 0 && y === 0) || dragStrength === 0) return out;\n\t\t// inline normalize for speed, since this happens a lot\n\t\tscale = mut_clamp(1/sqrt((x*x)+(y*y)), MIN_F, MAX_F);\n\t\tdragStrength = mut_clamp(dragStrength, MIN_F, MAX_F);\n\t\tout[0] = x*scale;\n\t\tout[1] = y*scale;\n\t\t// mut_normalize(out)\n\t\tmut_times(out, -1);\n\t\tmut_times(out, dragStrength);\n\t\tif(VALIDATE_VECTORS) {\n\t\t\ttry {\n\t\t\t\tvalidate(out);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconsole.log(\"drag error\", e);\n\t\t\t\tconsole.log(c, dragSpeed, dragStrength);\n\t\t\t\tconsole.log(\"magnitude\", magnitude(vel));\n\t\t\t\tmut_copy(out, vel);\n\t\t\t\tconsole.log(\"copied\", out);\n\t\t\t\tmut_normalize(out);\n\t\t\t\tconsole.log(\"normalized\", out);\n\t\t\t\tmut_times(out, -1);\n\t\t\t\tconsole.log(\"inverted\", out);\n\t\t\t\tmut_times(out, dragStrength);\n\t\t\t\tconsole.log(\"scaled\", out);\n\t\t\t\tout.fill(0.0);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n})();\n\n\n/**\n * Checks if entity is out of screen space by more than 50%.\n */\nexport function offscreen(x, y, displayProps) {\n\treturn (\n\t\tx < (displayProps.width  * -0.5) || x >displayProps.width   * 1.5 ||\n\t\ty < (displayProps.height * -0.5) || y > displayProps.height * 1.5\n\t)\n}\n\n/**\n * Calculates the screenspace pixel offset of a coordinate from the [-1,1] coordinate\n * range used in game position vectors.\n */\nexport function screenSpace(x, displayProps) {\n\treturn ((x+1)/2) * displayProps.minDimension;\n}\n\n/**\n * Finds the screen space equivalent of the game space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\n\nexport function screenSpaceVec(v, displayProps, out) {\n\tout[0] = (((v[0]+1)/2)*displayProps.minDimension);\n\tout[1] = (((v[1]+1)/2)*displayProps.minDimension);\n\treturn out;\n}\n\n/**\n * Finds the game space equivalent of the sceen space vector v.\n * @param {vec2} v game space vector\n * @param {vec2} out out parameter\n * @return {out}\n */\nexport function gameSpaceVec(v, displayProps, out) {\n\tout[0] = 2*((v[0])/displayProps.minDimension)-1;\n\tout[1] = 2*((v[1])/displayProps.minDimension)-1;\n}\n\n/**\n * Flattens an array. \n * @function flatten\n * @param {mixed} a an array, array-like, or object that can be flattened\n * @return {mixed} flat version of input\n */\nexport function flatten(a) {\n\t// cheap array-like check, may not always be reliable\n\tif(a instanceof Object && typeof a.length == \"number\") {\n\t\tlet i = 0, len = a.length, out = [];\n\t\tfor(;i < len; ++i) {\n\t\t\tout = out.concat(flatten(a[i]));\n\t\t}\n\t\treturn out;\n\t}\n\telse return a;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.util.js\n// module id = 32\n// module chunks = 0","\"use strict\";\n/**\n * @module pxene.BooleanArray\n */\n\n/**\n * A BooleanArray is a TypedArray-like implementation for integer-indexed\n * boolean fields. It lets you store a set of boolean values in an arraybuffer,\n * which allows for better potential memory use in circumstances where you need\n * to set more than 2 booleans on a single data set\\*, and potentially slightly\n * better performance (though probably not significantly).\n *\n * It's probably not incredibly useful in most circumstances, but when you have\n * an object with a bunch of boolean flags and you're going to make a bunch of\n * that kind of object it might come in handy.\n *\n * In short, if you don't know whether you need this you almost certainly don't.\n *\n * *_most sources indicate a boolean occupies 4 bytes of javascript memory due \n * to storage and indexing overhead. In contrast, a BooleanArray can store up \n * to 8 booleans in around the same amount of memory (and the proportionate \n * savings grow the more booleans you have to store, since an arraybuffer\n * has a small fixed overhead)._\n */\nconst internalArray = Symbol();\n\nexport default function BooleanArray() {\n\tif((arguments[0] instanceof ArrayBuffer) && (typeof arguments[1] === \"number\") && (typeof arguments[2] === \"number\")) {\n\t\t\tthis[internalArray] = new Uint8Array(arguments[0], arguments[1], Math.ceil(arguments[2]/8));\n\t}\n\telse if(typeof arguments[0] === \"number\") {\n\t\tthis[internalArray] = new Uint8Array(Math.ceil(arguments[0]/8));\n\t}\n\telse throw Error(\"expected either length or buffer, offset, length as arguments\");\n\tthis.length = this[internalArray].byteLength * 8;\n\tObject.freeze(this);\n\treturn this;\n}\n\n/**\n * Gets a boolean by index.\n */\nBooleanArray.prototype.get = function get(n) {\n\tlet i = ~~(n/8);\n\tlet s = n % 8;\n\treturn (this[internalArray][i] & (1 << s))?true:false;\n}\n\n/**\n * Sets an index to the truthiness of the given value.\n * @param {int} n index to set\n * @param {truthy|falsy} v value to set\n */\nBooleanArray.prototype.set = function set(n, v) {\n\tlet i = ~~(n/8);\n\tlet s = n % 8;\n\tif(v) { // any kind of truthy is ok!\n\t\tthis[internalArray][i] |= 1 << s;\n\t}\n\telse {\n\t\tthis[internalArray][i] &= 255 ^ (1 << s);\n\t}\n}\n\n/**\n * Fill the array with a value.\n * @param {truthy|falsy} v\n */\nBooleanArray.prototype.fill = function(v) {\n\tthis[internalArray].fill(v?255:0);\n}\n\n/**\n * For useful compatibility with {@link pxene.ObjectPool}.\n */\nBooleanArray.prototype.recycle = function() {\n\tthis[internalArray].fill(0);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.BooleanArray.js\n// module id = 33\n// module chunks = 0","\"use strict\";\n//import BooleanArray from \"./pxene.BooleanArray\";\nconst {floor} = Math;\n/** mask a full rectangle **/\nconst MASK_16 = Math.pow(2, 16) - 1;\n/** used to generate offset masks **/\nconst MASK_X = new Uint16Array(4);\n/** used to generate offset masks **/\nconst MASK_Y = new Uint16Array(4);\n/** mask offsets from the top **/\nconst MASK_TOP = new Uint16Array(4);\n/** mask offsets from the bottom **/\nconst MASK_BOTTOM = new Uint16Array(4);\n/** mask offsets from the right **/\nconst MASK_RIGHT = new Uint16Array(4);\n/** mask offsets from the left **/\nconst MASK_LEFT = new Uint16Array(4);\n\n/**\n * Precompute a bunch of useful masks for fast shape checks. Done this way\n * to illustrate/keep track of how they're constructed instead of just using\n * \"magic numbers\".\n */\nMASK_X[0] = 1 | (1 << 4) | (1 << 8) | (1 << 12);\nMASK_X[1] = MASK_X[0] << 1;\nMASK_X[2] = MASK_X[0] << 2;\nMASK_X[3] = MASK_X[0] << 3;\nif((MASK_X[0] | MASK_X[1] | MASK_X[2] | MASK_X[3]) !== MASK_16) throw new Error(\"MASK_X is bad\");\n\nMASK_Y[0] = (1 << 4) - 1; \nMASK_Y[1] = MASK_Y[0] << 4;\nMASK_Y[2] = MASK_Y[0] << 8;\nMASK_Y[3] = MASK_Y[0] << 12;\nif((MASK_Y[0] | MASK_Y[1] | MASK_Y[2] | MASK_Y[3]) !== MASK_16) throw new Error(\"MASK_Y is bad\");\n\nMASK_TOP[0] = 0;\nMASK_TOP[1] = MASK_Y[3];\nMASK_TOP[2] = MASK_TOP[1] | MASK_Y[2];\nMASK_TOP[3] = MASK_TOP[2] | MASK_Y[1];\n\nMASK_BOTTOM[0] = 0;\nMASK_BOTTOM[1] = MASK_Y[0];\nMASK_BOTTOM[2] = MASK_BOTTOM[1] | MASK_Y[1];\nMASK_BOTTOM[3] = MASK_BOTTOM[2] | MASK_Y[2];\n\nMASK_RIGHT[0] = 0;\nMASK_RIGHT[1] = MASK_X[3];\nMASK_RIGHT[2] = MASK_RIGHT[1] | MASK_X[2];\nMASK_RIGHT[3] = MASK_RIGHT[2] | MASK_X[1];\n\nMASK_LEFT[0] = 0;\nMASK_LEFT[1] = MASK_X[0];\nMASK_LEFT[2] = MASK_LEFT[1] | MASK_X[1];\nMASK_LEFT[3] = MASK_LEFT[2] | MASK_X[2];\n\n\n/**\n * @module pxene.CollisionMap\n *\n * Module containing {@link CollisionMap} prototype.\n */\n\nconst internal_array = Symbol();\n\n/**\n * @constructor\n * A collision map is a 2d grid of boolean true/false values, meant to be\n * used for collision testing.\n *\n * @param {int} width the width of the grid\n * @param {int} height the height of the grid\n * @return {CollisionMap}\n */\nexport default function CollisionMap(width = 0, height = 0) {\n\tthis.width = 0;\n\tthis.height = 0;\n\tthis.cellWidth = 0;\n\tthis.cellHeight = 0;\n\tthis.length = 0;\n\tif(width && height) this.init(width, height);\n\treturn this;\n}\n\n/* helpful(?) constants */\n/** pixel array index offset for the red channel **/\nCollisionMap.CHANNEL_RED = 0;\n/** pixel array index offset for the green channel **/\nCollisionMap.CHANNEL_GREEN = 1;\n/** pixel array index offset for the blue channel **/\nCollisionMap.CHANNEL_BLUE = 2;\n/** pixel array index offset for the alpha channel **/\nCollisionMap.CHANNEL_ALPHA = 3;\n\n/**\n * Creates a per-pixel collision map from a Canvas.\n * @param {Canvas} canvas the canvas to read pixel data from\n * @param {int} threshold the threshold above which a pixel will be considered solid (default 0) \n * @param {int} channel the channel to check against (default {@link CollisionMap.CHANNEL_ALPHA}) \n * @return {CollisionMap} \n *\n * @note internal canvas pixel data stores alpha in a range of 0 to 255, so\n * convert from [0 - 1] to [0 - 255] if providing a threshold \n */\nCollisionMap.fromCanvasPixels = function(canvas, threshold = 0, channel = CollisionMap.CHANNEL_ALPHA) {\n\tconsole.time(\"new CollisionMap\");\n\tlet map = new CollisionMap(canvas.width, canvas.height);\n\tconsole.timeEnd(\"new CollisionMap\");\n\tlet pixels;\n\tlet context = canvas.getContext(\"2d\");\n\tconsole.time(\"fromCanvasPixels loop\");\n\tlet once = true;\n\tfor(let y = 0, h = canvas.height; y < h; y += 100) {\n\t\t// go 100 rows at time with the image data for sanity/memory use\n\t\ttry {\n\t\t\tif(once) console.time(\"getImageData\");\n\t\t\tpixels = context.getImageData(0, y, canvas.width, 100).data;\n\t\t\tif(once) console.timeEnd(\"getImageData\");\n\t\t}\n\t\tcatch(e) {\n\t\t\tthrow new Error(\"CollisionData:failed to get image data :(\");\n\t\t}\n\t\tif(once) console.time(\"loop map.set\");\n\t\tfor(let i = 0, len = pixels.length; i < len; i+=4) {\n\t\t\tlet mx = (i / 4) % canvas.width, my = y + (~~((i / 4) / canvas.width));\n\t\t\tif(pixels[i+channel] > threshold) map.set(mx, my, true);\n\t\t}\n\t\tif(once) console.timeEnd(\"loop map.set\");\n\t\tonce = false;\n\t}\n\tconsole.timeEnd(\"fromCanvasPixels loop\");\n\treturn map;\n}\n\n/**\n * Returns the bit for the given set of coordinates.\n */\nconst cellBit = CollisionMap.cellBit = function cellBit(x, y) {\n\treturn 1 << ((x % 4) + ((y % 4)*4));\n}\n\n/**\n * Returns the mask which excludes the given bit coordinate from the cell.\n */\nconst cellMask = CollisionMap.cellMask = function cellMask(x, y) {\n\treturn invertMask(cellBit(x, y));\n}\n\nconst cellIndex = CollisionMap.cellIndex = function cellIndex(x, y, w) {\n\treturn (floor(y/4) * floor(w/4)) + floor(x/4) \n}\n\n\n/**\n * Reinitializes the map with a new width and height.\n * @param {int} width\n * @param {int} height\n * @return {self}\n */\nCollisionMap.prototype.init = function(width, height) {\n\tthis.width = ~~width;\n\tif(this.width % 4) this.width += (4 - (~~width % 4)); // round to nearest 4\n\tthis.height = ~~height;\n\tif(this.height % 4) this.height += (4 - (~~height % 4)); // round to nearest 4\n\tthis.cellWidth = this.width / 4;\n\tthis.cellHeight = this.height / 4;\n\tlet newlen = (this.cellWidth * this.cellHeight);\n\tif(this.length !== newlen) {\n\t\tthis.length = newlen;\n\t\tif(this.length) {\n\t\t\tthis[internal_array] = new Uint16Array(this.length);\n\t\t}\n\t}\n\telse if(this[internal_array]) this[internal_array].fill(0);\n\treturn this;\n}\n\nCollisionMap.prototype.getCell = function getCell(x, y) {\n\treturn this[internal_array][cellIndex(x, y, this.width)];\n}\n\nCollisionMap.prototype.get = function get(x, y) {\n\treturn (this.getCell(x, y) & cellBit(x, y))?1:0;\n}\n\nCollisionMap.prototype.set = function set(x, y, v) {\n\tif(v) this[internal_array][cellIndex(x, y, this.width)] |= cellBit(x, y);\n\telse this[internal_array][cellIndex(x, y, this.width)] &= cellMask(x, y);\n}\n\n/**\n * Checks a rectangular area of the CollisionMap, returning a count of solid\n * grid sections within.\n *\n * @param {int} x start x coordinate\n * @param {int} y start y coordinate\n * @param {int} w width of rectangle\n * @param {int} h height of rectangle \n * @return {int}\n */\nCollisionMap.prototype.checkRect = function checkRect(x, y, w, h) {\n\tlet offsetX = x % 4;\n\tlet offsetY = y % 4;\n\tlet cellWidth = Math.ceil((offsetX + w) / 4);\n\tlet cellHeight = Math.ceil((offsetY + h) / 4);\n\tlet maskX, maskY;\n\tfor(let cellY = 0; cellY < cellHeight; ++cellY) {\n\t\tif(cellY === 0) maskY = MASK_TOP[offsetY];\n\t\telse if(cellY === (cellHeight - 1)) maskY = MASK_BOTTOM[offsetY];\n\t\telse maskY = MASK_16;\n\t\tfor(let cellX = 0; cellX < cellWidth; ++cellX) {\n\t\t\tif(cellX === 0) maskX = MASK_LEFT[offsetX];\n\t\t\telse if(cellX === (cellWidth - 1)) maskX = MASK_RIGHT[offsetX];\n\t\t\telse maskX = MASK_16;\n\t\t\tif(maskX & maskY & this[internal_array][(cellY * this.cellWidth) + cellX]) return 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/**\n * Intersects two CollisionMaps, returning a sum of the count of overlapping\n * solid areas.\n * @param {CollisionMap} target the map to intersect with\n * @param {int} sx start x of this map\n * @param {int} sy start y of this map\n * @param {int} tx start x of the target map\n * @param {int} ty start y of the target map\n * @param {int} w width of area to collide\n * @param {int} h height of area to collide\n * @return {int}\n * @todo examine whether fast intersection by blocks of 8 sectors is doable\n */\nCollisionMap.prototype.intersect = function intersect(target, sx, sy, tx, ty, w, h) {\n\tlet x, y, sum = 0;\n\tfor(y = 0; y < h; ++y) {\n\t\tfor(x = 0; x < h; ++x) {\n\t\t\tsum += (this.get(sx+x, sy+y) && target.get(tx+x, ty+y))?1:0;\t\n\t\t}\n\t}\n\treturn sum;\n}\n\nfunction invertMask(mask) {\n\treturn MASK_16 ^ mask;\n}\n\n// export constants for debugging\nCollisionMap.MASK_X = MASK_X;\nCollisionMap.MASK_Y = MASK_Y;\nCollisionMap.MASK_TOP = MASK_TOP;\nCollisionMap.MASK_BOTTOM = MASK_BOTTOM;\nCollisionMap.MASK_LEFT = MASK_LEFT;\nCollisionMap.MASK_RIGHT = MASK_RIGHT;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../nphyx-pxene/src/pxene.CollisionMap.js\n// module id = 35\n// module chunks = 0","/**\n * Derived from bokeh generator by Jack Rugile at [CodePen](http://codepen.io/jackrugile/pen/gaFub)\n */\n\"use strict\";\nimport {shuffle} from \"../photonomix.util.js\";\nlet bgBuffer, bokehBuffer, bgCtx, bokehCtx, tau = Math.PI * 2, parts = [], displayProps;\nlet colors1 = [\n\t\"rgba(255,64,64,1.0)\",\n\t\"rgba(64,255,64,1.0)\",\n\t\"rgba(64,64,255,1.0)\"\n];\nshuffle(colors1);\nlet colors2 = [\n\t\"rgba(255,64,64,0.8)\",\n\t\"rgba(64,255,64,0.8)\",\n\t\"rgba(64,64,255,0.8)\"\n];\nshuffle(colors2);\n\n\n\nfunction rand( min, max ) {\n\treturn Math.random() * (max - min) + min;\n}\n\nfunction hsla( h, s, l, a ) {\n\treturn \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\";\n}\n\t\nexport function init(display) {\n\tdisplayProps = display.props;\n\tbgBuffer = display.buffersByLabel.bokehBack;//buffer1;\n\tbgCtx = bgBuffer.context;\n\tbokehBuffer = display.buffersByLabel.bokehFront; //buffer2;\n\tbokehCtx = bokehBuffer.context;\n\n\tlet sizeBase = bgBuffer.width + bgBuffer.height;\n\tlet w = bokehBuffer.width;\n\tlet h = bokehBuffer.height;\n\n\n\tparts.length = 0;\n\tfor( var i = 0; i < Math.floor( ( w + h ) * 0.01 ); i++ ) {\n\t\tparts.push({\n\t\t\tradius: rand( sizeBase * 0.005, sizeBase * 0.02 ),\n\t\t\tx: rand( 0, w ),\n\t\t\ty: rand( 0, h ),\n\t\t\tangle: rand( 0, tau ),\n\t\t\tvel: rand( 0.05, 0.2 ),\n\t\t\ttick: rand( 0, 10000 )\n\t\t});\n\t}\n\n\tgenerateBackground();\n\tdisplayProps.events.on(\"resize\", generateBackground);\n}\n\nexport function generateBackground() {\n\tlet w = bokehBuffer.width;\n\tlet h = bokehBuffer.height;\n\tlet mind = Math.min(w, h);\n\tlet maxd = Math.max(w, h);\n\tbgCtx.fillStyle = \"black\";\n\tbgCtx.fillRect(0, 0, w, h);\n\tlet g = bgCtx.createLinearGradient(0, 0, w, h);\n\tg.addColorStop(0.0, colors1[0]);\n\tg.addColorStop(0.5, colors1[1]);\n\tg.addColorStop(1.0, colors1[2]);\n\tbgCtx.fillStyle = g;\n\tbgCtx.fillRect(0, 0, w, h);\n\tg = bgCtx.createLinearGradient(0, h, w, 0);\n\tg.addColorStop(0.0, colors2[0]);\n\tg.addColorStop(0.5, colors2[1]);\n\tg.addColorStop(1.0, colors2[2]);\n\tbgCtx.fillStyle = g;\n\tbgCtx.fillRect(0, 0, w, h);\n\n\tg = bgCtx.createRadialGradient(w/2, h/2, maxd/2, w/2, h/2, 0);\n\tlet rad = ((maxd - mind) / maxd);\n\tg.addColorStop(1, \"rgba(32,32,32,0.5)\");\n\tg.addColorStop(rad + 0.06, \"rgba(0,0,0,0.8)\");\n\tg.addColorStop(rad + 0.05, \"rgba(128,128,128,1.0)\");\n\tg.addColorStop(rad + 0.04, \"rgba(255,255,255,0.6)\");\n\tg.addColorStop(rad + 0.03, \"rgba(255,255,255,0.8)\");\n\tg.addColorStop(rad + 0.025, \"rgba(255,255,255,0.8)\");\n\tg.addColorStop(rad + 0.005, \"rgba(255,255,255,0.5)\");\n\tg.addColorStop(0, \"rgba(255,255,255,0.01)\");\n\tbgCtx.fillStyle = g;\n\tbgCtx.globalCompositeOperation = \"luminosity\";\n\tbgCtx.fillRect(0, 0, w, h);\n\tbgCtx.globalCompositeOperation = \"source-in\";\n}\n\nexport function draw() {\n\tvar i = parts.length;\n\tlet w = bokehBuffer.width;\n\tlet h = bokehBuffer.height;\n\tbokehCtx.fillStyle = \"rgba(0,0,0,0)\";\n\tbokehCtx.globalCompositeOperation = \"source-over\";\n\tbokehCtx.clearRect(0, 0, w, h);\n\tbokehCtx.shadowBlur = 15;\n\tbokehCtx.shadowColor = \"#fff\";\n\twhile(i--) {\n\t\tvar part = parts[i];\n\t\t\n\t\tpart.x += Math.cos(part.angle) * part.vel;\n\t\tpart.y += Math.sin(part.angle) * part.vel;\n\t\tpart.angle += rand(-0.05, 0.05);\n\t\t\n\t\tbokehCtx.beginPath();\n\t\tbokehCtx.arc(part.x, part.y, part.radius, 0, tau);\n\t\tbokehCtx.fillStyle = hsla(0, 0, 100, 0.03 + Math.cos( part.tick * 0.02 ) * 0.01);\n\t\tbokehCtx.fill();\n\t\t\n\t\tif(part.x - part.radius > w) part.x = -part.radius;\n\t\tif(part.x + part.radius < 0) part.x = w + part.radius;\n\t\tif(part.y - part.radius > h) part.y = -part.radius;\n\t\tif(part.y + part.radius < 0) part.y = h + part.radius;\n\t\t\n\t\tpart.tick++;\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/bokeh.js\n// module id = 36\n// module chunks = 0","\"use strict\";\n/**\n * Module for drawing entity layer.\n */\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport * as sprites from \"./sprites\";\nimport * as constants from \"../photonomix.constants\";\nimport {rotate} from \"../photonomix.util\";\nimport {offscreen, screenSpace, updateCompositeOperation} from \"./\";\nconst {vec2, lerp} = vectrix.vectors;\nconst {mut_plus} = vectrix.matrices;\nimport {Photon, Mote, Void, Emitter, AntiGravitonCluster} from \"../game\";\nimport {COLOR_R, COLOR_G, COLOR_B} from \"../game/Photon\";\nimport {ACT_ATTACK} from \"../game/Mote\";\n\nlet {min, cos, sin, sqrt, tan, round, PI} = Math;\nconst tf = constants.TARGET_FPS;\n\nlet lightBuffer, darkBuffer, lightCtx, darkCtx, frameCount, timing, displayProps;\n\nlet voidSprite, emitterSprite, moteCenterSprite, photonSprites = Array(3), mask;\n\n/**\n * Draws plasma lines between a mote and its target.\n */\nconst drawPlasmaLine = (function() {\n\tlet a  = vec2(), b  = vec2(), c  = vec2(), d  = vec2(),\n\t\t\tra = vec2(), rb = vec2(), \n\t\t\trax = 0|0, ray = 0|0, speeda = 0.0, ta = 0.0, tc = 0.0,\n\t\t\trbx = 0|0, rby = 0|0, speedb = 0.0, tb = 0.0, td = 0.0,\n\t\t\tsx = 0|0, sy = 0|0, tx = 0|0, ty = 0|0;\n\treturn function drawPlasmaLine(ctx, source, target, outerColor, innerColor, lineSize = 4, frameOffset = 0) {\n\t\t// only these acts get lines\n\t\tta = 0.6;\n\t\ttc = 0.9;\n\t\ttb = 0.7;\n\t\ttd = 0.9;\n\t\tspeeda = 0.57121;\n\t\tspeedb = 0.71213;\n\t\tlerp(source, target, ta, a);\n\t\tlerp(source, target, tb, b);\n\t\tlerp(source, target, tc, c);\n\t\tlerp(source, target, td, d);\n\t\t\n\t\tmut_plus(rotate(a, c, tan(cos((frameCount+frameOffset)*speeda)), ra), a);\n\t\tmut_plus(rotate(b, d, tan(sin((frameCount+frameOffset)*speedb)), rb), b);\n\n\t\tsx = source[0]; sy = source[1];\n\t\ttx = target[0]; ty = target[1];\n\t\trax = ra[0]; ray = ra[1];\n\t\trbx = rb[0]; rby = rb[1];\n\t\tif(lightBuffer.width > lightBuffer.height) {\n\t\t\tsx = sx;\n\t\t\ttx = tx;\n\t\t\trax = rax;\n\t\t\trbx = rbx;\n\t\t}\n\t\telse {\n\t\t\tsy = sy;\n\t\t\tty = ty;\n\t\t\tray = ray;\n\t\t\trby = rby;\n\t\t}\n\t\tctx.beginPath();\n\t\tctx.moveTo(sx, sy);\n\t\tctx.bezierCurveTo(rax, ray, rbx, rby, tx, ty);\n\t\tctx.strokeStyle = outerColor;\n\t\tctx.lineWidth = round(cos((frameCount+frameOffset)*speeda)*lineSize);\n\t\tctx.lineCap = \"round\";\n\t\tctx.stroke();\n\t\tctx.closePath();\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(sx, sy);\n\t\tctx.bezierCurveTo(rax, ray, rbx, rby, tx, ty);\n\t\tctx.strokeStyle = innerColor;\n\t\tctx.lineWidth = round(cos((frameCount+frameOffset)*speeda)*~~(lineSize/4));\n\t\tctx.lineCap = \"round\";\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n})();\n\n/**\n * Draw a mote.\n */\nconst drawMote = (function() {\n\tlet pulse = 0|0, pregnant = 0|0, injured = 0|0, lastMeal = 0|0, size = 0.0,\n\tplasmaSource = vec2(), plasmaTarget = vec2(), sc = 0.0, sw = 0.0, sch = 0.0, \n\tswh = 0.0, colorIndex = 0|0, px = 0.0, py = 0.0, sprite;\n\treturn function drawMote(entity) {\n\t\tlightCtx.globalCompositeOperation = \"lighter\";\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\t({pulse, pregnant, injured, lastMeal} = entity);\n\t\tsize = entity.size * displayProps.minDimension;\n\t\tif(pregnant) {\n\t\t\tsc = size * cos((frameCount+pulse) * 0.2) * (sqrt(pregnant)+1);\n\t\t\tsw = size * sin((frameCount+pulse+tf) * 0.2) * (sqrt(pregnant)+1)*0.1;\n\t\t}\n\t\telse if(injured) {\n\t\t\tsc = size * cos((frameCount+pulse) * (0.2+(1-1/injured)));\n\t\t\tsw = size * sin((frameCount+pulse+tf) * 0.2)*0.1; //* (0.2+(1-1/injured)))*0.25;\n\t\t}\n\t\telse {\n\t\t\tsc = size * cos((frameCount+pulse) * 0.2);\n\t\t\tsw = size * sin((frameCount+pulse+tf) * 0.2)*0.1;\n\t\t}\n\t\tsch = sc*0.5;\n\t\tswh = sw*0.5;\n\t\tcolorIndex = sprites.colorIndex(entity.color[COLOR_R], entity.color[COLOR_G], entity.color[COLOR_B]);\n\t\tsprite = sprites.getMoteSprite(colorIndex);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-sch, py-sch, sc, sc);\n\t\tsprite = moteCenterSprite; \n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-sch, py-sch, sc, sc);\n\t\tif(entity.target && entity.action == ACT_ATTACK) {\n\t\t\t// need vectors but in screen space, not absolute space\n\t\t\tplasmaSource[0] = px;\n\t\t\tplasmaSource[1] = py;\n\t\t\tplasmaTarget[0] = screenSpace(entity.target.pos[0]);\n\t\t\tplasmaTarget[1] = screenSpace(entity.target.pos[1]);\n\tdrawPlasmaLine(lightCtx, plasmaSource, plasmaTarget, sprites.getColorString(colorIndex), \"white\", 5, pulse);\n\t\t}\n\t}\n})();\n\n/**\n * Draws a photon.\n */\nconst drawPhoton = (function() {\n\tlet sw = 0.0, swh = 0.0, px = 0.0, py = 0.0, ps = 0.0, pulse = 0|0, sprite;\n\treturn function drawPhoton(entity) {\n\t\tupdateCompositeOperation(lightCtx, \"lighter\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\t\tsprite = photonSprites[entity.color];\n\t\tps = constants.PHOTON_BASE_SIZE * displayProps.minDimension; //sprite.pixelSize;\n\t\tpulse = entity.pulse;\n\t\tsw = (ps * 0.75 * (cos((frameCount+pulse)*0.3) * sin((frameCount+pulse)*0.1))) + \n\t\t     (ps * 0.25);\n\t\tswh = sw*0.5;\n\t\tlightCtx.drawImage(sprite.canvas, 0, 0, sprite.pixelSize, sprite.pixelSize, px-swh, py-swh, sw, sw);\n\t}\n})();\n\n/**\n * Draws a void.\n */\nconst drawVoid = (function() {\n\tlet sc = 0.0, sch = 0.0, px = 0.0, py = 0.0, ox = 0.0, oy = 0.0, sprite, \n\t    sw = 0.0, swh = 0.0, colorIndex = 0|0;\n\treturn function drawVoid(entity) {\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\tsc = entity.size * displayProps.minDimension * 1+(sin(frameCount*0.2));\n\t\tsch = sc*0.5;\n\n\t\tsprite = voidSprite;\n\t\tupdateCompositeOperation(darkCtx, \"source-over\");\n\t\tdarkCtx.drawImage(sprite.canvas, px-sch, py-sch, sc, sc);\n\t\tswitch(entity.lastMeal) {\n\t\t\tcase -1:colorIndex = 0x888; break;\n\t\t\tcase COLOR_R:colorIndex = 0xf44; break;\n\t\t\tcase COLOR_G:colorIndex = 0x4f4; break;\n\t\t\tcase COLOR_B:colorIndex = 0x44f; break;\n\t\t}\n\t\t// white patch\n\t\tsw = sc*1.7;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.0127)*sc*0.1;\n\t\toy = cos(frameCount*0.0127)*sc*0.1;\n\t\tsprite = sprites.getMoteSprite(0xfff);\n\t\tupdateCompositeOperation(darkCtx, \"soft-light\");\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t\t// color patch\n\t\tsw = sc*1.2;\n\t\tswh = sw*0.5;\n\t\tox = cos(frameCount*0.023)*sc*0.13;\n\t\toy = sin(frameCount*0.023)*sc*0.13;\n\t\tsprite = sprites.getMoteSprite(colorIndex);\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t\t// dark patch\n\t\tsprite = sprites.getMoteSprite(0x000);\n\t\tsw = sc*1.65;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.0122)*sc*0.15;\n\t\toy = cos(frameCount*0.0122)*sc*0.15;\n\t\tupdateCompositeOperation(darkCtx, \"multiply\");\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t}\n})();\n\n/**\n * Draws an emitter.\n */\nconst drawEmitter = (function() {\n\tlet sc = 0.0, sch = 0.0, px = 0.0, py = 0.0, ox = 0.0, oy = 0.0, sprite, \n\t    sw = 0.0, swh = 0.0;\n\treturn function drawEmitter(entity) {\n\t\tupdateCompositeOperation(lightCtx, \"lighter\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\tsc = entity.size * displayProps.minDimension;\n\t\t//sc = sc + (sc*(sin(frameCount*0.05))/100);\n\t\tsch = sc*0.5;\n\n\t\tsprite = emitterSprite;\n\t\tlightCtx.drawImage(sprite.canvas, px-sch, py-sch, sc, sc);\n\n\t\tsw = cos((frameCount)*0.2)*sc*1.7;\n\t\tswh = sw*0.5;\n\n\t\tsprite = sprites.getMoteSprite(0x333);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-swh, py-swh, sw, sw);\n\n\t\tsw = sc*1.3;\n\t\tswh = sw*0.5;\n\t\tox = sin(frameCount*0.08)*sc*0.1;\n\t\toy = cos(frameCount*0.08)*sc*0.1;\n\t\tsprite = sprites.getMoteSprite(0x500);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\n\t\tox = sin(frameCount*0.08+2.094394)*sc*0.1;\n\t\toy = cos(frameCount*0.08+2.094394)*sc*0.1;\n\t\tsprite = sprites.getMoteSprite(0x050);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\n\t\tox = sin(frameCount*0.08+4.188789)*sc*0.1;\n\t\toy = cos(frameCount*0.08+4.188789)*sc*0.1;\n\t\tsprite = sprites.getMoteSprite(0x005);\n\t\tlightCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px+ox-swh, py+oy-swh, sw, sw);\n\t}\n})();\n\n/**\n * Draws an antigraviton cluster.\n */\nconst drawAntiGravitonCluster = (function() {\n\tlet size = 0.0, plasmaSource = vec2(), plasmaTarget = vec2(), lw = 4,\n\t\t\touterColor = \"rgba(0,0,0,0.3)\", innerColor = \"rgba(0,0,0,0.7)\",\n\t\t\tpi3rd = PI*(1/3), px = 0.0, py = 0.0, ox = 0.0, oy = 0.0,\n\t\t\tsc = 0.0, sch = 0.0, sprite;\n\tfunction drawAntiPlasma(offset, length) {\n\t\tox = sin(frameCount*0.08+offset)*sc*length;\n\t\toy = cos(frameCount*0.08+offset)*sc*length;\n\t\tplasmaTarget[0] = px+ox;\n\t\tplasmaTarget[1] = py+oy;\n\t\tdrawPlasmaLine(darkCtx, plasmaSource, plasmaTarget, outerColor, innerColor, lw);\n\t}\n\treturn function drawAntiGravitonCluster(entity) {\n\t\tupdateCompositeOperation(darkCtx, \"multiply\");\n\t\tpx = screenSpace(entity.pos[0]);\n\t\tpy = screenSpace(entity.pos[1]);\n\n\t\tsize = entity.size * displayProps.minDimension;\n\t\tsc = size;\n\t\tlw = min(4, ~~(sc/2));\n\t\tsch = sc*0.5;\n\t\tplasmaSource[0] = px;\n\t\tplasmaSource[1] = py;\n\n\t\tdrawAntiPlasma(0, 0.5);\n\t\tdrawAntiPlasma(pi3rd*2, 0.5);\n\t\tdrawAntiPlasma(pi3rd*4, 0.5);\n\t\tdrawAntiPlasma(pi3rd, 0.25);\n\t\tdrawAntiPlasma(pi3rd*3, 0.25);\n\t\tdrawAntiPlasma(pi3rd*5, 0.25);\n\n\t\tsprite = sprites.getMoteSprite(0x000);\n\t\tdarkCtx.drawImage(sprite.canvas, sprite.sx, sprite.sy, sprite.sw, sprite.sh, px-sch, py-sch, sc, sc);\n\t}\n})();\n\nexport const init = function(display) {\n\tdisplayProps = display.props;\n\ttiming = display.timing;\n\tlightBuffer = display.buffersByLabel.entitiesLight;\n\tdarkBuffer = display.buffersByLabel.entitiesDark;\n\tlightCtx = lightBuffer.context;\n\tdarkCtx = darkBuffer.context;\n\tupdateProps();\n\tdisplayProps.events.on(\"resize\", updateProps);\n\tvoidSprite = sprites.createVoidSprite(1000, 1);\n\temitterSprite = sprites.createEmitterSprite(displayProps.minDimension, 1);\n\tphotonSprites[COLOR_R] = sprites.createPhotonSprite(displayProps.minDimension, constants.PHOTON_BASE_SIZE, \"red\");\n\tphotonSprites[COLOR_G] = sprites.createPhotonSprite(displayProps.minDimension, constants.PHOTON_BASE_SIZE, \"green\");\n\tphotonSprites[COLOR_B] = sprites.createPhotonSprite(displayProps.minDimension, constants.PHOTON_BASE_SIZE, \"blue\");\n\tsprites.initMoteSpriteSheet(1000, constants.MOTE_BASE_SIZE*4);\n\tmask = sprites.createGameSpaceMask();\n\tmoteCenterSprite = sprites.createMoteCenterSprite();\n}\n\n/**\n * Draw call for all entities. Loops through game entities and draws them according\n * to kind and displayProps.\n */\nexport const draw = (function() {\n\t// these variables are shared by draw calls below\n\tlet i, l, entity, px, py;\n\tlet lightClearStyle = \"rgba(0,0,0,0.3)\";\n\tlet darkClearStyle  = \"rgba(0,0,0,0.1)\";\n\n\treturn function draw(state) {\n\t\tupdateCompositeOperation(lightCtx, \"source-over\");\n\t\tlightCtx.fillStyle = lightClearStyle;\n\t\tlightCtx.fillRect(0, 0, lightBuffer.width, lightBuffer.height);\n\t\tupdateCompositeOperation(darkCtx, \"destination-out\");\n\t\tdarkCtx.fillStyle = darkClearStyle;\n\t\tdarkCtx.clearRect(0, 0, darkBuffer.width, darkBuffer.height);\n\t\tframeCount = timing.frameCount;\n\t\tfor(i = 0, l = state.entities.length; i < l; ++i) {\n\t\t\tentity = state.entities[i];\n\t\t\tpx = screenSpace(entity.pos[0]);\n\t\t\tpy = screenSpace(entity.pos[1]);\n\t\t\tif(offscreen(px, py)) continue;\n\t\t\tif(entity instanceof Mote) drawMote(entity);\n\t\t\telse if(entity instanceof Photon) drawPhoton(entity);\n\t\t\telse if(entity instanceof Void) drawVoid(entity);\n\t\t\telse if(entity instanceof Emitter) drawEmitter(entity);\n\t\t\telse if(entity instanceof AntiGravitonCluster) \n\t\t\t\tdrawAntiGravitonCluster(entity);\n\t\t}\n\t\tupdateCompositeOperation(lightCtx, \"destination-out\");\n\t\tlightCtx.drawImage(mask.canvas, 0, 0, displayProps.minDimension, displayProps.minDimension);\n\t\tupdateCompositeOperation(darkCtx, \"destination-out\");\n\t\tdarkCtx.drawImage(mask.canvas, 0, 0, displayProps.minDimension, displayProps.minDimension);\n\t}\n})();\n\nfunction updateProps() {\n\tlet {width, height, minDimension, orientation} = displayProps;\n\tlet ox, oy;\n\tlightBuffer.width = darkBuffer.width = minDimension;\n\tlightBuffer.height = darkBuffer.height = minDimension;\n\tif(orientation) {\n\t\tox = 0;\n\t\toy = (height-width)/2;\t\n\t}\n\telse {\n\t\tox = (width-height)/2;\n\t\toy = 0;\n\t}\n\tlightBuffer.offsetX = darkBuffer.offsetX = ox;\n\tlightBuffer.offsetY = darkBuffer.offsetY = oy;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/entities.js\n// module id = 37\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {TARGET_FPS, GLOBAL_DRAG, EMITTER_SIZE} from \"../photonomix.constants\";\nimport {rotate, drag, gravitate, avoid} from \"../photonomix.util\";\nimport {Photon} from \"./\";\nlet {vec2, times, mut_times, distance} = vectrix.vectors;\nlet {mut_plus} = vectrix.matrices;\nlet {random, sqrt, ceil, min, PI} = Math;\nconst POS_C = vec2(0,0);\n\n/**\n * Emitters are \"white holes\" that spit out photons on a fixed schedule until depleted.\n */\nexport default function Emitter(ipos = vec2(), ivel = vec2(), mass = 1, photonPool = undefined, arms = undefined) {\n\tthis.pos = vec2(ipos);\n\tthis.vel = vec2(ivel);\n\tthis.birthMass = mass;\n\tthis.mass = 1;\n\tthis.initialMass = mass;\n\tthis.photonPool = photonPool;\n\tthis.arms = arms||(ceil(random()*random()*50));\n\tthis.size = 0;\n\tthis.next = ~~(random()*3);\n\treturn this;\n}\n\nlet scratchVec1 = vec2(), emissionsPerSecond = 0|0, emissionsPerFrame = 0|0, \n\t\ttargetFrame = 0|0, i = 0|0, len = 0|0, entity, a_dist = 0.0, consume = 0|0;\nEmitter.prototype.tick = function(entities, delta, frameCount) {\n\t/* jshint unused:false */\n\tif(this.birthMass > 0) {\n\t\tconsume = min(this.birthMass, ceil(this.mass/100));\n\t\tthis.birthMass -= consume;\n\t\tthis.mass += consume;\n\t}\n\tthis.size = sqrt(this.mass/PI) * EMITTER_SIZE;\n\tif(this.birthMass === 0) { // don't start producing until finished spawning\n\t\temissionsPerSecond = this.initialMass/20;\n\t\ttargetFrame = ceil(TARGET_FPS/emissionsPerSecond);\n\t\temissionsPerFrame = emissionsPerSecond/TARGET_FPS;\n\t\tif(frameCount % targetFrame === 0) {\n\t\t\twhile((emissionsPerFrame-- > 0) && this.mass > 0) {\n\t\t\t\tthis.mass--;\n\t\t\t\tentities.push(this.emitPhoton());\n\t\t\t}\n\t\t}\n\t}\n\t// last turn's move, has to happen first\n\tmut_plus(this.pos, times(this.vel, delta, scratchVec1));\n\t// apply drag\n\tmut_plus(this.vel, drag(this.vel, GLOBAL_DRAG));\n\t// avoid edge\n\tmut_plus(this.vel, avoid(this.vel, this.pos, POS_C, 1.3, 0.001, scratchVec1));\n\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\ta_dist = distance(this.pos, entity.pos);\n\t\tif(entity instanceof Emitter) {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, this.mass*entity.mass, scratchVec1),\n\t\t\t\t1/entity.mass)\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\tmut_plus(entity.vel, mut_times(\n\t\t\t\tgravitate(entity.pos, this.pos, -this.mass*entity.mass, scratchVec1),\n\t\t\t\t1/entity.mass)\n\t\t\t);\n\t\t}\n\t}\n}\n\nEmitter.prototype.emitPhoton = (function() {\n\tlet pos = vec2(), radians = 0.0, mim = 0.0, color = 0|0;\n\treturn function emitPhoton() {\n\t\tcolor = this.next;\n\t\tpos[0] = this.size/5;\n\t\tpos[1] = this.size/5;\n\t\tmut_plus(pos, this.pos);\n\t\tmim = (this.mass%this.initialMass);\n\t\tradians = (mim/(this.initialMass/2));\n\t\tradians = radians + (mim%this.arms)*(2/this.arms); // split across arms\n\t\tmut_plus(rotate(pos, this.pos, radians, pos), this.pos);\n\t\tthis.next = ~~(random()*3);\n\t\t// introduce some jitter\n\t\treturn(new Photon(pos, vec2(0,0), color, this.photonPool));\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Emitter.js\n// module id = 38\n// module chunks = 0","\"use strict\";\nimport {TARGET_FPS} from \"../photonomix.constants\";\nimport * as vectrix from  \"@nphyx/vectrix\";\n\nexport const MARKER_HIT = 0;\n\nexport default function Marker(type, pos, lifetime = TARGET_FPS) {\n\tthis.type = type;\n\tthis.pos = vectrix.vectors.vec2(pos);\n\tthis.start = lifetime;\n\tthis.lifetime = lifetime;\n}\n\nMarker.prototype.tick = function() {\n\tthis.lifetime--;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/Marker.js\n// module id = 39\n// module chunks = 0","\"use strict\";\nimport * as vectrix from  \"@nphyx/vectrix\";\nimport {rotate, drag, avoid, accelerate} from  \"../photonomix.util\";\nimport {Void, Photon} from \"./\";\nconst {vec2, times, distance, mut_copy} = vectrix.vectors;\nconst {mut_plus} = vectrix.matrices;\nimport {TARGET_FPS, MOTE_BASE_SIZE, GLOBAL_DRAG} from \"../photonomix.constants\";\nconst {random, sqrt, PI, ceil, min, max} = Math;\nconst POS_C = vec2(0,0);\n\nexport default function AntiGravitonCluster(ipos = vec2(), ivel = vec2(), mass = 1, photonPool = undefined) {\n\tthis.pos = vec2(ipos);\n\tthis.vel = vec2(ivel);\n\tthis.size = 0;\n\tthis.birthMass = this.initialMass = mass;\n\tthis.mass = 1;\n\tthis.photonPool = photonPool;\n\tthis.instability = 0;\n\tthis.size = 0;\n\treturn this;\n}\n\nlet scratch = vec2(), entity, i = 0|0, len = 0|0, dist = 0.0, consume = 0|0;\nAntiGravitonCluster.prototype.tick = function(entities, delta, frameCount) {\n\tif(this.birthMass > 0) {\n\t\tconsume = min(this.birthMass, ceil(this.mass/10));\n\t\tthis.birthMass -= consume;\n\t\tthis.mass += consume;\n\t}\n\tthis.size = sqrt(this.mass*0.05/PI) * MOTE_BASE_SIZE;\n\t// last turn's move, has to happen first\n\tmut_plus(this.pos, times(this.vel, delta, scratch));\n\tthis.initialMass = max(this.mass, this.initialMass);\n\n\t// apply basic forces\n\t// don't go off the screen\n\tmut_plus(this.vel, avoid(this.vel, this.pos, POS_C, 1.3, 0.01, scratch));\n\t// apply drag\n\tmut_plus(this.vel, drag(this.vel, GLOBAL_DRAG));\n\n\tif(this.birthMass === 0) {\n\t\tthis.instability += this.mass*0.003;\n\t}\n\tif((frameCount % ceil(TARGET_FPS*0.05)) === 0) {\n\t\twhile((this.instability > 0) && (this.mass > 0)) {\n\t\t\tentities.push(this.emitPhoton());\n\t\t\tthis.mass -= min(this.mass, 7);\n\t\t\tthis.instability -= 0.9;\n\t\t}\n\t}\n\n\tfor(i = 0, len = entities.length; i < len; ++i) {\n\t\tentity = entities[i];\n\t\tif(entity === this) continue;\n\t\tdist = distance(this.pos, entity.pos);\n\n\t\tif(entity instanceof Void) {\n\t\t\tif((dist < (entity.size+this.size)*0.5)) {\n\t\t\t\tconsume = min(entity.mass, ceil((entity.mass+entity.birthMass)/10));\n\t\t\t\tthis.mass += consume;\n\t\t\t\tentity.mass -= consume;\n\t\t\t\tthis.instability += consume*0.07;\n\t\t\t}\n\t\t\tif(dist < this.size*10) mut_plus(this.vel, accelerate(this.pos, entity.pos, this.size*dist*5, scratch));\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nAntiGravitonCluster.prototype.emitPhoton = (function() {\n\tlet pos = vec2(), vel = vec2(), rot = vec2(), radians = 0.0, mim = 0.0, color = 0|0;\n\treturn function emitPhoton() {\n\t\tcolor = ~~(random()*3);\n\t\tpos[0] = this.size*0.1;\n\t\tpos[1] = this.size*0.1;\n\t\tmut_plus(pos, this.pos);\n\t\tmut_copy(vel, this.vel);\n\t\tmim = (this.mass%this.initialMass);\n\t\tradians = (mim/(this.initialMass/2));\n\t\tradians = radians + (mim%100)*(2/100); // split across arms\n\t\tmut_copy(rot, rotate(pos, this.pos, radians, pos));\n\t\tmut_plus(rot, this.pos);\n\t\tmut_plus(pos, rot);\n\t\t// introduce some jitter\n\t\tmut_plus(vel, accelerate(this.pos, pos, this.size*2, scratch));\n\t\treturn(new Photon(pos, vel, color, this.photonPool));\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/game/AntiGravitonCluster.js\n// module id = 40\n// module chunks = 0","\"use strict\";\n\nexport const MAX_POOL_SIZE = Math.pow(2, 21); // 2mb\n\nfunction calculatePoolSize(itemLength) {\n\treturn MAX_POOL_SIZE - (MAX_POOL_SIZE % itemLength);\n}\n\nfunction createFreedList(freedLength) {\n\tif(freedLength < Math.pow(2, 8)) return new Uint8Array(freedLength);\n\telse if(freedLength < Math.pow(2, 16)) return new Uint16Array(freedLength);\n\telse return new Uint32Array(freedLength);\n}\n\nexport function BufferPool(itemLength, maxItems) {\n\tlet size = 0|0;\n\tif(maxItems) {\n\t\tif(itemLength * maxItems > MAX_POOL_SIZE) {\n\t\t\tthrow new Error(\"requested buffer size is too large\");\n\t\t}\n\t\telse size = itemLength * maxItems;\n\t}\n\telse size = calculatePoolSize(itemLength);\n\tlet buffer = new ArrayBuffer(size);\n\tlet freedLength = (maxItems?maxItems:size/itemLength);\n\tlet freed = createFreedList(freedLength);\n\tObject.defineProperties(this, {\n\t\t\"itemLength\":{get: () => itemLength},\n\t\t\"buffer\":{get: () => buffer},\n\t\t\"size\":{get: () => size},\n\t\t\"freed\":{get: () => freed},\n\t});\n\tthis.next = 0;\n\tthis.freedPos = 0;\n\treturn this;\n}\n\nlet offset = 0|0;\nBufferPool.prototype.allocate = function() {\n\tif(this.freedPos > 0) offset = this.popFree();\n\telse if (this.next < this.size - 1) {\n\t\toffset = this.next;\n\t\tthis.next = this.next + this.itemLength;\n\t}\n\telse throw new Error(\"pool buffer is full\");\n\treturn offset;\n}\n\nBufferPool.prototype.popFree = function() {\n\tthis.freedPos--;\n\toffset = this.freed[this.freedPos]*this.itemLength;\n\tthis.freed[this.freedPos] = 0;\n\treturn offset;\n}\n\nBufferPool.prototype.free = function(offset) {\n\tthis.freed[this.freedPos] = (offset === 0?offset:offset/this.itemLength);\n\tthis.freedPos++;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.bufferPools.js\n// module id = 41\n// module chunks = 0","\"use strict\";\nimport {drawCircle} from \"./\";\nimport {DEBUG} from \"../photonomix.constants\";\nimport * as controls from \"../photonomix.controls\";\nconst {max} = Math;\n\nlet ctx, uiBuffer;\nlet displayProps;\n\n/**\n * Creates debug markers on screen to show the center, top, left, bottom, right, topleft\n * and topright extremes of the main game area.\n */\nconst debugMarkers = (function() {\n\tlet w, h, wh, hh;\n\treturn function debugMarkers() {\n\t\tw = displayProps.width;\n\t\th = displayProps.height;\n\t\twh = w/2; \n\t\thh = h/2;\n\t\tdrawCircle(ctx,  0,  0, 4, \"yellow\", 1, \"white\");\n\t\tdrawCircle(ctx, wh,  0, 4, \"orange\", 1, \"white\");\n\t\tdrawCircle(ctx,  w,  0, 4, \"red\", 1, \"white\");\n\t\tdrawCircle(ctx,  0, hh, 4, \"white\", 1, \"white\");\n\t\tdrawCircle(ctx, wh, hh, 4, \"gray\", 1, \"white\");\n\t\tdrawCircle(ctx,  w, hh, 4, \"black\", 1, \"white\");\n\t\tdrawCircle(ctx,  0,  h, 4, \"blue\", 1, \"white\");\n\t\tdrawCircle(ctx, wh,  h, 4, \"cyan\", 1, \"white\");\n\t\tdrawCircle(ctx,  w,  h, 4, \"green\", 1, \"white\");\n\t}\n})();\n\n/**\n * Draws an edge button.\n */\nfunction drawEdgeButton(ctx, x, y, w, h) {\n\tlet halfButtonWidth = w*0.5;\n\tlet buttonHeight = h;\n\tlet cpXScale = w*0.122;\n\tlet beginX = x-halfButtonWidth;\n\tlet beginY = y;\n\tlet topX = x;\n\tlet topY = y-buttonHeight;\n\tlet endX = x+halfButtonWidth;\n\tlet endY = y;\n\tlet aCPX = beginX + cpXScale;\n\tlet aCPY = beginY - cpXScale;\n\tlet bCPX = beginX + cpXScale;\n\tlet bCPY = topY;\n\tlet cCPX = endX - cpXScale;\n\tlet cCPY = topY;\n\tlet dCPX = endX - cpXScale;\n\tlet dCPY = endY - cpXScale;\n\tlet color = \"rgba(255,255,255,0.1)\";\n\n\tctx.beginPath();\n\tctx.moveTo(beginX, beginY);\n\tctx.bezierCurveTo(aCPX, aCPY, bCPX, bCPY, topX, topY);\n\tctx.bezierCurveTo(cCPX, cCPY, dCPX, dCPY, endX, endY);\n\tctx.fillStyle = color;\n\tctx.strokeStyle = color;\n\tctx.lineWidth = 4;\n\tctx.fill();\n\tctx.closePath();\n}\n\n/**\n * Draws UI elements.\n */\nexport function draw() {\n\tlet w = displayProps.width;\n\tlet h = displayProps.height;\n\tlet bw = max(100, w*0.1);\n\tlet bh = max(47,  w*0.047);\n\tlet {move, down} = controls.pointer;\n\tctx.clearRect(0, 0, w, h);\n\tdrawEdgeButton(ctx, w*0.5, h, bw, bh);\n\tdrawEdgeButton(ctx, w*0.333, h, bw, bh); \n\tdrawEdgeButton(ctx, w*0.666, h, bw, bh);  \n\tdrawCircle(ctx, move[0], move[1], 5, \"white\");\n\tif(controls.buttons[0]) {\n\t\tctx.beginPath();\n\t\tctx.moveTo(down[0], down[1]);\n\t\tctx.lineTo(move[0], move[1]);\n\t\tctx.strokeStyle = \"white\";\n\t\tctx.lineWidth = 2;\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n\t//drawAntiGravitonCluster(agClusterIcon, ctx);\n\tif(DEBUG) debugMarkers();\n}\n\n/**\n * Initializes the UI submodule.\n * @param {Object} display pxene display object initialized with a ui buffer\n */\nexport function init(display) {\n\tdisplayProps = display.props;\n\tuiBuffer = display.buffersByLabel.ui;\n\tupdateProps();\n\tdisplayProps.events.on(\"resize\", updateProps);\n\tctx = uiBuffer.context;\n}\n\nfunction updateProps() {\n\tuiBuffer.width = displayProps.width;\n\tuiBuffer.height = displayProps.height;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/draw/ui.js\n// module id = 42\n// module chunks = 0","\"use strict\";\n\nexport function Events() {\n\tthis.queue = {};\n\treturn this;\n}\n\nEvents.prototype.on = function(event, callback) {\n\tif(this.queue[event] === undefined) this.queue[event] = [];\n\tthis.queue[event].push(callback);\n}\n\nEvents.prototype.fire = (function() {\n\tlet i, len;\n\treturn function(event, params) {\n\t\tif(this.queue[event] === undefined) return;\n\t\tfor(i = 0, len = this.queue[event].length; i < len; ++i) {\n\t\t\tthis.queue[event][i].call(params);\n\t\t}\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/photonomix.events.js\n// module id = 43\n// module chunks = 0"],"sourceRoot":""}